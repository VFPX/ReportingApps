*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="frxbuilder2.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cntrotatepreview AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="verticalGuide" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="horizontalGuide" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ShadowLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="touchPad" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setangle		&& Parameters: iAngle (0-360)
		*p: originx
		*p: originy
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	BackStyle = 1
	Height = 105
	Name = "cntrotatepreview"
	originx = 0
	originy = 0
	SpecialEffect = 1
	Width = 113

	ADD OBJECT 'horizontalGuide' AS line WITH ;
		BorderColor = 131,210,241, ;
		Height = 0, ;
		Left = 0, ;
		Name = "horizontalGuide", ;
		Top = 50, ;
		Width = 100, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Label' AS fixedlabel WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Rotation", ;
		FontName = "Times New Roman", ;
		FontSize = 12, ;
		Height = 48, ;
		Left = 20, ;
		Name = "Label", ;
		Rotation = 360, ;
		Top = 56, ;
		Width = 48, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="label" />

	ADD OBJECT 'ShadowLabel' AS fixedlabel WITH ;
		BackStyle = 0, ;
		FontName = "Times New Roman", ;
		FontSize = 12, ;
		ForeColor = 131,210,241, ;
		Left = 56, ;
		Name = "ShadowLabel", ;
		Top = 20, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="label" />

	ADD OBJECT 'touchPad' AS shape WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 21, ;
		Left = 76, ;
		Name = "touchPad", ;
		Top = 12, ;
		Width = 21, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'verticalGuide' AS line WITH ;
		BorderColor = 131,210,241, ;
		Height = 100, ;
		Left = 50, ;
		Name = "verticalGuide", ;
		Top = 0, ;
		Width = 0, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE enabled_assign
		lparameter lEnabled
		
		if m.lEnabled
			THIS.Enabled = .T.
			THIS.Label.Enabled = .T.
		*	THIS.BackColor = rgb(255,255,255)
		else
			THIS.Enabled = .F.
			THIS.Label.Enabled = .F.
		*	THIS.BackColor = THISFORM.BackColor
		endif
	ENDPROC

	PROCEDURE Init
		*---------------------------------
		* Center the origin:
		*---------------------------------
		THIS.originX = int(THIS.Width/2)
		THIS.originY = int(THIS.Height/2)
		
		*----------------------------------------
		* Position the guidelines on the origin:
		*----------------------------------------
		with THIS.VerticalGuide
			.Height = THIS.Height-2
			.Top    = 1
			.Left   = THIS.originX
		endwith	
		with THIS.HorizontalGuide
			.Width = THIS.Width-2
			.Left  = 1
			.Top   = THIS.originY
		endwith	
		
		*----------------------------------------
		* Size the Label control:
		*----------------------------------------
		local iLength
		with THIS.Label
			.AutoSize = .T.
			.Caption = .Caption
			.AutoSize = .F.
			store .Width+3 to ;
				.Width, ;
				.Height
		endwith
		
		THIS.SetAngle(360)
			
		*----------------------------------------
		* Position the shadow label to mimic
		* the designer:
		*----------------------------------------
		with THIS.ShadowLabel
			.Caption    = THIS.Label.Caption
			.FontName   = THIS.Label.FontName
			.FontSize   = THIS.Label.FontSize
			.FontBold   = THIS.Label.FontBold
			.FontItalic = THIS.Label.FontItalic
			.AutoSize = .F.
			.Width  = THIS.Label.Width
			.Height = THIS.Label.Height
			.Top    = THIS.Label.Top
			.Left   = THIS.Label.Left
			.Rotation = 360
		endwith
		
		*----------------------------------------
		* Position the touch pad:
		*----------------------------------------
		THIS.TouchPad.Top = 0
		THIS.TouchPad.Left = 0
		THIS.TouchPad.Width = THIS.Width-1
		THIS.TouchPad.Height = THIS.Height-1
	ENDPROC

	PROCEDURE setangle		&& Parameters: iAngle (0-360)
		lparameter tiAngle
		
		local ;
			iOriginOffset, ;
			iFontSizeOffset, ;
			iLabelBoxDimension, ;
			iRotation, nRadians, ;
			iTop, iLeft
		
		*------------------------------------------------
		* Get the angle MOD 360:
		*------------------------------------------------
		tiAngle = m.tiAngle % 360
		
		*------------------------------------------------
		* Set the size of the label box:
		*------------------------------------------------
		iLabelBoxDimension = THIS.Label.Width
		
		*------------------------------------------------
		* Calculate the text size offset (half the character height)
		*------------------------------------------------
		iFontSizeOffset = fontmetric( ;
							1, ;
							THIS.Label.FontName, ;
							THIS.Label.FontSize, ;
							iif(THIS.Label.FontBold,'B','')+iif(THIS.Label.FontItalic,'I','') ;
							)
		iFontSizeOffset = int( m.iFontSizeOffset/2 )
		
		*------------------------------------------------
		* Convert angle parameter into label rotation:
		*------------------------------------------------
		*   0 -> 360 
		*  90 -> 270
		* 180 -> 180
		* 270 ->  90
		* 360 -> 360
		
		iRotation = (360 - m.tiAngle)
		if m.iRotation = 0
			m.iRotation = 360
		endif
		
		THIS.Label.Rotation = m.iRotation
		
		*------------------------------------------------
		* Convert angle parameter to radians:
		*------------------------------------------------
		nRadians = dtor(m.tiAngle)
		
		*------------------------------------------------
		* Calculate the .Top of the label box
		* Top = 
		*------------------------------------------------
		iTop = m.iLabelBoxDimension * (sin(m.nRadians) - 1)/2  ;
		     + m.iFontSizeOffset * cos(m.nRadians) ;
		     + THIS.originY
		
		THIS.Label.Top = int(m.iTop)
		
		*------------------------------------------------
		* Calculate the .Left of the label box
		*------------------------------------------------
		iLeft = m.iLabelBoxDimension * (cos(m.nRadians) -1)/2 ;
		      - m.iFontSizeOffset * sin(m.nRadians) ;
			  + THIS.originX
		
		THIS.Label.Left = int(m.iLeft)
		
		return				
	ENDPROC

	PROCEDURE touchPad.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		if nButton=1 and THIS.Parent.Enabled
			local Xo,Yo, Xp, Yp, angle
			
			Xo = THIS.Parent.OriginX
			Yo = THIS.Parent.OriginY
			Xp = m.nxCoord - objtoclient(THIS.Parent,2)
			Yp = m.nyCoord - objtoclient(THIS.Parent,1)
		
			angle = rtod(atn2(Yp-Yo, Xp-Xo))
			if m.angle < 0
				angle = 360+m.angle
			endif
		
			THIS.Parent.SetAngle( m.angle )
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS fixedlabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
	*</DefinedPropArrayMethod>

	Caption = "Label1"
	Height = 17
	Name = "fixedlabel"
	Width = 40
	
	PROCEDURE fontname_assign
		LPARAMETERS vNewVal
		* Do not allow font name changes
		*THIS.FontName = m.vNewVal
		
	ENDPROC

	PROCEDURE fontsize_assign
		LPARAMETERS vNewVal
		* Do not allow font size changes
		*THIS.FontSize = m.vNewVal
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frxaddadvprop AS frxbaseform OF "frxbuilder.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ctlValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgBoolean" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: execute
		*m: refreshcontrolstate
		*p: event
		*p: propertyname
		*p: propertyvalue
		*p: savechanges
		*a: propertytype[5,0]
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BorderStyle = 3
	Caption = "Add Property"
	Closable = .F.
	Desktop = .T.
	DoCreate = .T.
	event = .NULL.
	Height = 182
	MaxButton = .F.
	MinButton = .F.
	Name = "frxaddadvprop"
	propertyname = 
	propertyvalue = 
	savechanges = .F.
	Width = 314
	grabber.Height = 12
	grabber.Left = 284
	grabber.Name = "grabber"
	grabber.Top = 136
	grabber.Width = 11
	grabber.ZOrderSet = 1
	frxcursor.Left = 268
	frxcursor.Name = "frxcursor"
	frxcursor.Top = 120

	ADD OBJECT 'cboType' AS cbo WITH ;
		Comment = "N", ;
		Left = 24, ;
		Name = "cboType", ;
		Style = 2, ;
		TabIndex = 1, ;
		Top = 33, ;
		Width = 180, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdAdd' AS cmd WITH ;
		Caption = "Add", ;
		Default = .T., ;
		Left = 220, ;
		Name = "cmdAdd", ;
		TabIndex = 4, ;
		Top = 8, ;
		Width = 85, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS cmd WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Left = 220, ;
		Name = "cmdCancel", ;
		TabIndex = 5, ;
		Top = 36, ;
		Width = 85, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'ctlValue' AS frxexpressioncontrol WITH ;
		calledfrom = AdvancedPropertyValue, ;
		Height = 28, ;
		Left = 23, ;
		Name = "ctlValue", ;
		TabIndex = 3, ;
		Top = 124, ;
		Width = 188, ;
		ZOrderSet = 6, ;
		txtExpression.Height = 22, ;
		txtExpression.Left = 1, ;
		txtExpression.Name = "txtExpression", ;
		txtExpression.SelectOnEntry = .T., ;
		txtExpression.Top = 1, ;
		txtExpression.Width = 155, ;
		cmdExprBuilder.Left = 160, ;
		cmdExprBuilder.Name = "cmdExprBuilder", ;
		cmdExprBuilder.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		Caption = "Name:", ;
		Height = 15, ;
		Left = 24, ;
		Name = "Lbl1", ;
		TabIndex = 6, ;
		Top = 63, ;
		Width = 33, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LBL2' AS lbl WITH ;
		Caption = "Value:", ;
		Left = 24, ;
		Name = "LBL2", ;
		TabIndex = 7, ;
		Top = 108, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		Caption = "Type:", ;
		Left = 24, ;
		Name = "Lbl3", ;
		TabIndex = 8, ;
		Top = 17, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'opgBoolean' AS opg WITH ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Height = 24, ;
		Left = 24, ;
		Name = "opgBoolean", ;
		Top = 124, ;
		Width = 180, ;
		Opt1.Caption = "Yes", ;
		Opt1.Left = 4, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 4, ;
		Opt2.Caption = "No", ;
		Opt2.Left = 88, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 160, ;
		Left = 12, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 200, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'txtName' AS txt WITH ;
		Left = 24, ;
		Name = "txtName", ;
		TabIndex = 2, ;
		Top = 79, ;
		Width = 180, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE execute
		lparameter toList, toEvent
		
		local i, tmpAlias, cNewProp
		tmpAlias = alias()
		
		THIS.event = m.toEvent
		
		*-------------------------------------------------
		* Kind of kludgey way to do a look-up 
		* from DataType (int) to DataType (localised text label)
		* See below...
		*-------------------------------------------------
		THIS.PropertyType[ADVPROP_EDITMODE_GETEXPR] = ADVPROP_EDITMODE_GETEXPR_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_TEXT]    = ADVPROP_EDITMODE_TEXT_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_STRING]  = ADVPROP_EDITMODE_STRING_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_GETFILE] = ADVPROP_EDITMODE_GETFILE_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_BOOLEAN] = ADVPROP_EDITMODE_BOOLEAN_LOC
		
		*-------------------------------------------------
		* Populate the DataType dropdown:
		* TODO: read custom data types?
		*-------------------------------------------------
		this.cboType.AddItem(ADVPROP_EDITMODE_GETEXPR_LOC)
		this.cboType.AddItem(ADVPROP_EDITMODE_TEXT_LOC)
		this.cboType.AddItem(ADVPROP_EDITMODE_STRING_LOC)
		this.cboType.AddItem(ADVPROP_EDITMODE_GETFILE_LOC)
		this.cboType.AddItem(ADVPROP_EDITMODE_BOOLEAN_LOC)
		this.cboType.Value = 1
		
		THIS.PropertyName = space(fsize("PROPERTY_NAME"))
		THIS.txtName.ControlSource = "THISFORM.PropertyName"
		
		THIS.RefreshControlState()	
			
		do while .T.
			THIS.Show(1)
		
			if THIS.SaveChanges
				cNewProp = trim(THIS.txtName.Value)
				*-------------------------------------------------
				* Check to see if already defined
				*-------------------------------------------------
				select (m.tmpAlias)
				locate for upper(PROPERTY_NAME) = upper(m.cNewProp) and not deleted()
				if found()
					=messagebox(strtran(ADVPROP_ALREADY_DEFINED_LOC,'{0}', m.cNewProp ), 64, DEFAULT_MBOX_TITLE_LOC)
					THIS.SaveChanges = .F.
					loop
				endif				
			endif
			exit
		enddo
		
		if THIS.SaveChanges
		
			if THIS.cboType.Value = ADVPROP_EDITMODE_BOOLEAN
				THIS.ctlValue.Value = iif(THIS.opgBoolean.Value=1,'1','0')
			endif		
		
			*-------------------------------------------------
			* Update temp cursor:
			*-------------------------------------------------
			insert into (m.tmpAlias) ;
				( PROPERTY_NAME, ;
				  DEFAULT_VALUE, ;
				  PROPERTY_VALUE, ;
				  DATA_TYPE, ; 
				  CUSTOM ) ;
			values	;
				( trim(THIS.txtName.Value), ;
				  '' , ;
				  trim(THIS.ctlValue.Value), ;
				  THIS.cboType.Value, ;
				  .T. )
				
			*-------------------------------------------------
			* update list:
			*-------------------------------------------------
			i = toList.ListCount+1
			toList.AddListItem( trim(THIS.txtName.Value),  m.i, 1 )	
			
			do case
			case THIS.cboType.Value = ADVPROP_EDITMODE_GETFILE
				toList.AddListItem( displaypath(trim(THIS.ctlValue.Value),25),  m.i, 2 )
		
			case THIS.cboType.Value = ADVPROP_EDITMODE_TEXT
				if len(alltrim(THIS.ctlValue.Value))>0
					toList.AddListItem( left(trim(THIS.ctlValue.Value),25)+"...",  m.i, 2 )
				else			
					toList.AddListItem( "",  m.i, 2 )
				endif
		
			case THIS.cboType.Value = ADVPROP_EDITMODE_BOOLEAN
				toList.AddListItem( iif(THIS.ctlValue.Value='1',  ADVPROP_BOOLEAN_YES_LOC,  ADVPROP_BOOLEAN_NO_LOC ),  m.i, 2 )
		
			otherwise
				toList.AddListItem( trim(THIS.ctlValue.Value), m.i, 2 )
		
			endcase
			if THIS.cboType.Value > 0
				toList.AddListItem( THIS.PropertyType[THIS.cboType.Value],  m.i, 3 )
			endif
		
		endif
		
		THIS.event = .NULL.
		return
	ENDPROC

	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ADVPROP_ADD_DLG_CAPTION_LOC
		#ENDIF
		
		THIS.BorderStyle = 2
		
		dodefault()
		
		THIS.Resize()
		
	ENDPROC

	PROCEDURE refreshcontrolstate
		if THIS.cboType.Value = 5
		
			THIS.ctlValue.Visible = .F.
			THIS.opgBoolean.Visible = .T.
		
			* Default a value if it hasn't been set yet:
			if THIS.opgBoolean.Value = 0
				THIS.opgBoolean.Value = 1
			endif
		
		else
		
			THIS.ctlValue.Visible = .T.
			THIS.opgBoolean.Visible = .F.
		
			THIS.ctlValue.SetTextBoxReadOnly( ;
				inlist( THIS.cboType.Value, ;
					ADVPROP_EDITMODE_BOOLEAN, ADVPROP_EDITMODE_TEXT ))
		
		endif
		
		
	ENDPROC

	PROCEDURE cboType.InteractiveChange
		THIS.Parent.RefreshControlState()
	ENDPROC

	PROCEDURE cmdAdd.Click
		THISFORM.SaveChanges = .T.
		THISFORM.Hide()
	ENDPROC

	PROCEDURE cmdAdd.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_ADD_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.SaveChanges = .F.
		THISFORM.Hide()
	ENDPROC

	PROCEDURE cmdCancel.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_CANCEL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE ctlValue.getexpression
		*-------------------------------------------------------
		* Method overridden on purpose:
		*-------------------------------------------------------
		local cExpression, cDefaultExpr, cEditMode
		cExpression  = ""
		cDefaultExpr = THIS.Value
		cEditMode    = THIS.Parent.cboType.Value
		
		do case
		case m.cEditMode = ADVPROP_EDITMODE_GETEXPR
			cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, '', THIS.CalledFrom )
		
		case m.cEditMode = ADVPROP_EDITMODE_GETFILE             
			cExpression = getfile()
		
		case m.cEditMode = ADVPROP_EDITMODE_STRING	
			cExpression = inputbox(trim(THIS.Parent.txtName.Value) + " = ", UI_ADVPROP_EDT_DLG_CAPTION_LOC, m.cDefaultExpr )
		
		case m.cEditMode = ADVPROP_EDITMODE_BOOLEAN       
			* Use a simple messagebox:
			if messagebox(trim(THIS.Parent.txtName.Value) + " = ", 4, UI_ADVPROP_EDT_DLG_CAPTION_LOC ) = 6
				cExpression = "Yes"
			else
				cExpression = "No"
			endif
		
		otherwise	&& ADVPROP_EDITMODE_TEXT
			local oEditor
			oEditor = newobject("frxMemoEditForm", "frxbuilder.vcx")
			if not isnull( m.oEditor )
				oEditor.Text    = m.cDefaultExpr
				oEditor.Caption = UI_ADVPROP_EDT_DLG_CAPTION_LOC
				oEditor.SetHelperText(ADVPROP_EDIT_HELPER_TXT_LOC)
				oEditor.Execute()
				cExpression = oEditor.Text
			endif 
			
		endcase
		if not empty( m.cExpression )
			THIS.Value = m.cExpression
		endif
		
		return
		
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ADVPROP_NAME_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LBL2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ADVPROP_VALUE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ADVPROP_TYPE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgBoolean.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_OPT_YES_LOC
		#ENDIF
	ENDPROC

	PROCEDURE opgBoolean.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_OPT_NO_LOC
		#ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS frxdynamiceditor AS frxbaseform OF "frxbuilder.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtConditionName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expCondition" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblExpression" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOverride" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Paneltextformat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expOverride" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: execute
		*m: updatepreviewtext
		*p: event
		*p: savechanges
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BorderStyle = 3
	Closable = .F.
	Desktop = .T.
	DoCreate = .T.
	event = .NULL.
	Height = 497
	MaxButton = .F.
	MinButton = .F.
	Name = "frxdynamiceditor"
	savechanges = .T.
	Width = 421
	grabber.Height = 11
	grabber.Left = 380
	grabber.Name = "grabber"
	grabber.Top = 372
	grabber.Width = 11
	grabber.ZOrderSet = 4
	frxcursor.Left = 380
	frxcursor.Name = "frxcursor"
	frxcursor.Top = 336

	ADD OBJECT 'cmdCancel' AS cmd WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Left = 328, ;
		Name = "cmdCancel", ;
		TabIndex = 10, ;
		Top = 40, ;
		Width = 85, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS cmd WITH ;
		Caption = "OK", ;
		Default = .T., ;
		Left = 328, ;
		Name = "cmdOK", ;
		TabIndex = 9, ;
		Top = 8, ;
		Width = 85, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'expCondition' AS frxexpressioncontrol WITH ;
		calledfrom = EvaluateContentsCondition, ;
		Height = 28, ;
		Left = 16, ;
		Name = "expCondition", ;
		TabIndex = 4, ;
		Top = 74, ;
		Width = 289, ;
		ZOrderSet = 8, ;
		txtExpression.Left = 1, ;
		txtExpression.Name = "txtExpression", ;
		txtExpression.Top = 1, ;
		txtExpression.Width = 253, ;
		cmdExprBuilder.Left = 258, ;
		cmdExprBuilder.Name = "cmdExprBuilder", ;
		cmdExprBuilder.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'expOverride' AS frxexpressioncontrol WITH ;
		calledfrom = EvaluateContentsAlternate, ;
		Height = 28, ;
		Left = 31, ;
		Name = "expOverride", ;
		TabIndex = 7, ;
		Top = 133, ;
		Width = 270, ;
		ZOrderSet = 13, ;
		txtExpression.Left = 1, ;
		txtExpression.Name = "txtExpression", ;
		txtExpression.Top = 1, ;
		txtExpression.Width = 238, ;
		cmdExprBuilder.Left = 243, ;
		cmdExprBuilder.Name = "cmdExprBuilder", ;
		cmdExprBuilder.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Text ", ;
		Left = 28, ;
		Name = "Lbl1", ;
		Style = 3, ;
		TabIndex = 2, ;
		Top = 102, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblExpression' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Apply when this condition is true:", ;
		Left = 18, ;
		Name = "lblExpression", ;
		TabIndex = 5, ;
		Top = 58, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblName' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Name:", ;
		Left = 18, ;
		Name = "lblName", ;
		TabIndex = 3, ;
		Top = 14, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblOverride' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Replace expression result with:", ;
		Left = 33, ;
		Name = "lblOverride", ;
		TabIndex = 6, ;
		Top = 117, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Paneltextformat' AS paneltextformat WITH ;
		Height = 320, ;
		Left = 17, ;
		Name = "Paneltextformat", ;
		TabIndex = 8, ;
		Tag = "memberdata", ;
		Top = 164, ;
		Width = 308, ;
		ZOrderSet = 14, ;
		opgMode.Name = "opgMode", ;
		opgMode.Opt1.Left = 15, ;
		opgMode.Opt1.Name = "Opt1", ;
		opgMode.Opt1.Top = 10, ;
		opgMode.Opt2.Left = 15, ;
		opgMode.Opt2.Name = "Opt2", ;
		opgMode.Opt2.Top = 30, ;
		shpFontBorder.Name = "shpFontBorder", ;
		shpColorBorder.Name = "shpColorBorder", ;
		shpAlphaBorder.Name = "shpAlphaBorder", ;
		shpAlphaBorder.Visible = .T., ;
		lblFont.Name = "lblFont", ;
		txtFont.Name = "txtFont", ;
		cmdFont.Name = "cmdFont", ;
		chkOverrideCharset.Alignment = 0, ;
		chkOverrideCharset.Enabled = .F., ;
		chkOverrideCharset.Name = "chkOverrideCharset", ;
		lblColor.Name = "lblColor", ;
		chkForeDefault.Alignment = 0, ;
		chkForeDefault.Name = "chkForeDefault", ;
		cmdForeColor.Name = "cmdForeColor", ;
		chkBackDefault.Alignment = 0, ;
		chkBackDefault.Name = "chkBackDefault", ;
		cmdBackcolor.Name = "cmdBackcolor", ;
		oFormatter.Name = "oFormatter", ;
		lblBackstyle.Name = "lblBackstyle", ;
		chkStrikethru.Alignment = 0, ;
		chkStrikethru.Name = "chkStrikethru", ;
		chkUnderline.Alignment = 0, ;
		chkUnderline.Name = "chkUnderline", ;
		cntPreview.canvas.hozLine.Name = "hozLine", ;
		cntPreview.canvas.Name = "canvas", ;
		cntPreview.canvas.Text.Name = "Text", ;
		cntPreview.canvas.vertLine.Name = "vertLine", ;
		cntPreview.lblSample.Name = "lblSample", ;
		cntPreview.Name = "cntPreview", ;
		cntPreview.shpBorder.Name = "shpBorder", ;
		lblAlpha.Name = "lblAlpha", ;
		lblAlpha.Visible = .T., ;
		spnAlphaPen.Enabled = .T., ;
		spnAlphaPen.Name = "spnAlphaPen", ;
		spnAlphaPen.Visible = .T., ;
		cntBackColor.Name = "cntBackColor", ;
		cntForeColor.Name = "cntForeColor", ;
		spnAlphaFill.Enabled = .T., ;
		spnAlphaFill.Name = "spnAlphaFill", ;
		spnAlphaFill.Visible = .T., ;
		lblPen.Name = "lblPen", ;
		lblPen.Visible = .T., ;
		lblFill.Name = "lblFill", ;
		lblFill.Visible = .T.
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 480, ;
		Left = 7, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 309, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp2' AS shp WITH ;
		Height = 56, ;
		Left = 17, ;
		Name = "Shp2", ;
		Style = 3, ;
		Top = 108, ;
		Width = 287, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'txtConditionName' AS txt WITH ;
		Left = 17, ;
		Name = "txtConditionName", ;
		ReadOnly = .T., ;
		TabIndex = 1, ;
		TabStop = .F., ;
		Top = 30, ;
		Width = 278, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE execute
		lparameter toList, toEvent
		
		THIS.event = m.toEvent
		
		local cCurrentName
		cCurrentName = toList.Value
		
		*-----------------------------------------------
		* Synchronise the metadata cursor:
		*-----------------------------------------------
		select memberdata
		locate for TYPE = FRX_BLDR_MEMBERDATATYPE and ;
				   NAME = FRX_BLDR_NAMESPACE_EVALUATECONTENTS and ;
				   not deleted("memberdata") and ;
				   upper(EXECUTE) == upper(m.cCurrentName)
		
		if found()
			*-----------------------------------------------
			* update our controls:
			*-----------------------------------------------
			THIS.txtConditionName.Value = trim(memberdata.EXECUTE)
			THIS.expCondition.Value     = trim(memberdata.EXECWHEN)
			THIS.expOverride.Value      = trim(memberdata.SCRIPT)
		
			*----------------------------------
			* Fake out the panel:
			*----------------------------------
			with THIS.panelTextFormat
				.Tag       = "memberdata"
				.event     = m.toEvent
				.frxCursor = m.toEvent.frxCursor
				.LoadFromFrx()
			endwith		
		
			THIS.Show(1)
		
			if THIS.SaveChanges
				*-----------------------------------------------
				* update the member data:
				*-----------------------------------------------
				local cName, cCondition, cOverride, i
				cName      = THIS.txtConditionName.Value
				cCondition = THIS.expCondition.Value
				cOverride  = THIS.expOverride.Value
		
				select memberdata
				replace ;
					EXECWHEN	with m.cCondition, ;
					EXECUTE		with m.cName, ;
					SCRIPT		with m.cOverride
		
				THIS.panelTextFormat.SaveToFrx()
		
				*-----------------------------------------------
				* update the list (only necessary if we're allowing
				* the Condition Name to be edited in this dialog:
				*-----------------------------------------------
				for i = 1 to toList.ListCount
					if toList.ListItem( m.i ) == m.cName
						toList.AddListItem( m.cName, m.i )
					endif
					exit
				endfor
		
			endif
		
			THIS.event = .NULL.
			return .T.
		else
			THIS.event = .NULL.
			return .F.
		endif	
		
	ENDPROC

	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_DLG_CAPTION_LOC
		#ENDIF
		
		dodefault()
		
		THIS.BorderStyle = 2
	ENDPROC

	PROCEDURE updatepreviewtext
		*------------------------------------------------
		* Set the value of the preview text
		*------------------------------------------------
		local cPreviewText, cOverride, cExpr
		cOverride  = THIS.expOverride.Value
		cExpr      = frx.EXPR
		 
		set datasession to (THIS.event.defaultSessionId)
		
		if not empty( m.cOverride )
			if type( m.cOverride ) = "U"
				cPreviewText = m.cOverride  && use the literal?
			else
				cPreviewText = left(transform( eval( m.cOverride ) ),254)
			endif
		else
			if type( m.cExpr ) = "U"
				cPreviewText = TEXTFORMAT_PREVIEW_DEFAULT_TEXT_LOC
			else
				cPreviewText = left(transform( eval( m.cExpr ) ),254)
			endif
		endif		
		
		set datasession to (THIS.event.frxSessionId)
		
		THIS.panelTextFormat.cntPreview.Caption = m.cPreviewText 
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.SaveChanges = .F.
		THISFORM.Hide()
	ENDPROC

	PROCEDURE cmdCancel.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_CANCEL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdOK.Click
		THISFORM.Hide()
	ENDPROC

	PROCEDURE cmdOK.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_OK_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_TEXT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblExpression.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_EXPR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblName.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_NAME_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblOverride.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_OVERRIDE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Paneltextformat.loadfromfrx
		*================================================
		* THIS METHOD HAS BEEN INTENTIONALLY OVERRIDDEN
		* to use the "memberdata" cursor as a data source
		* instead of the "frx" one.
		*================================================
		if used( THIS.Tag )
			*----------------------------------------------
			* Actually pretty much has to be "memberdata":
			*----------------------------------------------
			select (THIS.Tag)
		
			*-----------------------------------------------------------------
			* Ensure the formatter has reference to our utility object:
			*-----------------------------------------------------------------
			THIS.oFormatter.frxCursor = THIS.frxCursor
		
			*-----------------------------------------------------------------
			*
			* Load the formatter from the source cursor:
			*
			*-----------------------------------------------------------------
			THIS.oFormatter.SetFont( FNAME, val(FSIZE), val(FSTYLE), frx.DOUBLE, frx.RESOID )
			THIS.oFormatter.setForeColor( val(PENRGB) )
			THIS.oFormatter.setBackColor( val(FILLRGB) )
		
			*--------------------------------------------
			* PENA,FILLA = ? Try:
			*   -1,0          = transparent
			*   -1,255        = opaque
			*   anything else = custom alpha
			*--------------------------------------------
			do case
			case PENA="-1" and FILLA="-1"
				if bittest( frx.MODE, 0 ) 
					THIS.oFormatter.Transparency = 2
				else
					THIS.oFormatter.Transparency = 1
				endif
			
			case inlist( PENA, "-1", "255" ) and FILLA = "255"
				THIS.oFormatter.Transparency = 1
				
			case inlist( PENA, "-1", "255" ) and FILLA = "0"
				THIS.oFormatter.Transparency = 2
					
			otherwise
				THIS.oFormatter.Transparency = 2
				THIS.oFormatter.AlphaPen  = val(PENA)
				THIS.oFormatter.AlphaFill = val(FILLA)
				
			endcase
		
			*-----------------------------------------------------------------
			* Initialise the controls from the oFormatter:
			*
			* NB: Automatic databinding does not work, because the InteractiveChange()
			*     is called *before* the binding takes place. This screws up everything.
			*     So: Manual databinding. Darn it.
			*-----------------------------------------------------------------
			THIS.chkOverrideCharset.Value = THIS.oFormatter.UseExplicitFontCharset
			THIS.chkBackDefault.Value     = THIS.oFormatter.DefaultBackColor
			THIS.chkForeDefault.Value     = THIS.oFormatter.DefaultForeColor
			THIS.chkStrikethru.Value      = THIS.oFormatter.FontStrikeThru
			THIS.chkUnderLine.Value       = THIS.oFormatter.FontUnderline
			THIS.opgMode.Value            = THIS.oFormatter.Transparency
			THIS.txtFont.Value            = THIS.oFormatter.getFontString()
			
			*-----------------------------------------------------------------
			* Update the preview text caption:
			*-----------------------------------------------------------------
		*!*		local cPreviewText, cExpr
		*!*		cPreviewText = ""
		*!*		cExpr        = EXPR
		*!*		
		*!*		set datasession to (THIS.event.defaultSessionId)
		*!*		if type( m.cExpr ) = "U"
		*!*			cPreviewText = TEXTFORMAT_PREVIEW_DEFAULT_TEXT_LOC
		*!*		else
		*!*			cPreviewText = left(transform( eval( m.cExpr ) ),254)
		*!*		endif
		*!*		set datasession to (THIS.event.frxSessionId)
		
		*!*		THIS.cntPreview.Caption = m.cPreviewText
		
			*-----------------------------------------------------------------
			* Ensure the controls are in sync:
			*-----------------------------------------------------------------
			THIS.RefreshControlValues("All")
		
			*-----------------------------------------------------------------
			* Show any hidden or disabled controls:
			*-----------------------------------------------------------------
			store .T. to ;
				THIS.lblFill.Enabled, ;
				THIS.lblPen.Enabled 	
			
			*-----------------------------------------------------------------
			* Go to protected mode, if necessary:
			*-----------------------------------------------------------------
			THIS.setProtection()
			
		endif
			
	ENDPROC

	PROCEDURE Paneltextformat.savetofrx
		*================================================
		* THIS METHOD HAS BEEN INTENTIONALLY OVERRIDDEN
		* to use the "memberdata" cursor as a data source
		* instead of the "frx" one.
		*================================================
		if used( THIS.Tag )
		
			*-----------------------------------------------------------------
			* Pretty much has to be "memberdata"
			*-----------------------------------------------------------------
			select (THIS.Tag)
			
			*-----------------------------------------------------------------
			* Font:
			*-----------------------------------------------------------------
			replace FNAME		with THIS.oFormatter.FontFace, ;
					FSIZE		with tran(THIS.oFormatter.FontSize), ;
					FSTYLE		with trans(THIS.oFormatter.FontStyle), ;
					PENA		with trans(THIS.oFormatter.AlphaPen), ;
					FILLA		with trans(THIS.oFormatter.AlphaFill), ;
					PENRGB		with trans(THIS.oFormatter.GetForeColor()), ;
					FILLRGB		with trans(THIS.oFormatter.GetBackColor())
			
			*-----------------------------------------------------------------
			* Ensure the formatter clears its reference to our utility object:
			*-----------------------------------------------------------------
			THIS.oFormatter.frxCursor = null
				
		endif
		return .T.
	ENDPROC

	PROCEDURE Paneltextformat.setprotection
		*=======================================================================
		* SetProtection()
		*
		* This container will check to see if the current record in the FRX is
		* marked with "Edit" protection, and if so, configure its controls to be 
		* read-only.
		*
		* INTENTIONALLY OVERRIDDEN BECAUSE FRX IS NOT THE DEFAULT ALIAS
		*=======================================================================
		lparameter loContainer
		
		if type("loContainer") <> "O" or isnull(loContainer)
			loContainer = THIS
		endif
			
		if THIS.event.protected
		
			*-----------------------------------------------------------------
			* Check for OBJECT_NO_EDIT protection:
			*-----------------------------------------------------------------
			if THIS.frxCursor.hasProtectionFlag( frx.ORDER, FRX_PROTECT_OBJECT_NO_EDIT) ;
			or THIS.frxCursor.hasProtectionFlag( frx.ORDER, FRX_PROTECT_BAND_NO_EDIT) 
		
				local oControl
				for each oControl in loContainer.Controls
		
					*-----------------------------------------------------------------
					* Do whatever it takes to make each control type appropriately
					* read-only. Unfortunately not all control types have a .ReadOnly 
					* property.
					*-----------------------------------------------------------------
					do case
					case inlist( oControl.BaseClass, "Combobox" )
						if type("oControl.TabStop") = "L"
							oControl.TabStop = .F.
						endif
						if type( "oControl.Enabled" ) = "L"
							oControl.Enabled = .F.
						endif
									
					case inlist( oControl.BaseClass, "Pageframe" )
						* recurse into the container
						local loPage
						for each loPage in oControl.Pages
							THIS.setProtection( loPage )
						endfor
						
					case not inlist( oControl.BaseClass, "Label", "Shape", "Page" )
		
						if type("oControl.TabStop") = "L"
							oControl.TabStop = .F.
						endif
						do case
						case type( "oControl.ReadOnly" ) = "L"
							oControl.ReadOnly = .T.
		
						case type( "oControl.Enabled" ) = "L"
							oControl.Enabled = .F.
							
						endcase	
					endcase
				
					if type("oControl.SelectOnEntry")="L"
						oControl.SelectOnEntry = .F.
					endif
				endfor
			endif
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS frxdynamiceditor2 AS frxbaseform OF "frxbuilder.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtConditionName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expCondition" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expWidth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expHeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblExpression" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblWidth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LblHeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtHelperText" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: execute
		*m: updatepreviewtext
		*p: event
		*p: savechanges
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BorderStyle = 3
	Closable = .F.
	Desktop = .T.
	DoCreate = .T.
	event = .NULL.
	Height = 320
	MaxButton = .F.
	MinButton = .F.
	Name = "frxdynamiceditor2"
	savechanges = .T.
	Width = 447
	grabber.Height = 11
	grabber.Left = 416
	grabber.Name = "grabber"
	grabber.Top = 144
	grabber.Width = 11
	grabber.ZOrderSet = 3
	frxcursor.Left = 416
	frxcursor.Name = "frxcursor"
	frxcursor.Top = 84

	ADD OBJECT 'cmdCancel' AS cmd WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		Left = 356, ;
		Name = "cmdCancel", ;
		TabIndex = 10, ;
		Top = 40, ;
		Width = 85, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS cmd WITH ;
		Caption = "OK", ;
		Default = .T., ;
		Left = 356, ;
		Name = "cmdOK", ;
		TabIndex = 9, ;
		Top = 8, ;
		Width = 85, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtHelperText' AS edt WITH ;
		Anchor = 14, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		DisabledBackColor = 255,255,255, ;
		ForeColor = 128,128,128, ;
		Height = 68, ;
		Left = 32, ;
		Name = "edtHelperText", ;
		ReadOnly = .T., ;
		TabIndex = 11, ;
		TabStop = .F., ;
		Top = 216, ;
		Width = 288, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'expCondition' AS frxexpressioncontrol WITH ;
		calledfrom = AdjustObjectSizeCondition, ;
		Height = 28, ;
		Left = 16, ;
		Name = "expCondition", ;
		TabIndex = 3, ;
		Top = 74, ;
		Width = 328, ;
		ZOrderSet = 6, ;
		txtExpression.Left = 1, ;
		txtExpression.Name = "txtExpression", ;
		txtExpression.Top = 1, ;
		txtExpression.Width = 295, ;
		cmdExprBuilder.Left = 298, ;
		cmdExprBuilder.Name = "cmdExprBuilder", ;
		cmdExprBuilder.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'expHeight' AS frxexpressioncontrol WITH ;
		calledfrom = AdjustObjectSizeHeight, ;
		Height = 28, ;
		Left = 24, ;
		Name = "expHeight", ;
		TabIndex = 5, ;
		Top = 176, ;
		Width = 308, ;
		ZOrderSet = 8, ;
		txtExpression.Left = 1, ;
		txtExpression.Name = "txtExpression", ;
		txtExpression.Top = 1, ;
		txtExpression.Width = 275, ;
		cmdExprBuilder.Left = 280, ;
		cmdExprBuilder.Name = "cmdExprBuilder", ;
		cmdExprBuilder.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'expWidth' AS frxexpressioncontrol WITH ;
		calledfrom = AdjustObjectSizeWidth, ;
		Height = 28, ;
		Left = 24, ;
		Name = "expWidth", ;
		TabIndex = 4, ;
		Top = 128, ;
		Width = 308, ;
		ZOrderSet = 7, ;
		txtExpression.Left = 1, ;
		txtExpression.Name = "txtExpression", ;
		txtExpression.Top = 1, ;
		txtExpression.Width = 275, ;
		cmdExprBuilder.Left = 280, ;
		cmdExprBuilder.Name = "cmdExprBuilder", ;
		cmdExprBuilder.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'lblExpression' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Apply when this condition is true:", ;
		Left = 18, ;
		Name = "lblExpression", ;
		TabIndex = 6, ;
		Top = 58, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LblHeight' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Expression representing height in [... metric]:", ;
		Left = 26, ;
		Name = "LblHeight", ;
		TabIndex = 8, ;
		Top = 160, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblName' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Name:", ;
		Left = 18, ;
		Name = "lblName", ;
		TabIndex = 2, ;
		Top = 14, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LblWidth' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Expression representing width in [... metric]:", ;
		Left = 26, ;
		Name = "LblWidth", ;
		TabIndex = 7, ;
		Top = 112, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 304, ;
		Left = 7, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 341, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp2' AS shp WITH ;
		Height = 196, ;
		Left = 17, ;
		Name = "Shp2", ;
		Style = 3, ;
		Top = 106, ;
		Width = 319, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp3' AS shp WITH ;
		Anchor = 14, ;
		BackColor = 255,255,255, ;
		BorderColor = 192,192,192, ;
		Curvature = 2, ;
		Height = 81, ;
		Left = 25, ;
		Name = "Shp3", ;
		Style = 0, ;
		Top = 209, ;
		Width = 303, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'txtConditionName' AS txt WITH ;
		Left = 17, ;
		Name = "txtConditionName", ;
		ReadOnly = .T., ;
		TabIndex = 1, ;
		TabStop = .F., ;
		Top = 30, ;
		Width = 319, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE execute
		lparameter toList, toEvent
		
		THIS.event = m.toEvent
		
		local cCurrentName
		cCurrentName = toList.Value
		
		*-----------------------------------------------
		* Synchronise the metadata cursor:
		*-----------------------------------------------
		select memberdata
		locate for TYPE = FRX_BLDR_MEMBERDATATYPE and ;
				   NAME = FRX_BLDR_NAMESPACE_ADJUSTOBJECTSIZE and ;
				   not deleted("memberdata") and ;
				   upper(EXECUTE) == upper(m.cCurrentName)
		
		if found()
			*-----------------------------------------------
			* update our controls:
			*-----------------------------------------------
			THIS.txtConditionName.Value = trim(memberdata.EXECUTE)
			THIS.expCondition.Value     = trim(memberdata.EXECWHEN)
			THIS.expWidth.Value      = trim(memberdata.WIDTH)
			THIS.expHeight.Value      = trim(memberdata.HEIGHT)
		
			THIS.Show(1)
		
			if THIS.SaveChanges
				*-----------------------------------------------
				* update the member data:
				*-----------------------------------------------
				local cName, cCondition, cWidth, cHeight, i
				cName      = THIS.txtConditionName.Value
				cCondition = THIS.expCondition.Value
				cWidth = THIS.expWidth.Value
				cHeight = THIS.expHeight.Value
				select memberdata
				replace ;
					EXECWHEN	with m.cCondition, ;
					EXECUTE		with m.cName, ;
					WIDTH		with m.cWidth, ;
					HEIGHT		with m.cHeight
		
				*-----------------------------------------------
				* update the list (only necessary if we're allowing
				* the Condition Name to be edited in this dialog:
				*-----------------------------------------------
				for i = 1 to toList.ListCount
					if toList.ListItem( m.i ) == m.cName
						toList.AddListItem( m.cName, m.i )
					endif
					exit
				endfor
		
			endif
		
			THIS.event = .NULL.
			return .T.
		else
			THIS.event = .NULL.
			return .F.
		endif	
		
	ENDPROC

	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_DLG_CAPTION_LOC
		#ENDIF
		
		dodefault()
		
		THIS.BorderStyle = 2
	ENDPROC

	PROCEDURE updatepreviewtext
		*------------------------------------------------
		* see notes in calling form label about preview
		*------------------------------------------------
		local cExpr
		 
		set datasession to (THIS.event.defaultSessionId)
		
		if type( m.cExpr ) = "U"
		 *&* TBD
		else
		 *&* TBD
		endif		
		
		set datasession to (THIS.event.frxSessionId)
		
		
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.SaveChanges = .F.
		THISFORM.Hide()
	ENDPROC

	PROCEDURE cmdCancel.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_CANCEL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdOK.Click
		THISFORM.Hide()
	ENDPROC

	PROCEDURE cmdOK.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_OK_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE edtHelperText.Init
		THIS.Value = DYNAMICS_HELPER_TEXT4_LOC + DYNAMICS_HELPER_TEXT5_LOC 
		
	ENDPROC

	PROCEDURE lblExpression.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_EXPR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LblHeight.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_HEIGHT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblName.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_NAME_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LblWidth.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_WIDTH_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS paneladjustobjectsize AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstConditions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtHelperText" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: deletecondition
		*m: editcondition
		*m: previewscript
		*m: scriptcondition
		*m: updatepreview
		*p: checkedmemberdatacursor
	*</DefinedPropArrayMethod>

	checkedmemberdatacursor = .F.
	Height = 248
	Name = "paneladjustobjectsize"
	Width = 415

	ADD OBJECT 'cmdAdd' AS cmd WITH ;
		Caption = "Add...", ;
		Left = 312, ;
		Name = "cmdAdd", ;
		TabIndex = 3, ;
		Top = 24, ;
		Width = 88, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS cmd WITH ;
		Caption = "Delete", ;
		Enabled = .F., ;
		Left = 312, ;
		Name = "cmdDelete", ;
		TabIndex = 5, ;
		Top = 80, ;
		Width = 88, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEdit' AS cmd WITH ;
		Caption = "Edit...", ;
		Enabled = .F., ;
		Left = 312, ;
		Name = "cmdEdit", ;
		TabIndex = 4, ;
		Top = 52, ;
		Width = 88, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdScript' AS cmd WITH ;
		Caption = "Script...", ;
		Enabled = .F., ;
		Left = 312, ;
		Name = "cmdScript", ;
		TabIndex = 6, ;
		Top = 108, ;
		Width = 88, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtHelperText' AS edt WITH ;
		Anchor = 14, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		DisabledBackColor = 255,255,255, ;
		ForeColor = 128,128,128, ;
		Height = 68, ;
		Left = 20, ;
		Name = "edtHelperText", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 160, ;
		Width = 372
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Conditions ", ;
		Left = 12, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 2, ;
		Top = 1, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lstConditions' AS lst WITH ;
		Height = 120, ;
		Left = 12, ;
		MoverBars = .T., ;
		Name = "lstConditions", ;
		TabIndex = 1, ;
		Top = 24, ;
		Width = 288, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="listbox" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 236, ;
		Left = 4, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 406, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp2' AS shp WITH ;
		Anchor = 14, ;
		BackColor = 255,255,255, ;
		BorderColor = 192,192,192, ;
		Curvature = 2, ;
		Height = 81, ;
		Left = 13, ;
		Name = "Shp2", ;
		Style = 0, ;
		Top = 153, ;
		Width = 387
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE deletecondition
		local i, cConditionName, cursel
		cConditionName = THIS.lstConditions.Value
		cursel = select(0)
		
		if messagebox( strtran(DYNAMICS_DELETE_ARE_YOU_SURE_LOC,'{0}', m.cConditionName ), 4+32+256, DEFAULT_MBOX_TITLE_LOC ) ;
		      = 6 
		
			select memberdata
			delete for TYPE = FRX_BLDR_MEMBERDATATYPE ;
				   and NAME = FRX_BLDR_NAMESPACE_ADJUSTOBJECTSIZE ;
				   and EXECUTE = m.cConditionName
				   
			* remove from list:
			with THIS.lstConditions
				if .ListCount = 1
					.Clear()
				else
					for i = 1 to .ListCount
		*				if .ListItem(m.i) == m.cConditionName
						if .List(m.i) == m.cConditionName
							.RemoveItem(m.i)
							exit
						endif
					endfor
				endif
			endwith
					   	
			select (m.cursel)			   	
			THIS.RefreshEnabledState()
			THIS.UpdatePreview()
		endif
	ENDPROC

	PROCEDURE editcondition
		lparameter tlAdding
		
		if m.tlAdding
			local cConditionName
			cConditionName = ""
			cConditionName = inputbox( DYNAMICS_NEW_COND_PROMPT_LOC, DYNAMICS_NEW_COND_TITLE_LOC)
			if empty( m.cConditionName )
				return
			endif
			
			*------------------------
			* Does it already exist?
			*------------------------
			select memberdata
			locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
				   and NAME = FRX_BLDR_NAMESPACE_ADJUSTOBJECTSIZE ;
				   and upper(EXECUTE) = upper(m.cConditionName) ;
				   and not deleted()		   
			if found()
				=messagebox(DYNAMICS_COND_EXISTS_LOC, 64, DEFAULT_MBOX_TITLE_LOC)
				return
			endif
		
			*-------------------------
			* add to the list
			*-------------------------
			select memberdata
			insert into memberdata ;
				( TYPE, ;
				  NAME, ;
				  EXECUTE, ;
				  EXECWHEN, ;
				  WIDTH, ;
				  HEIGHT) ;
			values ;
				( FRX_BLDR_MEMBERDATATYPE, ;
				  FRX_BLDR_NAMESPACE_ADJUSTOBJECTSIZE, ;
				  m.cConditionName, ;
				  ".F.", ;
				  "-1", ;
				  "-1" )
		
			with THIS.lstConditions
				i = .ListCount + 1
				.AddItem( m.cConditionName, m.i )
				.Value = m.cConditionName
			endwith
		endif
		*----------------------------------
		* Now edit the new condition
		*----------------------------------
		local oForm
		oForm = newobject("frxDynamicEditor2",this.ClassLibrary )
		if not isnull( oForm )
			oForm.Execute( THIS.lstConditions, THIS.Event )
		endif
		
		THIS.Refreshenabledstate()
		THIS.UpdatePreview()
		
		SELECT FRX
		
		return
	ENDPROC

	PROCEDURE ensurememberdatastructure
		*---------------------------------------------------------
		* Ensure memberdata has the required additional columns
		*---------------------------------------------------------
		if not this.checkedMemberdataCursor 
			local cAddColumns, iAddCount
			cAddColumns = ""
			iAddCount = 0
			if type("memberdata.WIDTH")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN WIDTH M"
				iAddCount = m.iAddCount+1
			endif	
			if type("memberdata.HEIGHT")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN HEIGHT M"
				iAddCount = m.iAddCount+1
			endif	
			if m.iAddCount > 0
				*----------------------------------------------
				* Check in case too many columns:
				*----------------------------------------------
				if fcount("memberdata") > (254 - m.iAddCount)
					* There is no room in the structure:
					return .F.
				else
					*----------------------------------------------
					* Update metadata structure:
					*----------------------------------------------
					alter table memberdata &cAddColumns
				endif
			endif
		
			this.checkedMemberdataCursor = .T.
		
		endif
		return .T.
		
		
	ENDPROC

	PROCEDURE loadfromfrx
		*---------------------------------------------------------
		* OK, this is weird. This is required to ensure that
		* the listbox paints correctly:
		*---------------------------------------------------------
		wait "" timeout 0.1
		
		if not used(THIS.Tag)
			return .F.
		endif
		
		select (THIS.Tag)
		
		if THIS.event.Protected
			THIS.cmdScript.Visible = .F.
			THIS.edtHelperText.Value = DYNAMICS_HELPER_TEXT_LOC 
		else
			THIS.edtHelperText.Value = DYNAMICS_HELPER_TEXT_LOC  + " " ;
									 + DYNAMICS_HELPER_TEXT2_LOC ;
									 + DYNAMICS_HELPER_TEXT3_LOC 
		endif 
		
		if not THIS.EnsureMemberDataStructure()
			*---------------------------------------------------------
			* We can't make room for our data in the memberdata:
			*---------------------------------------------------------
			=messagebox( DYNAMICS_STORAGE_ERROR_LOC, 16, DEFAULT_MBOX_TITLE_LOC ) ;
			return .F.
		endif
		
		local i, cInitialValue
		
		with THIS.lstConditions
			.Clear
			.ColumnCount = 1
			i = 1
			.AddItem(UI_DYNAMICS_DEFAULT_LOC)
			
			select memberdata
		
			scan for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			     and NAME = FRX_BLDR_NAMESPACE_ADJUSTOBJECTSIZE ;
			     and not deleted("memberdata")
		
				i = m.i+1
				.AddItem( trim(EXECUTE), m.i )
		
			endscan
		endwith
		
		THIS.lstConditions.Value = UI_DYNAMICS_DEFAULT_LOC
		THIS.RefreshEnabledState()
		THIS.UpdatePreview()
		
		SELECT FRX
		
		return
	ENDPROC

	PROCEDURE previewscript
		local lcText
		lcText = THIS.FrxCursor.GenerateAdjustObjectSizeScript()
		if not empty( m.lcText )
		
			local oForm
			oForm = newobject("frxMemoEditForm","frxBuilder.vcx")
			oForm.Caption = UI_SCRIPTPREVIEW_TITLE_LOC
			oForm.setHelperText(SCRIPTPREVIEW_HELPERTEXT_LOC)
			oForm.FixedWidthFont = .T.
			oForm.Text = m.lcText
			oForm.cmdOK.Enabled = .F.
			oForm.cmdCancel.Caption = UI_CMD_CLOSE_LOC
			oForm.WindowState = 2
			oForm.cmdModiComm.Visible = .T.
			oForm.Execute()
		
		endif
	ENDPROC

	PROCEDURE refreshenabledstate
		local i, llEnable
		do case
		case empty( THIS.lstConditions.Value ) or ;
			 THIS.lstConditions.ListCount = 0
			 
			store .F. to ;
				THIS.cmdEdit.Enabled, ;
				THIS.cmdDelete.Enabled
			
		case THIS.lstConditions.Value = UI_DYNAMICS_DEFAULT_LOC
			store .F. to ;
				THIS.cmdEdit.Enabled, ;
				THIS.cmdDelete.Enabled
		
		otherwise
			store .T. to ;
				THIS.cmdEdit.Enabled, ;
				THIS.cmdDelete.Enabled
		
		endcase
		*------------------------------------
		* Only generate script if there is 
		* at least one custom condition:
		*------------------------------------
		THIS.cmdScript.Enabled = (THIS.lstConditions.ListCount > 1)
		
	ENDPROC

	PROCEDURE savetofrx
		*-----------------------------------------------------------------
		* Write out advanced properties in new order:
		*
		* .ListItem(1-n) will read the condition names in original order
		* .List(1-n)     will read the condition names in their new order
		*
		* the default formatting will not be used.
		*-----------------------------------------------------------------
		local i, cConditionName, oRec
		
		select memberdata
		
		for i = 1 to THIS.lstConditions.ListCount
			cConditionName = THIS.lstConditions.List(m.i)
			
			locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			       and NAME = FRX_BLDR_NAMESPACE_ADJUSTOBJECTSIZE ;
			       and not deleted("memberdata") ;
			       and upper(alltrim(EXECUTE)) = upper(m.cConditionName)
			       
			if found()
				scatter memo name oRec
				delete in memberdata
				insert into memberdata from name oRec
			endif
			
		endfor
	ENDPROC

	PROCEDURE scriptcondition
	ENDPROC

	PROCEDURE updatepreview
		local cConditionName
		cConditionName = trim(this.lstConditions.Value)
		
		
		if m.cConditionName = UI_DYNAMICS_DEFAULT_LOC	
			*-------------------------------------------------
			* Use default:
			*-------------------------------------------------
			
			set datasession to (THIS.event.defaultSessionId)
			if .F. AND type( m.cExpr ) = "U"
			    *&* TBD 
			ELSE
			    *&* TBD
			endif
			set datasession to (THIS.event.frxSessionId)
		
			
		else
			*-------------------------------------------------
			* Synchronise the memberdata cursor with the list
			*-------------------------------------------------
			select memberdata
			locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
				   and NAME = FRX_BLDR_NAMESPACE_ADJUSTOBJECTSIZE ;
				   and upper(EXECUTE) = upper(m.cConditionName)
		
			if found()
		
				
				set datasession to (THIS.event.defaultSessionId)
		
		  		if .F. AND type( m.cExpr ) = "U"
					*&* TBD
				else
					*&* TBD
				endif
		
				set datasession to (THIS.event.frxSessionId)
		
			endif
		endif
		
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		THIS.Parent.EditCondition(.T.)
		
	ENDPROC

	PROCEDURE cmdAdd.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_ADD_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdDelete.Click
		THIS.Parent.DeleteCondition()
	ENDPROC

	PROCEDURE cmdDelete.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_REMOVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdEdit.Click
		THIS.Parent.EditCondition(.F.)
	ENDPROC

	PROCEDURE cmdEdit.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_EDIT_LOC + "..."
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdScript.Click
		THIS.Parent.PreviewScript()
	ENDPROC

	PROCEDURE cmdScript.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_SCRIPT_LOC + "..."
		#ENDIF
		
	ENDPROC

	PROCEDURE edtHelperText.Init
		THIS.Value = DYNAMICS_HELPER_TEXT_LOC 
		* But see the LoadFromFrx() method also
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_CONDITIONS_LOC	
		#ENDIF
		
		
	ENDPROC

	PROCEDURE lstConditions.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE lstConditions.DblClick
		THIS.Parent.EditCondition(.F.)
	ENDPROC

	PROCEDURE lstConditions.InteractiveChange
		THIS.Parent.UpdatePreview()
	ENDPROC

ENDDEFINE

DEFINE CLASS paneladvancedprops AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstProperties" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: addadvprop
		*m: deleteadvprop
		*m: editadvprop
		*p: props
		*p: tmpalias
		*p: values
		*a: propertytype[5,0]
	*</DefinedPropArrayMethod>

	PROTECTED propertytype
	Height = 171
	Name = "paneladvancedprops"
	props = .NULL.
	tmpalias = 
	values = .NULL.
	Width = 535

	ADD OBJECT 'cmdAdd' AS cmd WITH ;
		Caption = "Add...", ;
		Left = 436, ;
		Name = "cmdAdd", ;
		TabIndex = 3, ;
		Top = 57, ;
		Width = 90, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS cmd WITH ;
		Caption = "Delete", ;
		Enabled = .F., ;
		Left = 436, ;
		Name = "cmdDelete", ;
		TabIndex = 4, ;
		Top = 85, ;
		Width = 90, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEdit' AS cmd WITH ;
		Caption = "Edit...", ;
		Enabled = .F., ;
		Left = 436, ;
		Name = "cmdEdit", ;
		TabIndex = 2, ;
		Top = 21, ;
		Width = 90, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblName' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Property Name", ;
		Left = 2, ;
		Name = "lblName", ;
		TabIndex = 5, ;
		Top = 4, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblType' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Type", ;
		Left = 354, ;
		Name = "lblType", ;
		TabIndex = 6, ;
		Top = 4, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblValue' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Value", ;
		Left = 202, ;
		Name = "lblValue", ;
		TabIndex = 7, ;
		Top = 4, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lstProperties' AS lst WITH ;
		Height = 144, ;
		Left = 0, ;
		Name = "lstProperties", ;
		TabIndex = 1, ;
		Top = 21, ;
		Width = 428, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="listbox" />
	
	PROCEDURE addadvprop
		local oForm
		oForm = newobject("frxAddAdvProp","frxBuilder2.vcx")
		if not isnull( m.oForm )
			select (this.tmpAlias)
			oForm.Execute( THIS.lstProperties, THIS.event )
		endif
		return
	ENDPROC

	PROCEDURE deleteadvprop
		local i, cPropName, cursel
		cPropName = THIS.lstProperties.Value
		cursel = select(0)
		 
		if messagebox( strtran(ADVPROP_DELETE_ARE_YOU_SURE_LOC,'{0}', m.cPropName ), 4+32+256, UI_ADVPROP_DEL_DLG_CAPTION_LOC ) ;
		      = 6
		
			select (THIS.tmpAlias)
			locate for PROPERTY_NAME = m.cPropName and not deleted()
			if CUSTOM
		
				delete
		
				*------------------------------------	
				* delete from the list:
				*------------------------------------	
				with THIS.lstProperties
					if .ListCount = 1
						.Clear()
					else		
						for i = 1 to .ListCount
							if .ListItem(m.i) == m.cPropName
								.RemoveItem(m.i)
								exit
							endif
						endfor
					endif
				endwith
			else
				
				replace PROPERTY_VALUE with DEFAULT_VALUE
				*------------------------------------	
				* update the list:
				*------------------------------------	
				with THIS.lstProperties
					for i = 1 to .ListCount
						if .ListItem(m.i) == m.cPropName
							do case
							case DATA_TYPE = ADVPROP_EDITMODE_BOOLEAN
								.AddListItem( iif(trim(DEFAULT_VALUE)='1',  ADVPROP_BOOLEAN_YES_LOC,  ADVPROP_BOOLEAN_NO_LOC ),  m.i, 2 )
												
							otherwise
								.AddListItem( alltrim(DEFAULT_VALUE), m.i, 2 )
			
							endcase
							exit
						endif
					endfor
		
				endwith
				
			endif
			select (m.cursel)
			
			THIS.RefreshEnabledState()	
		
		endif      
		      
		
	ENDPROC

	PROCEDURE Destroy
		if used(THIS.tmpAlias)
			use in (THIS.tmpAlias)
		endif
	ENDPROC

	PROCEDURE editadvprop
		local i, oForm, cText, cursel, cPropName
		cursel = select(0)
		cPropName = THIS.lstProperties.Value
		
		select (this.tmpAlias)
		locate  for PROPERTY_NAME = m.cPropName ;
				and not deleted()
		if found()		 
		
			local cExpression, cCurrentExpr, iEditMode
			cExpression  = ""
			cCurrentExpr = trim(PROPERTY_VALUE)
			iEditMode    = DATA_TYPE
		
			do case
			case m.iEditMode = ADVPROP_EDITMODE_GETFILE             
				cExpression = getfile()
				if empty( m.cExpression )
					cExpression = m.cCurrentExpr 
				endif
				
			case m.iEditMode = ADVPROP_EDITMODE_BOOLEAN       
				* Use a simple messagebox:
				* Toggle?
				if m.cCurrentExpr = '1'
					m.cExpression = '0'
				else
					m.cExpression = '1'
				endif
		*		if messagebox(trim(m.cPropName) + " = ", 4, UI_ADVPROP_EDT_DLG_CAPTION_LOC ) = 6
		*			cExpression = "Yes"
		*		else
		*			cExpression = "No"
		*		endif
		
			case m.iEditMode = ADVPROP_EDITMODE_STRING	
				cExpression = inputbox(trim(m.cPropName) + " = ", UI_ADVPROP_EDT_DLG_CAPTION_LOC, m.cCurrentExpr  )
		
			case m.iEditMode = ADVPROP_EDITMODE_TEXT
				local oEditor
				* TODO: make this a replaceable UI?
				oEditor = newobject("frxMemoEditForm", "frxbuilder.vcx")
				if not isnull( m.oEditor )
					oEditor.Text    = m.cCurrentExpr 
					oEditor.Caption = UI_ADVPROP_EDT_DLG_CAPTION_LOC
					oEditor.SetHelperText(ADVPROP_EDIT_HELPER_TXT_LOC)
					oEditor.Execute()
					cExpression = oEditor.Text
				endif 
				
			otherwise
			*case m.iEditMode = ADVPROP_EDITMODE_GETEXPR
				cExpression = THIS.event.GetExpression( m.cCurrentExpr , '', m.cPropName + ":")
		
			endcase
		
			replace PROPERTY_VALUE with m.cExpression in (this.tmpAlias)
				
			* update the List:
			with THIS.lstProperties
				for i = 1 to .ListCount
					if .ListItem(m.i) == m.cPropName
						do case
						case m.iEditMode = ADVPROP_EDITMODE_TEXT
							if len(alltrim(m.cExpression))>0
								.AddListItem( left(trim(m.cExpression),25)+"...",  m.i, 2 )
							else
								.AddListItem( "",  m.i, 2 )
							endif				
		
						case m.iEditMode = ADVPROP_EDITMODE_GETFILE
							.AddListItem( displaypath(trim(m.cExpression),25),  m.i, 2 )
		
						case m.iEditMode = ADVPROP_EDITMODE_BOOLEAN
							.AddListItem( iif(m.cExpression='1', ADVPROP_BOOLEAN_YES_LOC,  ADVPROP_BOOLEAN_NO_LOC ),  m.i, 2 )
		
						otherwise
							.AddListItem( trim(m.cExpression),  m.i, 2 )
		
						endcase
						exit
					endif
				endfor
		
			endwith
		
			select (m.cursel)
		endif
		THIS.RefreshEnabledState()
	ENDPROC

	PROCEDURE loadfromfrx
		*---------------------------------------------------------
		* OK, this is weird. This is required to ensure that
		* the listbox paints correctly:
		*---------------------------------------------------------
		wait "" timeout 0.1
		
		if not used(THIS.Tag)
			return .f.
		endif
		
		select (THIS.Tag)
		
		local i
		
		if empty( THIS.tmpAlias )
			THIS.tmpAlias = "T" + sys(2015)
		else
			if used(THIS.tmpAlias)
				use in (this.tmpAlias)
			endif
		endif
		
		*-------------------------------------------------
		* Kind of kludgey way to do a look-up 
		* from DataType (int) to DataType (localised text label)
		* See below...
		*-------------------------------------------------
		THIS.PropertyType[ADVPROP_EDITMODE_GETEXPR] = ADVPROP_EDITMODE_GETEXPR_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_TEXT]    = ADVPROP_EDITMODE_TEXT_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_STRING]  = ADVPROP_EDITMODE_STRING_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_GETFILE] = ADVPROP_EDITMODE_GETFILE_LOC
		THIS.PropertyType[ADVPROP_EDITMODE_BOOLEAN] = ADVPROP_EDITMODE_BOOLEAN_LOC
		
		*--------------------------------------------------
		* Initial list:
		*--------------------------------------------------
		if this.FrxCursor.IsLayoutControl( this.Event.OBJTYPE )
			select  HNDL_CLASS as PROPERTY_NAME, ;
					HNDL_LIB   as DEFAULT_VALUE, ;
					cast(HNDL_LIB as m) as PROPERTY_VALUE, ;
					EVENTTYPE  as DATA_TYPE, ;
					.F.        as CUSTOM, ;
					NATIVE	   as HIDDEN ;
				order by FLTR_ORDR, HNDL_CLASS ;
				from frxregistry ;
				where REC_TYPE = HANDLREG_PROPERTY ;
				  and OBJTYPE in (this.Event.OBJTYPE, -1, 55 ) ;
				  and OBJCODE in (this.Event.OBJCODE, -1 ) ;
				  into cursor (this.tmpAlias) readwrite
		else
			select  HNDL_CLASS as PROPERTY_NAME, ;
					HNDL_LIB   as DEFAULT_VALUE, ;
					cast(HNDL_LIB as m) as PROPERTY_VALUE, ;
					EVENTTYPE  as DATA_TYPE, ;
					.F.        as CUSTOM, ;
					NATIVE	   as HIDDEN ;
				order by FLTR_ORDR, HNDL_CLASS ;
				from frxregistry ;
				where REC_TYPE = HANDLREG_PROPERTY ;
				  and OBJTYPE in (this.Event.OBJTYPE, -1 ) ;
				  and OBJCODE in (this.Event.OBJCODE, -1 ) ;
				  into cursor (this.tmpAlias) readwrite
		endif
		
		*--------------------------------------------------
		* Assign current values from memberdata:
		*--------------------------------------------------
		select memberdata
		scan for TYPE = FRX_BLDR_MEMBERDATATYPE ;
		     and NAME = FRX_BLDR_NAMESPACE_ADVANCEDPROPS ;
		     and not deleted('memberdata')
		
			select (THIS.tmpAlias)
			locate for PROPERTY_NAME = trim(memberdata.EXECWHEN)
			if found()
				replace ;
					PROPERTY_VALUE with trim(memberdata.EXECUTE) ;
					in (this.tmpAlias)
			else
				insert into (this.tmpAlias) ( ;
					PROPERTY_NAME, ;
					DEFAULT_VALUE, ;
					PROPERTY_VALUE, ;
					DATA_TYPE, ;
					CUSTOM ) ;
			  	values ( ;
					trim(memberdata.EXECWHEN), ;
					'', ;
					trim(memberdata.EXECUTE), ;
					val(memberdata.DECLASS), ;
					.T. )
			endif	
			
			select memberdata     	
		endscan
		
		*--------------------------------------------------
		* Load List with values:
		*--------------------------------------------------
		with THIS.lstProperties
		
			.Clear()
			.ColumnCount = 3
			.ColumnWidths = "220,130,100"
			.ColumnLines = .F.
			
			select (THIS.tmpAlias)
			i = 0
			scan for not deleted() ;
				 and not HIDDEN
		
				i = m.i+1
				
				.AddListItem( trim(PROPERTY_NAME), m.i, 1 )  
				
				do case
				case DATA_TYPE = ADVPROP_EDITMODE_GETFILE
					.AddListItem( displaypath(trim(PROPERTY_VALUE),25),  m.i, 2 )
					
				case DATA_TYPE = ADVPROP_EDITMODE_TEXT
					if len(alltrim(PROPERTY_VALUE))>0
						.AddListItem( left(trim(PROPERTY_VALUE),25)+"...",  m.i, 2 )
					else
						.AddListItem( "",  m.i, 2 )
					endif				
							
				case DATA_TYPE = ADVPROP_EDITMODE_BOOLEAN
					.AddListItem( iif(trim(PROPERTY_VALUE)='1',  ADVPROP_BOOLEAN_YES_LOC,  ADVPROP_BOOLEAN_NO_LOC ),  m.i, 2 )
		
				otherwise
					.AddListItem( trim(PROPERTY_VALUE),  m.i, 2 )
					
				endcase
				if DATA_TYPE > 0
					.AddListItem( THIS.PropertyType[DATA_TYPE],    m.i, 3 )
				endif
		
			endscan
		
			select (THIS.Tag)	
			
		endwith
		*THIS.lstProperties.Refresh() 
		return
	ENDPROC

	PROCEDURE refreshenabledstate
		if THIS.lstProperties.ListCount = 0
			store .F. to ;
				THIS.cmdDelete.Enabled, ;
				THIS.cmdEdit.Enabled   
			return
		endif		
		
		if empty( THIS.lstProperties.Value )
			store .F. to ;
				THIS.cmdDelete.Enabled, ;
				THIS.cmdEdit.Enabled   
			return
		endif
			
		*--------------------------------------
		* Delete button is enabled for custom 
		* Edit button is enabled so long as there's 
		* something to edit:
		*--------------------------------------
		select (this.tmpAlias)
		locate for PROPERTY_NAME = THIS.lstProperties.Value
		if found()
			if CUSTOM
				*-----------------------------------------------
				* Custom properties can be removed from the list:
				*-----------------------------------------------
		*		THIS.cmdDelete.Enabled = not empty(alltrim(PROPERTY_VALUE))
				THIS.cmdDelete.Enabled = .T.
			else
				*-----------------------------------------------
				* Default properties can be reset to default, 
				* if they have been set to another value:
				*-----------------------------------------------
				THIS.cmdDelete.Enabled = !(alltrim(PROPERTY_VALUE) == alltrim(DEFAULT_VALUE))
			endif			
			THIS.cmdEdit.Enabled   = .T.
		else
			store .F. to ;
				THIS.cmdDelete.Enabled, ;
				THIS.cmdEdit.Enabled   
		endif	
		return		
		
		
	ENDPROC

	PROCEDURE savetofrx
		*--------------------------------------------------
		* Save values in tmpAlias to memberdata
		*--------------------------------------------------
		local cValue, cProp, cDefValue, iType, lCustom
		if not used(THIS.tmpAlias)
			return
		endif
		select (THIS.tmpAlias)
		scan 
			
			cProp   = trim(PROPERTY_NAME)
			cValue  = trim(PROPERTY_VALUE)
			cDefVal = trim(DEFAULT_VALUE)
			iType   = DATA_TYPE
			lCustom = CUSTOM
			
			if deleted(this.tmpAlias) or ;
			   (not CUSTOM and empty(cValue)) or ;
			   (not CUSTOM and m.cValue == m.cDefVal)
			
				*----------------------------------------
				* Remove from memberdata:
				*----------------------------------------
				select memberdata
				locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
					   and NAME = FRX_BLDR_NAMESPACE_ADVANCEDPROPS ;
					   and EXECWHEN = m.cProp ;
				       and not deleted("memberdata") 
				if found()
					delete
				endif
				
			else
				*----------------------------------------
				* update in memberdata
				*----------------------------------------
				select memberdata
				locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
					   and NAME = FRX_BLDR_NAMESPACE_ADVANCEDPROPS ;
					   and EXECWHEN = m.cProp ;
				       and not deleted("memberdata") 
				if found()
					*-----------------------------------
					* update the value
					*-----------------------------------
					replace EXECUTE with m.cValue
				else
					*-----------------------------------
					* insert the value
					*-----------------------------------
					insert into memberdata ;
						( TYPE, NAME, EXECWHEN, EXECUTE, DECLASS ) ;
						values ;
						( FRX_BLDR_MEMBERDATATYPE, FRX_BLDR_NAMESPACE_ADVANCEDPROPS, ;
						  m.cProp, m.cValue, trans(m.iType) )
				endif
		
			endif
			select (this.tmpAlias)
		endscan
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		THIS.Parent.AddAdvProp()
	ENDPROC

	PROCEDURE cmdAdd.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_ADD_LOC + "..."
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdDelete.Click
		THIS.Parent.DeleteAdvProp()
	ENDPROC

	PROCEDURE cmdDelete.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_CLEAR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdEdit.Click
		THIS.Parent.EditAdvProp()
	ENDPROC

	PROCEDURE cmdEdit.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_EDIT_LOC + "..."
		#ENDIF
		
	ENDPROC

	PROCEDURE lblName.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ADVPROP_NAME_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblType.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ADVPROP_TYPE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblValue.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ADVPROP_VALUE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lstProperties.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE lstProperties.DblClick
		THIS.Parent.EditAdvProp()
	ENDPROC

ENDDEFINE

DEFINE CLASS panelevaluatecontents AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstConditions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oFormatter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtHelperText" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: deletecondition
		*m: editcondition
		*m: previewscript
		*m: scriptcondition
		*m: updatepreview
		*p: checkedmemberdatacursor
	*</DefinedPropArrayMethod>

	checkedmemberdatacursor = .F.
	Height = 315
	Name = "panelevaluatecontents"
	Width = 413

	ADD OBJECT 'cmdAdd' AS cmd WITH ;
		Caption = "Add...", ;
		Left = 312, ;
		Name = "cmdAdd", ;
		TabIndex = 3, ;
		Top = 24, ;
		Width = 88, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdDelete' AS cmd WITH ;
		Caption = "Delete", ;
		Enabled = .F., ;
		Left = 312, ;
		Name = "cmdDelete", ;
		TabIndex = 5, ;
		Top = 80, ;
		Width = 88, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdEdit' AS cmd WITH ;
		Caption = "Edit...", ;
		Enabled = .F., ;
		Left = 312, ;
		Name = "cmdEdit", ;
		TabIndex = 4, ;
		Top = 52, ;
		Width = 88, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdScript' AS cmd WITH ;
		Caption = "Script...", ;
		Enabled = .F., ;
		Left = 312, ;
		Name = "cmdScript", ;
		TabIndex = 6, ;
		Top = 108, ;
		Width = 88, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntPreview' AS cnttextpreview WITH ;
		Height = 78, ;
		Left = 13, ;
		Name = "cntPreview", ;
		Top = 137, ;
		Width = 387, ;
		ZOrderSet = 8, ;
		shpBorder.Left = 0, ;
		shpBorder.Name = "shpBorder", ;
		shpBorder.Top = 6, ;
		shpBorder.Width = 386, ;
		canvas.hozLine.Name = "hozLine", ;
		canvas.Name = "canvas", ;
		canvas.Text.Name = "Text", ;
		canvas.vertLine.Name = "vertLine", ;
		canvas.Width = 372, ;
		lblSample.Name = "lblSample"
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'edtHelperText' AS edt WITH ;
		Anchor = 14, ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		DisabledBackColor = 255,255,255, ;
		ForeColor = 128,128,128, ;
		Height = 68, ;
		Left = 20, ;
		Name = "edtHelperText", ;
		ReadOnly = .T., ;
		TabStop = .F., ;
		Top = 224, ;
		Width = 372
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Conditions ", ;
		Left = 12, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 2, ;
		Top = 1, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lstConditions' AS lst WITH ;
		Height = 109, ;
		Left = 12, ;
		MoverBars = .T., ;
		Name = "lstConditions", ;
		TabIndex = 1, ;
		Top = 24, ;
		Width = 288, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="listbox" />

	ADD OBJECT 'oFormatter' AS frxformatutil WITH ;
		Height = 16, ;
		Left = 296, ;
		Name = "oFormatter", ;
		Top = 8, ;
		Width = 20
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="custom" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 300, ;
		Left = 4, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 404, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp2' AS shp WITH ;
		Anchor = 14, ;
		BackColor = 255,255,255, ;
		BorderColor = 192,192,192, ;
		Curvature = 2, ;
		Height = 81, ;
		Left = 13, ;
		Name = "Shp2", ;
		Style = 0, ;
		Top = 217, ;
		Width = 387
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE deletecondition
		local i, cConditionName, cursel
		cConditionName = THIS.lstConditions.Value
		cursel = select(0)
		
		if messagebox( strtran(DYNAMICS_DELETE_ARE_YOU_SURE_LOC,'{0}', m.cConditionName ), 4+32+256, DEFAULT_MBOX_TITLE_LOC ) ;
		      = 6 
		
			select memberdata
			delete for TYPE = FRX_BLDR_MEMBERDATATYPE ;
				   and NAME = FRX_BLDR_NAMESPACE_EVALUATECONTENTS ;
				   and EXECUTE = m.cConditionName
				   
			* remove from list:
			with THIS.lstConditions
				if .ListCount = 1
					.Clear()
				else
					for i = 1 to .ListCount
		*				if .ListItem(m.i) == m.cConditionName
						if .List(m.i) == m.cConditionName
							.RemoveItem(m.i)
							exit
						endif
					endfor
				endif
			endwith
					   	
			select (m.cursel)			   	
			THIS.RefreshEnabledState()
			THIS.UpdatePreview()
		endif
	ENDPROC

	PROCEDURE editcondition
		lparameter tlAdding
		
		if m.tlAdding
			local cConditionName
			cConditionName = ""
			cConditionName = inputbox( DYNAMICS_NEW_COND_PROMPT_LOC, DYNAMICS_NEW_COND_TITLE_LOC)
			if empty( m.cConditionName )
				return
			endif
			
			*------------------------
			* Does it already exist?
			*------------------------
			select memberdata
			locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
				   and NAME = FRX_BLDR_NAMESPACE_EVALUATECONTENTS ;
				   and upper(EXECUTE) = upper(m.cConditionName) ;
				   and not deleted()
			if found()
				=messagebox(DYNAMICS_COND_EXISTS_LOC, 64, DEFAULT_MBOX_TITLE_LOC)
				return
			endif
		
			*-------------------------
			* add to the list
			*-------------------------
			select memberdata
			insert into memberdata ;
				( TYPE, ;
				  NAME, ;
				  EXECUTE, ;
				  EXECWHEN, ;
				  PENRGB, ;
				  FILLRGB, ;
				  PENA, ;
				  FILLA, ;
				  FNAME, ;
				  FSIZE, ;
				  FSTYLE ) ;
			values ;
				( FRX_BLDR_MEMBERDATATYPE, ;
				  FRX_BLDR_NAMESPACE_EVALUATECONTENTS, ;
				  m.cConditionName, ;
				  ".F.", ;
				  iif( frx.PENRED=-1, "-1", trans(RGB(frx.PENRED,frx.PENGREEN,frx.PENBLUE))), ;
				  iif( frx.FILLRED=-1,"-1", trans(RGB(frx.FILLRED,frx.FILLGREEN,frx.FILLBLUE))), ;
				  "-1", ;
				  "-1", ;
				  frx.FONTFACE, ;
				  trans(frx.FONTSIZE), ;
				  trans(frx.FONTSTYLE) )
		
			with THIS.lstConditions
				i = .ListCount + 1
				.AddItem( m.cConditionName, m.i )
				.Value = m.cConditionName
			endwith
		endif
		*----------------------------------
		* Now edit the new condition
		*----------------------------------
		local oForm
		oForm = newobject("frxDynamicEditor","frxBuilder2.vcx")
		if not isnull( oForm )
			oForm.Execute( THIS.lstConditions, THIS.Event )
		endif
		
		THIS.Refreshenabledstate()
		THIS.UpdatePreview()
		
		return
	ENDPROC

	PROCEDURE ensurememberdatastructure
		*---------------------------------------------------------
		* Ensure memberdata has the required additional columns
		*---------------------------------------------------------
		if not this.checkedMemberdataCursor 
			local cAddColumns, iAddCount
			cAddColumns = ""
			iAddCount = 0
		
			if type("memberdata.PENRGB")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN PENRGB M"
				iAddCount = m.iAddCount+1
			endif	
			if type("memberdata.FILLRGB")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN FILLRGB M"
				iAddCount = m.iAddCount+1
			endif	
			if type("memberdata.PENA")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN PENA M"
				iAddCount = m.iAddCount+1
			endif	
			if type("memberdata.FILLA")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN FILLA M"
				iAddCount = m.iAddCount+1
			endif	
			if type("memberdata.FNAME")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN FNAME M"
				iAddCount = m.iAddCount+1
			endif	
			if type("memberdata.FSIZE")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN FSIZE M"
				iAddCount = m.iAddCount+1
			endif	
			if type("memberdata.FSTYLE")="U"
				m.cAddColumns = m.cAddColumns + " ADD COLUMN FSTYLE M"
				iAddCount = m.iAddCount+1
			endif	
			if m.iAddCount > 0
				*----------------------------------------------
				* Check in case too many columns:
				*----------------------------------------------
				if fcount("memberdata") > (254 - m.iAddCount)
					* There is no room in the structure:
					return .F.
				else
					*----------------------------------------------
					* Update metadata structure:
					*----------------------------------------------
					alter table memberdata &cAddColumns
				endif
			endif
		
			this.checkedMemberdataCursor = .T.
		
		endif
		return .T.
		
		
	ENDPROC

	PROCEDURE loadfromfrx
		*---------------------------------------------------------
		* OK, this is weird. This is required to ensure that
		* the listbox paints correctly:
		*---------------------------------------------------------
		wait "" timeout 0.1
		
		if not used(THIS.Tag)
			return .F.
		endif
		
		select (THIS.Tag)
		
		if THIS.event.Protected
			THIS.cmdScript.Visible = .F.
			THIS.edtHelperText.Value = DYNAMICS_HELPER_TEXT_LOC 
		else
			THIS.edtHelperText.Value = DYNAMICS_HELPER_TEXT_LOC + " " ;
									 + DYNAMICS_HELPER_TEXT2_LOC ;
									 + DYNAMICS_HELPER_TEXT3_LOC 
		endif 
		
		if not THIS.EnsureMemberDataStructure()
			*---------------------------------------------------------
			* We can't make room for our data in the memberdata:
			*---------------------------------------------------------
			=messagebox( DYNAMICS_STORAGE_ERROR_LOC, 16, DEFAULT_MBOX_TITLE_LOC ) ;
			return .F.
		endif
		
		local i, cInitialValue
		
		with THIS.lstConditions
			.Clear
			.ColumnCount = 1
			i = 1
			.AddItem(UI_DYNAMICS_DEFAULT_LOC)
			
			select memberdata
		
			scan for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			     and NAME = FRX_BLDR_NAMESPACE_EVALUATECONTENTS ;
			     and not deleted("memberdata")
		
				i = m.i+1
				.AddItem( trim(EXECUTE), m.i )
		
			endscan
		endwith
		
		THIS.lstConditions.Value = UI_DYNAMICS_DEFAULT_LOC
		THIS.RefreshEnabledState()
		THIS.UpdatePreview()
		
		return
	ENDPROC

	PROCEDURE previewscript
		local lcText
		lcText = THIS.FrxCursor.GenerateEvaluateContentsScript()
		if not empty( m.lcText )
		
			local oForm
			oForm = newobject("frxMemoEditForm","frxBuilder.vcx")
			oForm.Caption = UI_SCRIPTPREVIEW_TITLE_LOC
			oForm.setHelperText(SCRIPTPREVIEW_HELPERTEXT_LOC)
			oForm.FixedWidthFont = .T.
			oForm.Text = m.lcText
			oForm.cmdOK.Enabled = .F.
			oForm.cmdCancel.Caption = UI_CMD_CLOSE_LOC
			oForm.cmdModiComm.Visible = .T.
			oForm.Execute()
		
		endif
	ENDPROC

	PROCEDURE refreshenabledstate
		local i, llEnable
		do case
		case empty( THIS.lstConditions.Value ) or ;
			 THIS.lstConditions.ListCount = 0
			 
			store .F. to ;
				THIS.cmdEdit.Enabled, ;
				THIS.cmdDelete.Enabled
			
		case THIS.lstConditions.Value = UI_DYNAMICS_DEFAULT_LOC
			store .F. to ;
				THIS.cmdEdit.Enabled, ;
				THIS.cmdDelete.Enabled
		
		otherwise
			store .T. to ;
				THIS.cmdEdit.Enabled, ;
				THIS.cmdDelete.Enabled
		
		endcase
		*------------------------------------
		* Only generate script if there is 
		* at least one custom condition:
		*------------------------------------
		THIS.cmdScript.Enabled = (THIS.lstConditions.ListCount > 1)
		
	ENDPROC

	PROCEDURE savetofrx
		*-----------------------------------------------------------------
		* Write out advanced properties in new order:
		*
		* .ListItem(1-n) will read the condition names in original order
		* .List(1-n)     will read the condition names in their new order
		*
		* the default formatting will not be used.
		*-----------------------------------------------------------------
		local i, cConditionName, oRec
		
		select memberdata
		
		for i = 1 to THIS.lstConditions.ListCount
			cConditionName = THIS.lstConditions.List(m.i)
			
			locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			       and NAME = FRX_BLDR_NAMESPACE_EVALUATECONTENTS ;
			       and not deleted("memberdata") ;
			       and upper(alltrim(EXECUTE)) = upper(m.cConditionName)
			       
			if found()
				scatter memo name oRec
				delete in memberdata
				insert into memberdata from name oRec
			endif
			
		endfor
	ENDPROC

	PROCEDURE scriptcondition
	ENDPROC

	PROCEDURE updatepreview
		local cConditionName, cPreviewText
		cConditionName = trim(this.lstConditions.Value)
		cPreviewText = ""
		
		if m.cConditionName = UI_DYNAMICS_DEFAULT_LOC	
			*-------------------------------------------------
			* Use default:
			*-------------------------------------------------
			THIS.oFormatter.SetFont( frx.FONTFACE, frx.FONTSIZE, frx.FONTSTYLE, frx.DOUBLE, frx.RESOID )
			THIS.oFormatter.SetForeColor( frx.PENRED, frx.PENGREEN, frx.PENBLUE )
			THIS.oFormatter.SetBackColor( frx.FILLRED, frx.FILLGREEN, frx.FILLBLUE )
			THIS.oFormatter.Transparency = iif(bittest(frx.MODE,0), 2, 1 )
		
			*-----------------------------------------------------------------
			* Update the preview text caption:
			*-----------------------------------------------------------------
			local cPreviewText, cExpr
			cPreviewText = ""
			cExpr        = frx.EXPR
			
			set datasession to (THIS.event.defaultSessionId)
			if type( m.cExpr ) = "U"
				cPreviewText = TEXTFORMAT_PREVIEW_DEFAULT_TEXT_LOC
			else
				try
					cPreviewText = left(transform( eval( m.cExpr ) ),254)
				catch
					cPreviewText = left( m.cExpr,254)
				endtry			
			endif
			set datasession to (THIS.event.frxSessionId)
		
			
		else
			*-------------------------------------------------
			* Synchronise the memberdata cursor with the list
			*-------------------------------------------------
			select memberdata
			locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
				   and NAME = FRX_BLDR_NAMESPACE_EVALUATECONTENTS ;
				   and upper(EXECUTE) = upper(m.cConditionName) ;
				   and not deleted()
		
			if found()
		
				THIS.oFormatter.SetFont( FNAME, val(FSIZE), val(FSTYLE), frx.DOUBLE, frx.RESOID )
				THIS.oFormatter.setForeColor( val(PENRGB) )
				THIS.oFormatter.setBackColor( val(FILLRGB) )
				do case
				case inlist(val(PENA), -1, 255 ) and val(FILLA) = 255
					THIS.oFormatter.Transparency = 1
					
				case inlist(val(PENA), -1, 255 ) and val(FILLA) = 0
					THIS.oFormatter.Transparency = 2
						
				otherwise
					THIS.oFormatter.Transparency = 2
					THIS.oFormatter.AlphaPen  = val(PENA)
					THIS.oFormatter.AlphaFill = val(FILLA)
					
				endcase
		
				*-----------------------------------------------------------------
				* Update the preview text caption:
				*-----------------------------------------------------------------
				local cPreviewText, cExpr, cOverride
				cPreviewText = ""
				cExpr        = frx.EXPR
				cOverride    = trim(memberdata.SCRIPT)
				
				set datasession to (THIS.event.defaultSessionId)
		
				if not empty( m.cOverride )
					if type( m.cOverride ) = "U"
						cPreviewText = m.cOverride  && use the literal?
					else
						cPreviewText = left(transform( eval( m.cOverride ) ),254)
					endif
				else
					if type( m.cExpr ) = "U"
						cPreviewText = TEXTFORMAT_PREVIEW_DEFAULT_TEXT_LOC
					else
						cPreviewText = left(transform( eval( m.cExpr ) ),254)
					endif
				endif		
				set datasession to (THIS.event.frxSessionId)
		
			endif
		endif
		
		THIS.cntPreview.Caption = evl(m.cPreviewText,TEXTFORMAT_PREVIEW_DEFAULT_TEXT_LOC)
		THIS.cntPreview.Refresh( THIS.oFormatter )
		
	ENDPROC

	PROCEDURE cmdAdd.Click
		THIS.Parent.EditCondition(.T.)
		
	ENDPROC

	PROCEDURE cmdAdd.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_ADD_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdDelete.Click
		THIS.Parent.DeleteCondition()
	ENDPROC

	PROCEDURE cmdDelete.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_REMOVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdEdit.Click
		THIS.Parent.EditCondition(.F.)
	ENDPROC

	PROCEDURE cmdEdit.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_EDIT_LOC + "..."
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdScript.Click
		THIS.Parent.PreviewScript()
	ENDPROC

	PROCEDURE cmdScript.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_SCRIPT_LOC + "..."
		#ENDIF
		
	ENDPROC

	PROCEDURE edtHelperText.Init
		THIS.Value = DYNAMICS_HELPER_TEXT_LOC 
		* But see the LoadFromFrx() method also
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DYNAMICS_CONDITIONS_LOC	
		#ENDIF
		
		
	ENDPROC

	PROCEDURE lstConditions.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE lstConditions.DblClick
		THIS.Parent.EditCondition(.F.)
	ENDPROC

	PROCEDURE lstConditions.InteractiveChange
		THIS.Parent.UpdatePreview()
	ENDPROC

ENDDEFINE

DEFINE CLASS panelmultiprop AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Grid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid.colEnable.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid.colEnable.Check1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid.colProperty.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid.colProperty.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid.colValue.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid.colValue.txt" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid.colValue.cbo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lbl1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: loadfromfrx
		*m: loadrow
		*m: savetofrx
		*m: unloadrow
		*p: event
		*p: frxcursor
		*p: oprops
		*p: propertycursor
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	event = .NULL.
	frxcursor = .NULL.
	Height = 308
	Name = "panelmultiprop"
	oprops = .NULL.
	propertycursor = 
	Tag = "frx"
	Width = 444

	ADD OBJECT 'Grid' AS grid WITH ;
		Anchor = 15, ;
		ColumnCount = 3, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 24, ;
		Height = 264, ;
		HighlightRow = .F., ;
		HighlightRowLineWidth = 0, ;
		Left = 4, ;
		Name = "Grid", ;
		Panel = 1, ;
		RecordMark = .F., ;
		RowHeight = 24, ;
		ScrollBars = 2, ;
		SplitBar = .F., ;
		Top = 28, ;
		Width = 432, ;
		Column1.Alignment = 2, ;
		Column1.BackColor = 235,235,235, ;
		Column1.FontName = "Tahoma", ;
		Column1.FontSize = 8, ;
		Column1.Name = "colEnable", ;
		Column1.SelectOnEntry = .F., ;
		Column1.Sparse = .F., ;
		Column1.Width = 25, ;
		Column2.BackColor = 235,235,235, ;
		Column2.FontName = "Tahoma", ;
		Column2.FontSize = 8, ;
		Column2.Name = "colProperty", ;
		Column2.ReadOnly = .T., ;
		Column2.SelectOnEntry = .F., ;
		Column2.Width = 237, ;
		Column3.BackColor = 235,235,235, ;
		Column3.FontName = "Tahoma", ;
		Column3.FontSize = 8, ;
		Column3.Name = "colValue", ;
		Column3.Width = 144
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'Grid.colEnable.Check1' AS checkbox WITH ;
		Alignment = 0, ;
		BackColor = 235,235,235, ;
		Caption = "", ;
		Centered = .T., ;
		Height = 17, ;
		Left = 3, ;
		Name = "Check1", ;
		SpecialEffect = 1, ;
		Themes = .F., ;
		Top = 35, ;
		Width = 60
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Grid.colEnable.Header1' AS header WITH ;
		Caption = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grid.colProperty.Header1' AS header WITH ;
		Caption = " Property", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grid.colProperty.Text1' AS textbox WITH ;
		BackColor = 235,235,235, ;
		BorderStyle = 0, ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 1, ;
		Name = "Text1", ;
		ReadOnly = .T.
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Grid.colValue.cbo' AS combobox WITH ;
		BackColor = 235,235,235, ;
		BorderStyle = 0, ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		Left = 27, ;
		Margin = 1, ;
		Name = "cbo", ;
		SpecialEffect = 1, ;
		Style = 2, ;
		Top = 39, ;
		Width = 100
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'Grid.colValue.Header1' AS header WITH ;
		Caption = " Value", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Grid.colValue.txt' AS textbox WITH ;
		BackColor = 235,235,235, ;
		BorderStyle = 0, ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 1, ;
		Name = "txt"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'lbl1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Check which properties should be applied to the selected elements:", ;
		Height = 17, ;
		Left = 7, ;
		Name = "lbl1", ;
		Top = 5, ;
		Width = 374
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE loadfromfrx
		*-----------------------------------
		* Create a cursor to drive the property list:
		*-----------------------------------
		local cAlias
		cAlias = "PD"+sys(2015)
		
		create cursor (m.cAlias) ( ;
			PROP_ENABLE  l, ;
			PROP_NAME	 c(50), ;
			PROP_VALUE   c(50), ;
			PROP_TYPE	 i, ;
			PROP_ID      i )
		
		*-----------------------------------
		* Pull out the registered properties:
		*-----------------------------------
		select * ;
			from frxregistry ;
			into cursor props ;
			where REC_TYPE = HANDLREG_MULTIPROP and not deleted() ;
			order by FLTR_ORDR
		
		if _tally > 0
			*-----------------------------------
			* instantiate each class:
			*-----------------------------------
			THIS.oProps = newobject("Collection")
			local i, oProp
			i = 0
			scan
				oProp = THIS.Event.NewRegisteredObject( HNDL_CLASS, HNDL_LIB )
				if not isnull( m.oProp )
				
					if THIS.event.Protected and not oProp.VisibleWhenProtected
						*--------------------------------------
						* We are PROTECTED and this property is
						* not visible when PROTECTED
						*--------------------------------------
					else
						oProp.PropertyCursor = m.cAlias
						THIS.oProps.Add( m.oProp )
						i = m.i+1
						insert into (m.cAlias) values ( ;
							.F., ;
							THIS.oProps.Item(m.i).PropertyName, ;
							THIS.oProps.Item(m.i).GetDefaultCaption(), ;
							THIS.oProps.Item(m.i).ValueType, ;
							m.i )
					endif
					oProp = .NULL.
				endif
			endscan
			use in props
		endif
		
		*-----------------------------------
		* decorate the grid:
		*-----------------------------------
		with THIS.Grid
			.BackColor = THISFORM.BackColor
			.recordSource = m.cAlias
			.HeaderHeight = 22
			.RowHeight    = 22
		
			.colEnable.Header1.Caption = ""
			.colEnable.BackColor       = THISFORM.BackColor
			.colEnable.ControlSource   = m.cAlias + ".PROP_ENABLE"
		
			.colProperty.ControlSource = m.cAlias + ".PROP_NAME"
			.colProperty.BackColor     = THISFORM.BackColor
		
		*	.colValue.ControlSource         = m.cAlias+".PROP_VALUE"
			.colValue.DynamicCurrentControl = "iif("+m.cAlias+".PROP_TYPE=6,'cbo','txt')"
			.colValue.BackColor 			= rgb(255,255,255)
		*	.colValue.DynamicBackColor      = "iif("+m.cAlias+".PROP_ENABLE,rgb(255,255,255),THISFORM.BackColor)"
			.colValue.DynamicFontBold       = m.cAlias+".PROP_ENABLE"
		endwith
		
		THIS.PropertyCursor = m.cAlias
		go top in (m.cAlias)
		THIS.LoadRow()
		
	ENDPROC

	PROCEDURE loadrow
		select (THIS.PropertyCursor)
		do case
		case PROP_TYPE = ADVPROP_EDITMODE_TEXT
			*-----------------------------------------
			* Put the table value in the txt box
			*-----------------------------------------
			THIS.Grid.colValue.txt.Value = PROP_VALUE
		
		case PROP_TYPE = ADVPROP_EDITMODE_COMBOLIST
			local i, oCombo, oProp
			oProp  = THIS.oProps.Item(PROP_ID)
			oCombo = THIS.Grid.colValue.cbo
		
			*--------------------------
			* Configure the control:
			*--------------------------
			for i = 1 to oProp.ValueCount
				oCombo.Additem( oProp.GetDisplayValue(m.i) )
			endfor
			*--------------------------
			* Load the value:
			*--------------------------
			oCombo.Value = PROP_VALUE
		
		endcase
		
	ENDPROC

	PROCEDURE savetofrx
		local oProp, curRec, cNewValue
		
		*-----------------------------------------------------
		* Create the objects cursor - may be needed
		*-----------------------------------------------------
		THIS.frxCursor.CreateObjectCursor()
		
		*-----------------------------------------
		* Process only the enabled properties:
		*-----------------------------------------
		select (THIS.PropertyCursor)
		scan for PROP_ENABLE
			oProp = THIS.oProps.Item( PROP_ID )
			cNewValue = PROP_VALUE
		
			select (this.tag)
			local curRec
			curRec = recno()
			*-------------------------------------------
			* Update values in selected layout elements
			*-------------------------------------------
			scan for CURPOS and recno() > 1
				*-------------------------------------------
				* If this property is appropriate for the element:
				*-------------------------------------------
				if oProp.AppliesTo( OBJTYPE, OBJCODE )
					oProp.SaveToFrx( m.cNewValue )
				endif
		
				select (this.Tag)
			endscan
		
			select (THIS.PropertyCursor)
		endscan
		
		return .T.
		
	ENDPROC

	PROCEDURE unloadrow
		select (THIS.PropertyCursor)
		do case
		case PROP_TYPE = ADVPROP_EDITMODE_TEXT
			*-----------------------------------------
			* Save the Textbox value in the table:
			*-----------------------------------------
			replace PROP_VALUE with THIS.Grid.colValue.txt.Value 
		
		case PROP_TYPE = ADVPROP_EDITMODE_COMBOLIST
			*--------------------------
			* Save the value:
			*--------------------------
			replace PROP_VALUE with THIS.Grid.colValue.cbo.Value
		
			*--------------------------
			* De-initialise the control:
			*--------------------------
			THIS.Grid.colValue.cbo.Clear()
		
		endcase
		
	ENDPROC

	PROCEDURE Grid.AfterRowColChange
		LPARAMETERS nColIndex
		if inlist(THIS.RowColChange,1,3)
			THIS.Parent.LoadRow()
		endif
		
	ENDPROC

	PROCEDURE Grid.BeforeRowColChange
		LPARAMETERS nColIndex
		if inlist(THIS.RowColChange,1,3)
			THIS.Parent.UnLoadRow()
		endif
		
	ENDPROC

	PROCEDURE Grid.colEnable.Check1.Click
		THIS.Parent.Parent.colValue.Refresh()
		
	ENDPROC

	PROCEDURE Grid.colProperty.Header1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTIPROPS_PROPERTY_HEADER_LOC	
		#ENDIF
		
		
	ENDPROC

	PROCEDURE Grid.colProperty.Resize
		THIS.Parent.colValue.Width = THIS.Parent.Width - THIS.Width - THIS.Parent.colEnable.Width - sysmetric(5) - 8
	ENDPROC

	PROCEDURE Grid.colValue.cbo.InteractiveChange
		THIS.Parent.Parent.colEnable.check1.Value = .T.
		THIS.Parent.Parent.colEnable.Refresh()
	ENDPROC

	PROCEDURE Grid.colValue.Header1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTIPROPS_VALUE_HEADER_LOC	
		#ENDIF
		
		
	ENDPROC

	PROCEDURE Grid.colValue.txt.InteractiveChange
		THIS.Parent.Parent.colEnable.check1.Value = .T.
		THIS.Parent.Parent.colEnable.Refresh()
	ENDPROC

	PROCEDURE lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTIPROPS_TITLE_LOC	
		#ENDIF
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelmultiprotection AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkApplyProtection" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="panelProtection" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 256
	Name = "panelmultiprotection"
	Width = 379

	ADD OBJECT 'chkApplyProtection' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Apply these protection settings to the selected objects:", ;
		Height = 15, ;
		Left = 12, ;
		Name = "chkApplyProtection", ;
		TabIndex = 1, ;
		Top = 19, ;
		Width = 285, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'panelProtection' AS panelobjectprotection WITH ;
		Left = 34, ;
		Name = "panelProtection", ;
		TabIndex = 2, ;
		Top = 39, ;
		Width = 324, ;
		ZOrderSet = 3, ;
		Shp1.Left = 0, ;
		Shp1.Name = "Shp1", ;
		Shp1.Top = 7, ;
		Shp1.Width = 320, ;
		CHKOBJECTLOCK.Alignment = 0, ;
		CHKOBJECTLOCK.Name = "CHKOBJECTLOCK", ;
		CHKOBJECTNOSELECT.Alignment = 0, ;
		CHKOBJECTNOSELECT.Name = "CHKOBJECTNOSELECT", ;
		CHKOBJECTNODELETE.Alignment = 0, ;
		CHKOBJECTNODELETE.Name = "CHKOBJECTNODELETE", ;
		CHKOBJECTHIDDEN.Alignment = 0, ;
		CHKOBJECTHIDDEN.Name = "CHKOBJECTHIDDEN", ;
		CHKOBJECTNOEDIT.Alignment = 0, ;
		CHKOBJECTNOEDIT.Name = "CHKOBJECTNOEDIT", ;
		LBL1.Name = "LBL1", ;
		LBL2.Name = "LBL2"
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />
	
	PROCEDURE loadfromfrx
		*--------------------------------------------------------
		* Because we are re-using some panels from other dialogs, 
		* we need to fool them into thinking that they have their 
		* own frx cursor. Currently, the cursor is called "multibuff" 
		* which isn't very immune from possible interference.
		*--------------------------------------------------------
		
		select * from frx where .F. into cursor multibuff readwrite
		select multibuff
		append blank
		
		THIS.panelProtection.Tag       = "multibuff"
		THIS.panelProtection.FrxCursor = THIS.frxCursor
		THIS.panelProtection.event     = THIS.event
		THIS.panelProtection.Enabled   = .F.
		
		*-------------------------------------------------------------
		* Fix for SP1: The protection flags are not available in protected mode:
		*-------------------------------------------------------------
		THIS.chkApplyProtection.Enabled = not THIS.event.protected
		
	ENDPROC

	PROCEDURE savetofrx
		if this.chkApplyProtection.Value
			*-----------------------------------------------------
			* This will save to the multibuff cursor:
			*-----------------------------------------------------
			if not THIS.panelProtection.SaveToFrx()
				wait clear
				return .F.
			endif
		
			*-----------------------------------------------------
			* Now apply the protection flags to all selected objects:
			*-----------------------------------------------------
			select frx
			local curRec
			curRec = recno()
			scan for CURPOS and recno() > 1
				if OBJTYPE <> FRX_OBJTYP_GROUP
					replace ORDER with multibuff.ORDER
				endif
			endscan	
			THIS.frxCursor.goRec(m.curRec,"frx")
		endif 
		
		*-------------------------------------------------------------
		* Clean up and exit:
		*-------------------------------------------------------------
		use in multibuff
		
		return .T.
	ENDPROC

	PROCEDURE chkApplyProtection.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTISEL_APPLY_PROTECTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkApplyProtection.InteractiveChange
		THIS.Parent.PanelProtection.Enabled = THIS.Value
	ENDPROC

ENDDEFINE

DEFINE CLASS panelmultirotate AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkApplyRotate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Panelrotate" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 208
	Name = "panelmultirotate"
	Width = 287

	ADD OBJECT 'chkApplyRotate' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Apply rotation to the selected objects upon saving:", ;
		Left = 4, ;
		Name = "chkApplyRotate", ;
		Top = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Panelrotate' AS panelrotate WITH ;
		Height = 166, ;
		Left = 24, ;
		Name = "Panelrotate", ;
		Top = 32, ;
		Width = 176, ;
		Shp1.Name = "Shp1", ;
		lblObjectRotation.Name = "lblObjectRotation", ;
		RotatePreview.horizontalGuide.Name = "horizontalGuide", ;
		RotatePreview.Label.Name = "Label", ;
		RotatePreview.Name = "RotatePreview", ;
		RotatePreview.ShadowLabel.Name = "ShadowLabel", ;
		RotatePreview.touchPad.Name = "touchPad", ;
		RotatePreview.verticalGuide.Name = "verticalGuide", ;
		spnAngle.Name = "spnAngle", ;
		lblAngle.Name = "lblAngle"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE loadfromfrx
		THIS.chkApplyRotate.Value = .F.
		THIS.panelRotate.Enabled = .F.
	ENDPROC

	PROCEDURE savetofrx
		if THIS.chkApplyRotate.Value = .T.
			*-----------------------------------------
			* Must apply this to all selected records
			*-----------------------------------------
			select frx
			curRec = recno()
			scan for CURPOS and recno()>1
				if OBJTYPE = FRX_OBJTYP_GROUP
					*----------------------------------
					* Ignore aggregated element groups:
					*----------------------------------
					loop
				endif
				THIS.FrxCursor.UnpackMemberData()
				THIS.panelRotate.SaveToFrx()
				if THIS.FrxCursor.PackupMemberData()
					if used("memberdata")
						use in memberdata
					endif
				endif
				
			endscan
			THIS.Event.frxCursor.goRec(m.curRec,"frx")
		endif	
		   
		
			 
	ENDPROC

	PROCEDURE chkApplyRotate.Click
		THIS.Parent.PanelRotate.Enabled = THIS.Value
	ENDPROC

ENDDEFINE

DEFINE CLASS panelrotate AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblObjectRotation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnAngle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="RotatePreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAngle" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 166
	Name = "panelrotate"
	Width = 213

	ADD OBJECT 'lblAngle' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Angle:", ;
		Left = 16, ;
		Name = "lblAngle", ;
		Top = 130, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblObjectRotation' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Object Rotation ", ;
		Left = 13, ;
		Name = "lblObjectRotation", ;
		Style = 3, ;
		TabIndex = 2, ;
		Top = 1, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'RotatePreview' AS cntrotatepreview WITH ;
		Enabled = .T., ;
		Height = 105, ;
		Left = 16, ;
		Name = "RotatePreview", ;
		Top = 20, ;
		Width = 117, ;
		verticalGuide.Name = "verticalGuide", ;
		horizontalGuide.Name = "horizontalGuide", ;
		ShadowLabel.Name = "ShadowLabel", ;
		Label.Name = "Label", ;
		touchPad.Name = "touchPad"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 152, ;
		Left = 5, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 139, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'spnAngle' AS spn WITH ;
		Height = 21, ;
		Increment = 1.00, ;
		InputMask = "9999", ;
		KeyboardHighValue = 360, ;
		KeyboardLowValue = 0, ;
		Left = 68, ;
		Name = "spnAngle", ;
		SpinnerHighValue = 361.00, ;
		SpinnerLowValue = -1.00, ;
		Top = 128, ;
		Width = 65, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />
	
	PROCEDURE enabled_assign
		lparameter lEnabled
		THIS.Enabled = m.lEnabled
		store m.lEnabled to ;
			THIS.lblAngle.Enabled, ;
			THIS.spnAngle.Enabled, ;
			THIS.lblObjectRotation.Enabled, ;
			THIS.RotatePreview.Enabled
		
	ENDPROC

	PROCEDURE loadfromfrx
		local cursel
		cursel = select(0)
		if not used("memberdata")
			return
		endif
		select memberdata
		locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			   and NAME = FRX_BLDR_NAMESPACE_ROTATE
		if found() and not empty(EXECUTE)
			THIS.spnAngle.Value = int(val(alltrim(EXECUTE)))
		else
			THIS.spnAngle.Value = 0
		endif	
		THIS.RotatePreview.SetAngle( THIS.spnAngle.Value )
		select (m.cursel)
		
	ENDPROC

	PROCEDURE savetofrx
		local cursel
		cursel = select(0)
		if not used("memberdata")
			return
		endif
		select memberdata
		locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			   and NAME = FRX_BLDR_NAMESPACE_ROTATE
		
		if inlist( THIS.spnAngle.Value, 0, 360 )
			if found()
				*-----------------------------------------------
				* Remove the default value
				*-----------------------------------------------
				delete in memberdata
			else
				*-----------------------------------------------
				* It's not there, so do nothing
				*-----------------------------------------------
			endif
		else
			if found()
				replace EXECUTE with alltrim(str(int(THIS.spnAngle.Value))) 
			else
				insert into memberdata ;
					( TYPE, NAME, EXECUTE ) ;
				values ;
					( FRX_BLDR_MEMBERDATATYPE, ;
					  FRX_BLDR_NAMESPACE_ROTATE, ;
					  alltrim(str(int(THIS.spnAngle.Value))) )
			endif
		endif	
		select (m.cursel)
	ENDPROC

	PROCEDURE lblObjectRotation.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJECT_ROTATION_LOC	
		#ENDIF
		
		
	ENDPROC

	PROCEDURE RotatePreview.setangle
		lparameter tiAngle
		dodefault(m.tiAngle)
		try
			THIS.Parent.spnAngle.Value = m.tiAngle
		catch
		endtry
	ENDPROC

	PROCEDURE spnAngle.action
		THIS.Parent.RotatePreview.SetAngle(int(THIS.Value))
	ENDPROC

	PROCEDURE spnAngle.InteractiveChange
		if THIS.Value=361
			THIS.Value=1
		endif
		if THIS.Value=-1
			THIS.Value = 359
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS tabadjustobjectsize AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Paneladjustobjectsize1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 310
	Name = "tabadjustobjectsize"
	Width = 475

	ADD OBJECT 'Paneladjustobjectsize1' AS paneladjustobjectsize WITH ;
		Left = 4, ;
		Name = "Paneladjustobjectsize1", ;
		Top = 4, ;
		Shp1.Name = "Shp1", ;
		lstConditions.Name = "lstConditions", ;
		cmdAdd.Name = "cmdAdd", ;
		cmdEdit.Name = "cmdEdit", ;
		cmdDelete.Name = "cmdDelete", ;
		cmdScript.Name = "cmdScript", ;
		Lbl2.Name = "Lbl2", ;
		Shp2.Name = "Shp2", ;
		edtHelperText.Name = "edtHelperText", ;
		LABEL1.Name = "LABEL1"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_EVALUATECONTENTS_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tabbandadvanced AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Paneladvancedprops1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Caption = "Advanced"
	Height = 353
	Name = "tabbandadvanced"
	Width = 400

	ADD OBJECT 'Paneladvancedprops1' AS paneladvancedprops WITH ;
		Height = 148, ;
		Left = 4, ;
		Name = "Paneladvancedprops1", ;
		Top = 8, ;
		Width = 388, ;
		LSTPROPERTIES.Height = 88, ;
		LSTPROPERTIES.Left = 0, ;
		LSTPROPERTIES.Name = "LSTPROPERTIES", ;
		LSTPROPERTIES.Top = 20, ;
		LSTPROPERTIES.Width = 380, ;
		LBLNAME.Left = 2, ;
		LBLNAME.Name = "LBLNAME", ;
		LBLVALUE.Left = 217, ;
		LBLVALUE.Name = "LBLVALUE", ;
		LBLVALUE.Top = 4, ;
		LBLTYPE.Name = "LBLTYPE", ;
		LBLTYPE.Visible = .F., ;
		cmdAdd.Left = 0, ;
		cmdAdd.Name = "cmdAdd", ;
		cmdAdd.Top = 116, ;
		CMDDELETE.Left = 192, ;
		CMDDELETE.Name = "CMDDELETE", ;
		CMDDELETE.Top = 116, ;
		CMDEDIT.Left = 96, ;
		CMDEDIT.Name = "CMDEDIT", ;
		CMDEDIT.Top = 116
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_ADVANCED_LOC	
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tabdocprops AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Paneldocumentprops1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Caption = "Document Properties"
	Height = 224
	Name = "tabdocprops"
	Width = 491

	ADD OBJECT 'Paneldocumentprops1' AS paneladvancedprops WITH ;
		Height = 205, ;
		Left = 4, ;
		Name = "Paneldocumentprops1", ;
		Top = 3, ;
		Width = 468, ;
		lstProperties.Height = 144, ;
		lstProperties.Left = 0, ;
		lstProperties.Name = "lstProperties", ;
		lstProperties.Top = 21, ;
		lstProperties.Width = 452, ;
		lblName.Name = "lblName", ;
		lblValue.Left = 214, ;
		lblValue.Name = "lblValue", ;
		lblValue.Top = 4, ;
		lblType.Name = "lblType", ;
		cmdAdd.Left = 96, ;
		cmdAdd.Name = "cmdAdd", ;
		cmdAdd.Top = 169, ;
		cmdDelete.Left = 192, ;
		cmdDelete.Name = "cmdDelete", ;
		cmdDelete.Top = 169, ;
		cmdEdit.Left = 0, ;
		cmdEdit.Name = "cmdEdit", ;
		cmdEdit.Top = 169
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_DOCUMENT_PROPERTIES_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tabevaluatecontents AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Paneldynamicformat1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 311
	Name = "tabevaluatecontents"
	Width = 463

	ADD OBJECT 'Paneldynamicformat1' AS panelevaluatecontents WITH ;
		Left = 4, ;
		Name = "Paneldynamicformat1", ;
		Top = 4, ;
		Shp1.Name = "Shp1", ;
		lstConditions.Name = "lstConditions", ;
		cmdAdd.Name = "cmdAdd", ;
		cmdEdit.Name = "cmdEdit", ;
		cmdDelete.Name = "cmdDelete", ;
		cmdScript.Name = "cmdScript", ;
		Lbl2.Name = "Lbl2", ;
		oFormatter.Name = "oFormatter", ;
		cntPreview.canvas.hozLine.Name = "hozLine", ;
		cntPreview.canvas.Name = "canvas", ;
		cntPreview.canvas.Text.Name = "Text", ;
		cntPreview.canvas.vertLine.Name = "vertLine", ;
		cntPreview.lblSample.Name = "lblSample", ;
		cntPreview.Name = "cntPreview", ;
		cntPreview.shpBorder.Name = "shpBorder", ;
		Shp2.Name = "Shp2", ;
		edtHelperText.Name = "edtHelperText"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_EVALUATECONTENTS_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS tabheaderother AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Panelcommentuser1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Panelmemberdata1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Caption = "Other"
	Height = 286
	Name = "tabheaderother"
	Width = 438

	ADD OBJECT 'Panelcommentuser1' AS panelcommentuser WITH ;
		Height = 191, ;
		Left = 4, ;
		Name = "Panelcommentuser1", ;
		Top = 0, ;
		Width = 428, ;
		shpUser.Height = 2, ;
		shpUser.Left = 5, ;
		shpUser.Name = "shpUser", ;
		shpUser.Top = 105, ;
		shpUser.Width = 410, ;
		lblCommentText.Height = 58, ;
		lblCommentText.Left = 56, ;
		lblCommentText.Name = "lblCommentText", ;
		lblCommentText.Top = 17, ;
		lblCommentText.Width = 356, ;
		cmdComment.Left = 291, ;
		cmdComment.Name = "cmdComment", ;
		cmdComment.Top = 72, ;
		lblUserCaption.Left = 2, ;
		lblUserCaption.Name = "lblUserCaption", ;
		lblUserCaption.Top = 97, ;
		lblUserText.Height = 51, ;
		lblUserText.Left = 57, ;
		lblUserText.Name = "lblUserText", ;
		lblUserText.Top = 114, ;
		lblUserText.Width = 356, ;
		imgComment.Height = 32, ;
		imgComment.Name = "imgComment", ;
		imgComment.Width = 32, ;
		cmdUser.Left = 291, ;
		cmdUser.Name = "cmdUser", ;
		cmdUser.Top = 163, ;
		Shape1.Height = 2, ;
		Shape1.Left = 5, ;
		Shape1.Name = "Shape1", ;
		Shape1.Top = 9, ;
		Shape1.Width = 410, ;
		lblCommentCaption.Name = "lblCommentCaption", ;
		imgUser.Height = 32, ;
		imgUser.Left = 8, ;
		imgUser.Name = "imgUser", ;
		imgUser.Top = 117, ;
		imgUser.Width = 32
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'Panelmemberdata1' AS panelmemberdata WITH ;
		Height = 97, ;
		Left = 4, ;
		Name = "Panelmemberdata1", ;
		Top = 187, ;
		Width = 432, ;
		LBLSCRIPTTEXT.Height = 54, ;
		LBLSCRIPTTEXT.Left = 56, ;
		LBLSCRIPTTEXT.Name = "LBLSCRIPTTEXT", ;
		LBLSCRIPTTEXT.Top = 18, ;
		LBLSCRIPTTEXT.Width = 360, ;
		SHAPE4.Height = 2, ;
		SHAPE4.Left = 5, ;
		SHAPE4.Name = "SHAPE4", ;
		SHAPE4.Top = 9, ;
		SHAPE4.Width = 410, ;
		CMDSCRIPT.Left = 291, ;
		CMDSCRIPT.Name = "CMDSCRIPT", ;
		CMDSCRIPT.Top = 70, ;
		IMGSCRIPT.Height = 32, ;
		IMGSCRIPT.Name = "IMGSCRIPT", ;
		IMGSCRIPT.Width = 32, ;
		LBLSCRIPTCAPTION.Name = "LBLSCRIPTCAPTION"
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />
	
	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_HDR_OTHER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Panelcommentuser1.loadfromfrx
		*---------------------------------------------------------------
		* Ensure we are on the report header record:
		*---------------------------------------------------------------
		select (THIS.Tag)
		locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
		return dodefault()
	ENDPROC

	PROCEDURE Panelcommentuser1.savetofrx
		*---------------------------------------------------------------
		* Ensure we are on the report header record:
		*---------------------------------------------------------------
		select (THIS.Tag)
		locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
		return dodefault()
	ENDPROC

	PROCEDURE Panelmemberdata1.loadfromfrx
		*---------------------------------------------------------------
		* Ensure we are on the report header record:
		*---------------------------------------------------------------
		select (THIS.Tag)
		locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
		return dodefault()
	ENDPROC

	PROCEDURE Panelmemberdata1.savetofrx
		*---------------------------------------------------------------
		* Ensure we are on the report header record:
		*---------------------------------------------------------------
		select (THIS.Tag)
		locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
		return dodefault()
	ENDPROC

ENDDEFINE

DEFINE CLASS tabmultiprop AS page 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Panelmultiprop1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Caption = "Properties"
	Height = 300
	Name = "tabmultiprop"
	Width = 482

	ADD OBJECT 'Panelmultiprop1' AS panelmultiprop WITH ;
		Height = 308, ;
		Left = 4, ;
		Name = "Panelmultiprop1", ;
		Top = 8, ;
		Grid.colEnable.Check1.Alignment = 0, ;
		Grid.colEnable.Check1.Name = "Check1", ;
		Grid.colEnable.Header1.Name = "Header1", ;
		Grid.colEnable.Name = "colEnable", ;
		Grid.colProperty.Header1.Name = "Header1", ;
		Grid.colProperty.Name = "colProperty", ;
		Grid.colProperty.Text1.Name = "Text1", ;
		Grid.colValue.cbo.Name = "cbo", ;
		Grid.colValue.Header1.Name = "Header1", ;
		Grid.colValue.Name = "colValue", ;
		Grid.colValue.txt.Name = "txt", ;
		Grid.Name = "Grid", ;
		Lbl1.Name = "Lbl1"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE Activate
		if type( "THIS.Controls[1]" ) = "O"
			try
				THIS.Controls[1].SetFocus()
			catch
			endtry
		endif
	ENDPROC

	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_PROPERTIES_LOC
		#ENDIF
		THIS.HelpContextID = UI_MULTI_PROPS_PROPERTIES_HELP_ID     
	ENDPROC

ENDDEFINE

DEFINE CLASS tabmultiprotection AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Panelmultiprotection" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Caption = "Protection"
	Height = 348
	Name = "tabmultiprotection"
	Width = 374

	ADD OBJECT 'Panelmultiprotection' AS panelmultiprotection WITH ;
		Left = 2, ;
		Name = "Panelmultiprotection", ;
		Top = 2, ;
		chkApplyProtection.Alignment = 0, ;
		chkApplyProtection.Name = "chkApplyProtection", ;
		panelProtection.CHKOBJECTHIDDEN.Alignment = 0, ;
		panelProtection.CHKOBJECTHIDDEN.Name = "CHKOBJECTHIDDEN", ;
		panelProtection.CHKOBJECTLOCK.Alignment = 0, ;
		panelProtection.CHKOBJECTLOCK.Name = "CHKOBJECTLOCK", ;
		panelProtection.CHKOBJECTNODELETE.Alignment = 0, ;
		panelProtection.CHKOBJECTNODELETE.Name = "CHKOBJECTNODELETE", ;
		panelProtection.CHKOBJECTNOEDIT.Alignment = 0, ;
		panelProtection.CHKOBJECTNOEDIT.Name = "CHKOBJECTNOEDIT", ;
		panelProtection.CHKOBJECTNOSELECT.Alignment = 0, ;
		panelProtection.CHKOBJECTNOSELECT.Name = "CHKOBJECTNOSELECT", ;
		panelProtection.LBL1.Name = "LBL1", ;
		panelProtection.LBL2.Name = "LBL2", ;
		panelProtection.Name = "panelProtection", ;
		panelProtection.Shp1.Name = "Shp1"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_PROTECTION_LOC
		#ENDIF
		THIS.HelpContextID = UI_MULTI_PROPS_PROPERTIES_HELP_ID     
	ENDPROC

ENDDEFINE

DEFINE CLASS tabmultirotate AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Panelmultirotate1" UniqueID="" Timestamp="" />

	Caption = "Rotation"
	Height = 261
	Name = "tabmultirotate"
	Width = 444

	ADD OBJECT 'Panelmultirotate1' AS panelmultirotate WITH ;
		Height = 208, ;
		Left = 6, ;
		Name = "Panelmultirotate1", ;
		Top = 4, ;
		Width = 402, ;
		chkApplyRotate.Alignment = 0, ;
		chkApplyRotate.Name = "chkApplyRotate", ;
		panelrotate.lblAngle.Name = "lblAngle", ;
		panelrotate.lblObjectRotation.Name = "lblObjectRotation", ;
		panelrotate.Name = "panelrotate", ;
		panelrotate.RotatePreview.horizontalGuide.Name = "horizontalGuide", ;
		panelrotate.RotatePreview.Label.Name = "Label", ;
		panelrotate.RotatePreview.Name = "RotatePreview", ;
		panelrotate.RotatePreview.ShadowLabel.Name = "ShadowLabel", ;
		panelrotate.RotatePreview.touchPad.Name = "touchPad", ;
		panelrotate.RotatePreview.verticalGuide.Name = "verticalGuide", ;
		panelrotate.Shp1.Name = "Shp1", ;
		panelrotate.spnAngle.Name = "spnAngle"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />

ENDDEFINE

DEFINE CLASS tabobjadvanced AS pge OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Paneladvancedprops1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Panelrotate1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Caption = "Advanced"
	Height = 354
	Name = "tabobjadvanced"
	Width = 384

	ADD OBJECT 'Paneladvancedprops1' AS paneladvancedprops WITH ;
		Height = 168, ;
		Left = 4, ;
		Name = "Paneladvancedprops1", ;
		Top = 8, ;
		Width = 368, ;
		LSTPROPERTIES.Height = 116, ;
		LSTPROPERTIES.Left = 0, ;
		LSTPROPERTIES.Name = "LSTPROPERTIES", ;
		LSTPROPERTIES.Top = 20, ;
		LSTPROPERTIES.Width = 364, ;
		LBLNAME.Name = "LBLNAME", ;
		LBLVALUE.Left = 220, ;
		LBLVALUE.Name = "LBLVALUE", ;
		LBLVALUE.Top = 4, ;
		LBLTYPE.Name = "LBLTYPE", ;
		LBLTYPE.Visible = .F., ;
		cmdAdd.Left = 95, ;
		cmdAdd.Name = "cmdAdd", ;
		cmdAdd.Top = 141, ;
		CMDDELETE.Left = 189, ;
		CMDDELETE.Name = "CMDDELETE", ;
		CMDDELETE.Top = 141, ;
		CMDEDIT.Left = 0, ;
		CMDEDIT.Name = "CMDEDIT", ;
		CMDEDIT.Top = 141
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />

	ADD OBJECT 'Panelrotate1' AS panelrotate WITH ;
		Left = 8, ;
		Name = "Panelrotate1", ;
		Top = 181, ;
		SHP1.Name = "SHP1", ;
		lblObjectRotation.Name = "lblObjectRotation", ;
		ROTATEPREVIEW.horizontalGuide.Name = "horizontalGuide", ;
		ROTATEPREVIEW.Label.Name = "Label", ;
		ROTATEPREVIEW.Name = "ROTATEPREVIEW", ;
		ROTATEPREVIEW.ShadowLabel.Name = "ShadowLabel", ;
		ROTATEPREVIEW.touchPad.Name = "touchPad", ;
		ROTATEPREVIEW.verticalGuide.Name = "verticalGuide", ;
		spnAngle.Name = "spnAngle", ;
		lblAngle.Name = "lblAngle"
		*< END OBJECT: ClassLib="frxbuilder2.vcx" BaseClass="container" />
	
	PROCEDURE Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TAB_ADVANCED_LOC	
		#ENDIF
		
	ENDPROC

ENDDEFINE
