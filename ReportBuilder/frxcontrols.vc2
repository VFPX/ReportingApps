*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="frxcontrols.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cbo AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	FontName = "Tahoma"
	FontSize = 8
	Height = 22
	Margin = 1
	Name = "cbo"
	nofontadjust = .F.
	Width = 100
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
		
		
		
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
		
	ENDPROC

	PROCEDURE KeyPress
		lparameters iKey, iModifier
		
		*----------------------------------
		* Do not allow nulls to be entered
		* with Ctrl-0 :
		*----------------------------------
		if m.iKey = 48 and 0 < bitand( m.iModifier, 2 )
			nodefault
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS chk AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	Alignment = 0
	AutoSize = .T.
	BackStyle = 0
	Caption = "Check1"
	FontName = "Tahoma"
	FontSize = 8
	Name = "chk"
	nofontadjust = .F.
	Value = .F.
	Width = 53
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
		
	ENDPROC

	PROCEDURE KeyPress
		lparameters iKey, iModifier
		
		*----------------------------------
		* Do not allow nulls to be entered
		* with Ctrl-0 :
		*----------------------------------
		if m.iKey = 48 and 0 < bitand( m.iModifier, 2 )
			nodefault
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS cmd AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: enabled_assign
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	Caption = "Caption"
	FontName = "Tahoma"
	FontSize = 8
	Height = 25
	Name = "cmd"
	nofontadjust = .F.
	Width = 75
	
	PROCEDURE enabled_assign
		lparameters lEnabled
		THIS.Enabled = m.lEnabled
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS cnt AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: enabled_assign
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Height = 112
	Name = "cnt"
	Width = 200
	
	PROCEDURE enabled_assign
		lparameter lEnabled
		THIS.Enabled = m.lEnabled
		
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE RightClick
		THIS.Parent.RightClick()
	ENDPROC

	PROCEDURE SetFocus
		local oControl
		for each oControl in this.Controls
			if type("oControl.TabIndex") = "N"
				if oControl.TabIndex = 1
					if pemstatus( m.oControl,"setFocus",5)
						oControl.SetFocus()
						nodefault
					endif
					exit
				endif
			endif
		endfor
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cnttextpreview AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSample" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="canvas" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="canvas.vertLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="canvas.hozLine" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="canvas.text" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: caption_assign
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: showlines
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	caption = ("")		&& Specifies the text displayed in an object's caption.
	Height = 76
	Name = "cnttextpreview"
	showlines = .F.
	Style = 3
	Width = 289

	ADD OBJECT 'canvas' AS cnt WITH ;
		BackColor = 255,255,255, ;
		BackStyle = 1, ;
		Height = 45, ;
		Left = 6, ;
		Name = "canvas", ;
		SpecialEffect = 1, ;
		Top = 19, ;
		Width = 274
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'canvas.hozLine' AS line WITH ;
		BorderColor = 131,210,241, ;
		Height = 0, ;
		Left = -2, ;
		Name = "hozLine", ;
		Top = 24, ;
		Width = 280, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'canvas.text' AS lbl WITH ;
		Caption = "This is the preview text", ;
		Left = 10, ;
		Name = "text", ;
		Top = 15, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'canvas.vertLine' AS line WITH ;
		BorderColor = 131,210,241, ;
		Height = 100, ;
		Left = 26, ;
		Name = "vertLine", ;
		Top = -1, ;
		Width = 0, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'lblSample' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Sample ", ;
		Left = 10, ;
		Name = "lblSample", ;
		Style = 3, ;
		TabIndex = 2, ;
		Top = -1, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'shpBorder' AS shp WITH ;
		Height = 65, ;
		Left = 0, ;
		Name = "shpBorder", ;
		Style = 3, ;
		Top = 6, ;
		Width = 287, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE caption_assign
		lparameter cText
		if type("m.cText")="C"
			THIS.Canvas.Text.Caption = m.cText
		endif
		
	ENDPROC

	PROCEDURE Init
		*----------------------------------------
		* Position the guidelines on the origin:
		*----------------------------------------
		with THIS.Canvas.vertLine
			.Height = THIS.Canvas.Height-2
			.Top    = 1
		*	.Left   = 
		endwith	
		with THIS.Canvas.hozLine
			.Width = THIS.Canvas.Width-2
			.Left  = 1
		*	.Top   = 
		endwith	
		
		store THIS.ShowLines to ;
			THIS.Canvas.VertLine.Visible, ;
			THIS.Canvas.HozLine.Visible
		
	ENDPROC

	PROCEDURE Refresh
		lparameter oFormatter
		if type("m.oFormatter") <> "O"
			return
		endif
		
		local lcErrorMsg, iRed, iGreen, iBlue
		lcErrorMsg = ""
		
		with THIS.Canvas
		
			.Text.FontName    = oFormatter.FontFace
			try
				.Text.FontSize    = oFormatter.FontSize
			catch to oErr 
				lcErrorMsg = oErr.Message
			endtry
		
			if oFormatter.FontCharSet = -1
				.Text.FontCharSet = 1
			else
				try
					.Text.FontCharSet = oFormatter.FontCharSet
				catch
					.Text.FontCharSet = 1
				endtry
			endif		
		
			.Text.FontBold       = oFormatter.isFontBold()
			.Text.FontItalic     = oFormatter.isFontItalic()
			.Text.FontUnderline  = oFormatter.FontUnderline
			.Text.FontStrikeThru = oFormatter.FontStrikeThru
			
			try 
				.Text.ForeColor = oFormatter.ForeColor
				.Text.BackColor = oFormatter.BackColor
			catch to oErr 
				lcErrorMsg = oErr.Message
			endtry
		
			do case
			case oFormatter.AlphaFill = 0
				.Text.BackStyle = 0 && oFormatter.BackStyle
				*---------------------------------
				* transparent - send lines to front
				*---------------------------------
				.hozLine.ZOrder(0)
				.vertLine.ZOrder(0)
		
			case oFormatter.AlphaFill = 255
				.Text.BackStyle = 1	&& oFormatter.BackStyle
				*---------------------------------
				* Opaque - send lines to back
				*---------------------------------
				.hozLine.ZOrder(1)
				.vertLine.ZOrder(1)	
		
			otherwise
				*---------------------------------
				* Simulate translucency by forcing 
				* the lines to the front
				*---------------------------------
				.Text.BackStyle = 1 && Opaque
				.hozLine.ZOrder(0)
				.vertLine.ZOrder(0)
				
				*---------------------------------
				* Calculate the new color value
				* adjusted for alpha (totally faked)
				* and assumes a white background which 
				* is ok here		
				*---------------------------------
				nFade  = 1-(oFormatter.AlphaFill/255)
				iRed   = oFormatter.GetBackColor('R')
				iGreen = oFormatter.GetBackColor('G')
				iBlue  = oFormatter.GetBackColor('B')
		
				iRed   = min(255, m.iRed   + int((255-m.iRed  )*nFade) )
				iGreen = min(255, m.iGreen + int((255-m.iGreen)*nFade) )
				iBlue  = min(255, m.iBlue  + int((255-m.iBlue )*nFade) )
				
				.Text.BackColor = rgb(m.iRed, m.iGreen, m.iBlue )
		
			endcase
				
			if not empty(m.lcErrorMsg)
				.Text.Caption = m.lcErrorMsg
			endif
		
		endwith	
		
		
	ENDPROC

	PROCEDURE lblSample.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_SAMPLE_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS edt AS editbox 
 	*< CLASSDATA: Baseclass="editbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	FontName = "Tahoma"
	FontSize = 8
	Height = 53
	Margin = 1
	Name = "edt"
	nofontadjust = .F.
	Width = 100
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
		
	ENDPROC

	PROCEDURE KeyPress
		lparameters iKey, iModifier
		
		*----------------------------------
		* Do not allow nulls to be entered
		* with Ctrl-0 :
		*----------------------------------
		if m.iKey = 48 and 0 < bitand( m.iModifier, 2 )
			nodefault
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS hyperlabel AS lbl OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	BackStyle = 0
	Caption = "enter url here"
	FontUnderline = .T.
	ForeColor = 0,0,255
	MousePointer = 15
	Name = "hyperlabel"
	
	PROCEDURE Click
		local lcUrl
		if left( lower(THIS.Caption), 7 ) = [http://]
			lcUrl = THIS.Caption
		else
			lcUrl = [http://] + THIS.Caption
		endif
		
		THIS.ForeColor = RGB(128,0,128)
		
		DECLARE INTEGER ShellExecute ;
		    IN SHELL32.dll ;
		    INTEGER nWinHandle,;
		    STRING cOperation,;
		    STRING cFileName,;
		    STRING cParameters,;
		    STRING cDirectory,;
		    INTEGER nShowWindow
		
		DECLARE INTEGER FindWindow ;
		   IN WIN32API STRING cNull,STRING cWinName
		
		=ShellExecute( FindWindow(0,_screen.Caption), "OPEN", m.lcUrl,"",sys(2023),1)
	ENDPROC

ENDDEFINE

DEFINE CLASS lbl AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	AutoSize = .T.
	Caption = "label"
	FontName = "Tahoma"
	FontSize = 8
	Height = 15
	Name = "lbl"
	nofontadjust = .F.
	Width = 24
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
	ENDPROC

	PROCEDURE RightClick
		THIS.Parent.RightClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS lst AS listbox 
 	*< CLASSDATA: Baseclass="listbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	FontName = "Tahoma"
	FontSize = 8
	Height = 78
	Name = "lst"
	nofontadjust = .F.
	Width = 174
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
	ENDPROC

	PROCEDURE KeyPress
		lparameters iKey, iModifier
		
		*----------------------------------
		* Do not allow nulls to be entered
		* with Ctrl-0 :
		*----------------------------------
		if m.iKey = 48 and 0 < bitand( m.iModifier, 2 )
			nodefault
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS opg AS optiongroup 
 	*< CLASSDATA: Baseclass="optiongroup" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: enabled_assign
		*m: readonly_assign
		*m: setfocus		&& Sets the focus to a control.
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderStyle = 1
	ButtonCount = 0
	Height = 66
	MemberClass = "opt"
	MemberClassLibrary = frxcontrols.vcx
	Name = "opg"
	Value = 0
	Width = 117
	
	PROCEDURE enabled_assign
		lparameter lEnabled
		
		for each optbut in THIS.Buttons
			optbut.Enabled = m.lEnabled
		endfor
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE readonly_assign
		lparameter lReadOnly
		* 
		* Returning .F. in each button's .When() produces
		* a more visually acceptable effect:
		*
		*for each optbut in this.Buttons 
		*	optbut.Enabled = not m.lReadOnly
		*endfor
		
		THIS.ReadOnly = m.lReadOnly
	ENDPROC

	PROCEDURE RightClick
		THIS.Parent.RightClick()
	ENDPROC

	PROCEDURE setfocus		&& Sets the focus to a control.
		*----------------------------------------------------
		* SetFocus() in containers doesn't work so well. This
		* compensates for that bug by doing it manually:
		*----------------------------------------------------
		local oControl
		for each oControl in this.Buttons
			if oControl.TabIndex = 1
				oControl.SetFocus()
				nodefault
				exit
			endif
		endfor
		
	ENDPROC

ENDDEFINE

DEFINE CLASS opt AS optionbutton 
 	*< CLASSDATA: Baseclass="optionbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	AutoSize = .T.
	BackStyle = 0
	Caption = "prompt"
	FontName = "Tahoma"
	FontSize = 8
	Height = 15
	Name = "opt"
	nofontadjust = .F.
	Width = 52
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
	ENDPROC

	PROCEDURE KeyPress
		lparameters iKey, iModifier
		
		*----------------------------------
		* Do not allow nulls to be entered
		* with Ctrl-0 :
		*----------------------------------
		if m.iKey = 48 and 0 < bitand( m.iModifier, 2 )
			nodefault
		endif
	ENDPROC

	PROCEDURE When
		if THIS.Parent.ReadOnly
			return .F.
		else 
			return .T.
		endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS pge AS page 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Caption"
	FontName = "Tahoma"
	FontSize = 8
	Height = 187
	Name = "pge"
	Width = 187
	
	PROCEDURE Activate
		if type( "THIS.Controls[1]" ) = "O"
			try
				THIS.Controls[1].SetFocus()
			catch
			endtry
		endif
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE RightClick
		THIS.Parent.RightClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS pgf AS pageframe 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*p: currentpage
		*p: errored
	*</DefinedPropArrayMethod>

	ActivePage = 0
	currentpage = 0
	ErasePage = .T.
	errored = .F.
	Height = 169
	MemberClass = "pge"
	MemberClassLibrary = frxcontrols.vcx
	Name = "pgf"
	PageCount = 0
	TabStyle = 1
	Width = 241
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
		
	ENDPROC

	PROCEDURE RightClick
		THIS.Parent.RightClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS pgfhandlerframe AS pgf OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: getpanelcollection		&& returns a collection of panels contained by each page that implement SaveToFrx or LoadFromFrx
		*m: loadpanelsfromfrx
		*m: newregisteredobject
		*m: refreshpanels
		*m: removeunusedpages
		*m: savepanelstofrx
		*p: autorefreshonpagechange
	*</DefinedPropArrayMethod>

	autorefreshonpagechange = .F.
	ErasePage = .T.
	Name = "pgfhandlerframe"
	
	PROCEDURE Click
		*---------------------------------------------------
		* This code deals with ensuring that inter-related 
		* tabs reflect changes.
		*
		* Assumptions: 
		*   - oControl will be an instance of frxPanel
		*
		* Possible checks:
		*   use THISFORM.isInstanceOf('frxPanel',oControl)
		*
		*---------------------------------------------------
		if THIS.CurrentPage <> THIS.ActivePage and THIS.AutoRefreshOnPageChange
		
			local oControl, oPage, i, j
		
			if THIS.CurrentPage > 0
		
				*----------------------------------------------
				* convert ActivePage into PageOrder to compensate
				* for a weird VFP bug:
				*----------------------------------------------
				for i = 1 to THIS.PageCount
					oPage = THIS.Pages(m.i)
					
					if oPage.PageOrder = THIS.CurrentPage
		
						for j = 1 to oPage.ControlCount
							oControl = oPage.Controls(m.j)
							*----------------------------------------------
							* Fix for SP1: Does not rely on panel control
							* being subclasses from frxPanel; rather, uses 
							* reflection instead:
							*----------------------------------------------
							if pemstatus( m.oControl, "SaveToFrx", 5 ) 
								oControl.SaveToFrx()
							endif
							oControl = .NULL.
						endfor	
					endif
					oPage = .NULL.
				endfor
		
				for i = 1 to THIS.PageCount
					oPage = THIS.Pages(m.i)
					if oPage.PageOrder = THIS.ActivePage
		
						for j = 1 to oPage.ControlCount
							oControl = oPage.Controls(m.j)
							*----------------------------------------------
							* Fix for SP1: Does not rely on panel control
							* being subclasses from frxPanel; rather, uses 
							* reflection instead:
							*----------------------------------------------
							if pemstatus( m.oControl, "LoadFromFrx", 5 ) 
								oControl.LoadFromFrx()
							endif
							oControl = .NULL.
						endfor				
					endif
					oPage = .NULL.
				endfor
		
			endif
			THIS.CurrentPage = THIS.ActivePage
		endif
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE getpanelcollection		&& returns a collection of panels contained by each page that implement SaveToFrx or LoadFromFrx
		*======================================================
		* frame.GetPanelCollection()
		*======================================================
		local oPanels, oPage, oControl, i, j
		
		oPanels = create("Collection")
		oPanels.AddProperty( "MaxPriority", 0 )
		
		*-----------------------------
		* Collect the priorities:
		*-----------------------------
		for i = 1 to THIS.PageCount
			oPage = THIS.Pages(m.i)
		
			for j = 1 to oPage.ControlCount
				oControl = oPage.Controls(m.j)
			
				*----------------------------------------------
				* Fix for SP1: Does not rely on panel control
				* being subclasses from frxPanel; rather, uses 
				* reflection instead:
				*----------------------------------------------
				if pemstatus( m.oControl, "SaveToFrx", 5 ) ;
				or pemstatus( m.oControl, "LoadFromFrx", 5 )
					*--------------------------------------
					* Fix for SP1: Priority property is optional
					*--------------------------------------
					if pemstatus( m.oControl, "Priority", 5 )
						oPanels.MaxPriority = max( oPanels.MaxPriority, oControl.priority )
					endif
		
					oPanels.Add( oControl )
				endif	
				oControl = .NULL.
			endfor
			oPage = .NULL.
		endfor
		return oPanels
		
	ENDPROC

	PROCEDURE loadpanelsfromfrx
		*======================================================
		* frame.LoadPanelsFromFrx()
		*======================================================
		local OKToContinue, oPanels, i, j, oControl, iPanelPriority 
		
		OkToContinue = .T.
		oPanels = THIS.GetPanelCollection()
		
		*-----------------------------------------------------
		* Process the panels in ascending order of priority:
		*-----------------------------------------------------
		for i = 0 to oPanels.MaxPriority step 1
		
			for j = 1 to oPanels.Count
				oControl = oPanels.Item(m.j)
		
				*--------------------------------------
				* Fix for SP1: Priority property is optional
				*--------------------------------------
				if pemstatus( oControl, "Priority", 5 )
					iPanelPriority = oControl.priority
				else
					iPanelPriority = 0
				endif
				
				if m.iPanelPriority = m.i
					if pemstatus( oControl, "LoadFromFrx", 5 )
						OkToContinue = m.OkToContinue and oControl.LoadFromFrx()
					endif
				endif
				oControl = .NULL.
			endfor
		endfor
		release oPanels
		return m.OkToContinue
		
	ENDPROC

	PROCEDURE newregisteredobject
		*=======================================================
		* NewRegisteredObject( name, class, library )
		*
		* This method adds a page class to the pages collection
		* by temporarily swapping the member class/lib info and 
		* incrementing PageCount. Works a treat and doesn't 
		* involve using THIS.NewObject().
		* This method uses uses a hierarchy of search paths in 
		* an attempt to ensure that the class library is found.
		* Class/Library search order:
		*   looks in CLASSPATH
		*   looks relative to current directory
		*   looks relative to directory of current registry table
		*   looks relative to directory of ReportBuilder.App
		*   then fails
		* Returns .T. if successful.
		*-------------------------------------------------------
		* New in SP2
		*=======================================================
		lparameters tcName, tcClass, tcLibrary
		THIS.Errored = .F.
		
		*--------------------------------------
		* Save the current member class settings:
		*--------------------------------------
		local lcClass, lcLibrary
		lcClass    = THIS.MemberClass
		lcLibrary  = THIS.MemberClassLibrary
		
		THIS.MemberClass = m.tcClass
		
		try
			if empty( m.tcLibrary )
				*---------------------------------
				* (c.f. frxEvent.NewRegisteredObject() )
				* Pageframes do not allow member classes
				* to be found in the SET CLASSLIB. If the 
				* class library is not specified, they will
				* add a base Page class instead. So we have 
				* to error out under these conditions:
				*---------------------------------
				THIS.Errored = .T.
			else
				*---------------------------------
				* Try normal relative-to-curdir:
				*---------------------------------
				THIS.MemberClassLibrary = m.tcLibrary
				THIS.PageCount = THIS.PageCount + 1
			endif
		catch
			THIS.Errored = .T.
		endtry
		
		if not THIS.Errored
			*-------------------------
			* Restore and return:
			*-------------------------
			THIS.MemberClass        = m.lcClass
			THIS.MemberClassLibrary = m.lcLibrary
			return .T.
		endif
		
		THIS.Errored= .F.
		
		if vartype( THIS.Parent.frxEvent ) = "O" and not isnull( THIS.Parent.frxEvent )
		
			try
				*---------------------------------
				* Try relative to registry dbf:
				*---------------------------------
				THIS.MemberClassLibrary = addbs(justpath(THIS.Parent.frxEvent.GetRegistryTableName())) + m.tcLibrary
				THIS.PageCount = THIS.PageCount + 1
			catch
				THIS.Errored = .T.
			endtry
				
			if not THIS.Errored
				*-------------------------
				* Restore and return:
				*-------------------------
				THIS.MemberClass        = m.lcClass
				THIS.MemberClassLibrary = m.lcLibrary
				return .T.
			endif
		
			THIS.Errored= .F.
		
			try
				*---------------------------------
				* Try relative to the main app/exe:
				*---------------------------------
				THIS.MemberClassLibrary = THIS.Parent.frxEvent.BuilderPath + m.tcLibrary
				THIS.PageCount = THIS.PageCount + 1
			catch
				THIS.Errored = .T.
			endtry
		endif
		
		if not THIS.Errored
			*-------------------------
			* Restore and return:
			*-------------------------
			THIS.MemberClass        = m.lcClass
			THIS.MemberClassLibrary = m.lcLibrary
			return .T.
		endif
		
		THIS.Errored= .F.
		
		try
			*---------------------------------
			* Try relative to HOME(0)
			*---------------------------------
			THIS.MemberClassLibrary = addbs(justpath(home(0))) + m.tcLibrary
			THIS.PageCount = THIS.PageCount + 1
		catch
			THIS.Errored = .T.
		endtry	
		
		*-----------------------------------------------
		* Restore:
		*-----------------------------------------------
		THIS.MemberClass        = m.lcClass
		THIS.MemberClassLibrary = m.lcLibrary
		
		if THIS.Errored
			=messagebox( ;
				RB_ERROR_NEWOBJECT_LOC                                   + c_CR2 + ;
				UI_NEWREGOBJ_CLASS_LOC  + "   "   + m.tcClass            + c_CR  + ;
				UI_NEWREGOBJ_LIBRARY_LOC  + " "   + m.tcLibrary          + c_CR  + ;
				UI_NEWREGOBJ_REGTABLE_LOC + " "   + dbf("frxregistry")   + c_CR2 + ;
				RB_ERROR_CHECK_REGISTRY_LOC, 0+16, DEFAULT_MBOX_TITLE_LOC )
			THIS.Errored = .F.
			return .F.    		
		endif
		
		return .T.
	ENDPROC

	PROCEDURE refreshpanels
		*======================================================
		* frame.RefreshPanels()
		*======================================================
		if THIS.SavePanelsToFrx()
			THIS.LoadPanelsFromFrx()
			return .T.
		else
			return .F.
		endif
		
	ENDPROC

	PROCEDURE removeunusedpages
		*=====================================================
		* RemoveUnusedPages()
		*
		* Any page that does not have a visible control will 
		* be removed from the dialog. 
		* Protection sometimes hides controls on pages.
		*=====================================================
		local lHasVisibleCtrl, i, j, oPage, oUnused
		oUnused = newobject("Collection")
		
		* Does this screw up the Page collection?
		* How does this work for controls with the same name?
		
		for i = 1 to THIS.PageCount
			oPage = THIS.Pages(m.i)
		
			lHasVisibleCtrl = .F.
		
			for j = 1 to oPage.ControlCount 
				
				lHasVisibleCtrl = oPage.Controls(m.j).Visible
				if m.lHasVisibleCtrl
					exit
				endif
			endfor		
		
			if not m.lHasVisibleCtrl
				oUnused.Add( oPage.Name )
			endif					
		
			oPage = .NULL.
			
		endfor
		for each cPageName in oUnused
			THIS.RemoveObject( m.cPageName )
		endfor
		
		return
		
	ENDPROC

	PROCEDURE savepanelstofrx
		*======================================================
		* frame.SavePanelsToFrx()
		*======================================================
		local oPanels, i, oControl, iPanelPriority
		
		oPanels = THIS.GetPanelCollection()
		
		*-----------------------------------------------------
		* Process the panels in descending order of priority:
		*-----------------------------------------------------
		for i = oPanels.MaxPriority to 0 step -1
		
			for j = 1 to oPanels.Count
				oControl = oPanels.Item(m.j)
				
				*--------------------------------------
				* Fix for SP1: Priority property is optional
				*--------------------------------------
				if pemstatus( oControl, "Priority", 5 )
					iPanelPriority = oControl.priority
				else
					iPanelPriority = 0
				endif
				
				if m.iPanelPriority = m.i
					if pemstatus( oControl, "SaveToFrx", 5 )
						if not oControl.SaveToFrx()
							*---------------------------------------
							* One of the panels has indicated that 
							* it is not appropriate to continue:
							*---------------------------------------
							wait clear
							release oPanels
							return .F.
						endif
					endif
				endif			
		
				oControl = .NULL.		
			endfor
		endfor
		release oPanels
		return .T.
		
	ENDPROC

ENDDEFINE

DEFINE CLASS resizegrabber AS image 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: resize		&& Occurs when an object is resized.
	*</DefinedPropArrayMethod>

	Height = 12
	Name = "resizegrabber"
	Picture = images\grabber.gif
	Width = 12
	
	PROCEDURE Init
		if _screen.Themes
			THIS.Picture = "grabber.gif"
		else
			THIS.Picture = "grabber2k.gif"
		endif
	ENDPROC

	PROCEDURE resize		&& Occurs when an object is resized.
		*=======================================================================
		* Resize()
		* 
		* Useage:
		* In the form's resize event, call THIS.grabber.Resize() and the grabber
		* image will relocate itself to the bottom right corner of the window
		*=======================================================================
		THIS.Top  = THISFORM.Height - THIS.Height
		THIS.Left = THISFORM.Width  - THIS.Width
		if THISFORM.BorderStyle<>3
			THIS.Visible = .F.
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS shp AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 46
	Name = "shp"
	SpecialEffect = 0
	Width = 162
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE RightClick
		THIS.Parent.RightClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS spn AS spinner 
 	*< CLASSDATA: Baseclass="spinner" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: action
		*m: fontname_assign
		*m: fontsize_assign
		*m: resetincoming
		*p: incomingvalue
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	FontName = "Tahoma"
	FontSize = 8
	Height = 22
	incomingvalue = 0
	KeyboardLowValue = 0
	Margin = 1
	Name = "spn"
	nofontadjust = .F.
	SelectOnEntry = .T.
	SpinnerLowValue = 0.00
	Width = 121
	
	PROCEDURE action
	ENDPROC

	PROCEDURE DownClick
		if THIS.incomingValue <> THIS.Value
			this.action()
			this.resetIncoming()
		endif
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
	ENDPROC

	PROCEDURE GotFocus
		THIS.resetIncoming()
	ENDPROC

	PROCEDURE KeyPress
		lparameters iKey, iModifier
		
		*----------------------------------
		* Do not allow nulls to be entered
		* with Ctrl-0 :
		*----------------------------------
		if m.iKey = 48 and 0 < bitand( m.iModifier, 2 )
			nodefault
		endif
	ENDPROC

	PROCEDURE LostFocus
		if THIS.incomingValue <> THIS.Value
			this.action()
		endif
	ENDPROC

	PROCEDURE resetincoming
		THIS.incomingValue = THIS.Value
	ENDPROC

	PROCEDURE UpClick
		if THIS.incomingValue <> THIS.Value
			this.action()
			this.resetIncoming()
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS txt AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: fontname_assign
		*m: fontsize_assign
		*p: nofontadjust
	*</DefinedPropArrayMethod>

	FontName = "Tahoma"
	FontSize = 8
	Height = 22
	Margin = 1
	Name = "txt"
	nofontadjust = .F.
	SelectOnEntry = .T.
	Width = 100
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.Parent.Error( nError, cMethod, nLine )
	ENDPROC

	PROCEDURE fontname_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontName = m.newValue
		endif
		
	ENDPROC

	PROCEDURE fontsize_assign
		lparameter newValue
		if not THIS.noFontAdjust
			THIS.FontSize = m.newValue
		endif
	ENDPROC

	PROCEDURE KeyPress
		lparameters iKey, iModifier
		
		*----------------------------------
		* Do not allow nulls to be entered
		* with Ctrl-0 :
		*----------------------------------
		if m.iKey = 48 and 0 < bitand( m.iModifier, 2 )
			nodefault
		endif
	ENDPROC

ENDDEFINE
