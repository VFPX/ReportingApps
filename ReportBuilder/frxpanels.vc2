*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="frxpanels.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS cntpreviewpage AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="marginBox" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="extraMargin" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*p: columncount		&& Specifies the number of Column objects in a Grid, ComboBox, or ListBox control.
		*p: columns		&& An array for accessing individual Column objects in the Grid control by Column number.
	*</DefinedPropArrayMethod>

	BackColor = 255,255,255
	BackStyle = 1
	columncount = 0		&& Specifies the number of Column objects in a Grid, ComboBox, or ListBox control.
	columns = .NULL.		&& An array for accessing individual Column objects in the Grid control by Column number.
	Height = 178
	Name = "cntpreviewpage"
	Width = 135

	ADD OBJECT 'extraMargin' AS line WITH ;
		BorderColor = 192,192,192, ;
		Height = 159, ;
		Left = 15, ;
		Name = "extraMargin", ;
		Top = 9, ;
		Width = 0, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'marginBox' AS shp WITH ;
		BackStyle = 0, ;
		BorderColor = 192,192,192, ;
		Height = 159, ;
		Left = 9, ;
		Name = "marginBox", ;
		SpecialEffect = 1, ;
		Top = 9, ;
		Width = 117, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE DblClick
		THIS.Parent.dblClick()
	ENDPROC

	PROCEDURE Init
		dodefault()
		THIS.columns = newobject("Collection")
		
	ENDPROC

	PROCEDURE marginBox.DblClick
		THIS.Parent.dblClick()
	ENDPROC

ENDDEFINE

DEFINE CLASS ctrlpagelayoutpreview AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shadow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="page" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: determinescalefactor
		*m: frutopixels
		*m: refreshpreview
		*m: updatepreview
		*p: columncount		&& Specifies the number of Column objects in a Grid, ComboBox, or ListBox control.
		*p: columnspacing
		*p: columnwidth
		*p: extraleftmargin
		*p: footerheight
		*p: headerheight		&& Specifies the height of column headers in the Grid control.
		*p: marginleft
		*p: margintop
		*p: pageheight		&& Specifies the height of the Page.
		*p: pageorientation
		*p: pagewidth		&& Specifies the width of the Page.
		*p: previewmargin
		*p: printablepageonly
		*p: scalefactor
	*</DefinedPropArrayMethod>

	BackColor = 149,168,179
	BackStyle = 1
	columncount = 2		&& Specifies the number of Column objects in a Grid, ComboBox, or ListBox control.
	columnspacing = 5000
	columnwidth = 0
	extraleftmargin = 10000
	footerheight = 10000
	headerheight = 20000		&& Specifies the height of column headers in the Grid control.
	Height = 207
	marginleft = 5000
	margintop = 5000
	Name = "ctrlpagelayoutpreview"
	pageheight = 110000		&& Specifies the height of the Page.
	pageorientation = 0
	pagewidth = 85000		&& Specifies the width of the Page.
	previewmargin = 10
	printablepageonly = .T.
	scalefactor = 0
	SpecialEffect = 1
	Width = 163

	ADD OBJECT 'page' AS cntpreviewpage WITH ;
		BorderColor = 255,255,255, ;
		Height = 178, ;
		Left = 9, ;
		Name = "page", ;
		Tag = "0", ;
		Top = 9, ;
		Width = 126, ;
		marginBox.Height = 159, ;
		marginBox.Left = 9, ;
		marginBox.Name = "marginBox", ;
		marginBox.Top = 9, ;
		marginBox.Width = 109, ;
		extraMargin.Name = "extraMargin"
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'shadow' AS shp WITH ;
		BackColor = 51,64,77, ;
		BorderColor = 69,87,105, ;
		Height = 165, ;
		Left = 21, ;
		Name = "shadow", ;
		SpecialEffect = 1, ;
		Top = 28, ;
		Width = 120, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE DblClick
		* Display details:
		
		local cText
		cText = ""
		cText = m.cText + PAGELAYOUT_INFO_PAGE_WIDTH_LOC  + transform( THIS.pageWidth/10000, "99.999" ) + chr(13)
		cText = m.cText + PAGELAYOUT_INFO_PAGE_HEIGHT_LOC + transform( THIS.pageHeight/10000, "99.999" ) + chr(13)
		cText = m.cText + PAGELAYOUT_INFO_ORIENTATION_LOC + transform( THIS.pageOrientation ) + chr(13)
		
		cText = m.cText + chr(13)
		
		cText = m.cText + PAGELAYOUT_INFO_UNPRINT_TOP_LOC  + transform( THIS.marginTop/10000, "99.999" ) + chr(13)
		cText = m.cText + PAGELAYOUT_INFO_UNPRINT_LEFT_LOC + transform( THIS.marginLeft/10000, "99.999" ) + chr(13)
		cText = m.cText + PAGELAYOUT_INFO_EXTRA_LEFT_LOC   + transform( THIS.extraLeftMargin/10000, "99.999" ) + chr(13)
		
		cText = m.cText + chr(13)
		
		cText = m.cText + PAGELAYOUT_INFO_COL_COUNT_LOC + transform( THIS.columnCount ) + chr(13)
		cText = m.cText + PAGELAYOUT_INFO_COL_WIDTH_LOC + transform( THIS.columnWidth/10000, "99.999" ) + chr(13)
		cText = m.cText + PAGELAYOUT_INFO_COL_SPACE_LOC + transform( THIS.columnSpacing/10000, "99.999" ) + chr(13)
		
		cText = m.cText + chr(13)
		
		cText = m.cText + PAGELAYOUT_INFO_HEADER_SIZE_LOC + transform( THIS.headerHeight/10000, "99.999" ) + chr(13)
		cText = m.cText + PAGELAYOUT_INFO_FOOTER_SIZE_LOC + transform( THIS.footerHeight/10000, "99.999" ) + chr(13)
		
		=messagebox(m.cText,0+64,PAGELAYOUT_FORM_CAPTION_LOC)
		
		
	ENDPROC

	PROCEDURE determinescalefactor
		* scaleFactor depends on size, shape of paper, and size, shape of preview area.
		* and orientation of paper, by taking shortest dimensions
		*
		* Aspect ratio:
		*
		* < 1 : tall, skinny (portrait)
		* > 1 : wide, fat    (landscape)
		*
		* ScaleFactor is used to converty FRU dimensions into pixels, i.e.
		* THIS.page.Width = int(THIS.pageWidth / THIS.scaleFactor)
		* If pageWidth = 85000 FRUs, and page.Width = 120, scaleFactor = 708.333
		
		local nPreviewAspectRatio, nPageAspectRatio, iPreviewBaseline
		nPreviewAspectRatio = (THIS.Width/THIS.Height)
		
		*-----------------------------------------------------------------------------
		* New Code: This code assumes page Height and Width switch depending on 
		*           orientation. Simpler code.
		*-----------------------------------------------------------------------------
		
		nPageAspectRatio = (THIS.pageWidth/THIS.pageHeight)
		
		do case
		case m.nPreviewAspectRatio <= m.nPageAspectRatio
			*
			* Preview area is taller, skinnier than page
			* baseline depends on preview width:pagewidth
		
			iPreviewBaseline = THIS.Width - (THIS.previewMargin * 2) 
			THIS.scaleFactor = (THIS.pageWidth/m.iPreviewBaseline)
		
		
		case m.nPageAspectRatio < m.nPreviewAspectRatio
			*
			* Page is taller, skinnier than preview area
			* baseline depends on preview height:pageheight
		
			iPreviewBaseline = THIS.Height - (THIS.previewMargin * 2) 
			THIS.scaleFactor = (THIS.pageHeight/m.iPreviewBaseline)
		
		endcase
		return
		
		*-----------------------------------------------------------------------------
		* Note: This code assumes page Height and Width and Orientation are required.
		*       It turns out that Height and Width switch depending on orientation,
		* 		making the code a bit easier. See above.
		*-----------------------------------------------------------------------------
		
		do case
		case THIS.pageOrientation = ORIENTATION_PORTRAIT 
			* page is normal:
		
			do case
			case m.nPreviewAspectRatio <= 1	&& preview area is in PORTRAIT
				* Both in Portrait mode
				* Scale depends on which aspect ratio is smallest
				*
				nPageAspectRatio = (THIS.pageWidth/THIS.pageHeight)
				
				do case 
				case m.nPreviewAspectRatio <= m.nPageAspectRatio
					* Width:PageWidth
					*
					iPreviewBaseline = THIS.Width - (THIS.previewMargin * 2) 
					THIS.scaleFactor = (THIS.pageWidth/m.iPreviewBaseline)
		
				case m.nPageAspectRatio < m.nPreviewAspectRatio
					* Height:PageHeight
					*
					iPreviewBaseline = THIS.Height - (THIS.previewMargin * 2) 
					THIS.scaleFactor = (THIS.pageHeight/m.iPreviewBaseline)
		
				endcase	
		
			case m.nPreviewAspectRatio > 1 && preview area is LANDSCAPE	 
				* Preview is wide (landscape)
				* Page is tall, thin (portrait)
				* scale determined by pageHeight and previewHeight:
				*
				* THIS.Height - (THIS.previewMargin*2) :: THIS.pageHeight
		
				iPreviewBaseline = THIS.Height - (THIS.previewMargin * 2) 
				THIS.scaleFactor = (THIS.pageHeight/m.iPreviewBaseline)
		
			endcase
		
		case THIS.pageOrientation = ORIENTATION_LANDSCAPE 
			* Page is on its side:
		
			do case
			case m.nPreviewAspectRatio <= 1 && preview area is in PORTRAIT
				 
				* Preview is tall,thin (portrait)
				* Page is landscape (width is page height) on its side (wide, fat)
				* scale determined by pageHeight and previewWidth
				*
				* THIS.Width - (THIS.previewMargin*2) :: THIS.pageHeight
		
				iPreviewBaseline = THIS.Width - (THIS.previewMargin * 2) 
				THIS.scaleFactor = (THIS.pageHeight/m.iPreviewBaseline)
						
		
			case m.nPreviewAspectRatio > 1	&& preview area is in LANDSCAPE
				* Both in Landscape Mode
				* Scale depends on which aspect ratio is largest
				*
				nPageAspectRatio = (THIS.pageHeight/THIS.pageWidth)
			
				do case 
				case m.nPreviewAspectRatio >= m.nPageAspectRatio
					*
					* Height:PageWidth
					*
					iPreviewBaseline = THIS.Height - (THIS.previewMargin * 2) 
					THIS.scaleFactor = (THIS.pageWidth/m.iPreviewBaseline)
		
				case m.nPageAspectRatio > m.nPreviewAspectRatio
					*
					* Width:PageHeight
					*
					iPreviewBaseline = THIS.Width - (THIS.previewMargin * 2) 
					THIS.scaleFactor = (THIS.pageHeight/m.iPreviewBaseline)
		
				endcase	
			endcase
		endcase
	ENDPROC

	PROCEDURE frutopixels
		lparameter nFRU
		
		* 1 FRU is 10,000th inch.
		*
		* need to return a dimension in pixels based on our current scaleFactor
		
		return int( m.nFRU / THIS.scaleFactor)
	ENDPROC

	PROCEDURE refreshpreview
	ENDPROC

	PROCEDURE updatepreview
		THISFORM.LockScreen = .T.	
		
		* Local vars:
		local i, iExtraMargin
		local iPrintHeight, iPrintWidth, iOffsetX, iOffsetY
		local iHeaderHeight, iFooterHeight
		local iColHeight, iColWidth, iColSpacing, cColName, iIndex
		
		with THIS
		
			.DetermineScaleFactor()  && used in .FruToPixels()
		
			* Page dimensions:
			*
			.page.Width  = max( .FruToPixels( .pageWidth ),  0)
			.page.Height = max( .FruToPixels( .pageHeight ), 0)
		
		*!*		if .pageOrientation = ORIENTATION_PORTRAIT
		*!*			.page.Width  = .FruToPixels( .pageWidth )
		*!*			.page.Height = .FruToPixels( .pageHeight )
		*!*		else
		*!*			.page.Width  = .FruToPixels( .pageHeight )
		*!*			.page.Height = .FruToPixels( .pageWidth )
		*!*		endif
		
			* Position the page in the preview work area:
			*
			.page.Top  = max( int( .Height/2 - .page.Height/2 ), 0)
			.page.Left = max( int( .Width/2 - .page.Width/2 ),   0) 
			
			* Shadow:
			*
			.shadow.Width  = .page.Width
			.shadow.Height = .page.Height
			.shadow.Top    = .page.Top+2
			.shadow.Left   = .page.Left+2
			
			* Show the unprintable margins if required:
			* margins are in 
			* 
			.page.marginBox.Left    = max( .FruToPixels(.marginLeft), 0)
			.page.marginBox.Top     = max( .FruToPixels(.marginTop),  0)
			.page.marginBox.Width   = .page.Width  - (.page.marginBox.Left * 2)
			.page.marginBox.Height  = .page.Height - (.page.marginBox.Top * 2)
			.page.marginBox.Visible = .printablePageOnly
		
			* Show the extra left margin if required:
		
			if .extraLeftMargin > 0
				iExtraMargin = max( .FruToPixels( .extraLeftMargin ), 0)
				
				if .printablePageOnly
					.page.extraMargin.Height = .page.marginBox.Height
					.page.extraMargin.Top    = .page.marginBox.Top
					.page.extraMargin.Left   = .page.marginBox.Left + m.iExtraMargin
				else
					.page.extraMargin.Height = .page.Height
					.page.extraMargin.Top    = 0
					.page.extraMargin.Left   = m.iExtraMargin
				endif		
				.page.extraMargin.Visible = .T.
			else
				iExtraMargin = 0
				.page.extraMargin.Visible = .F.
			endif
		
			* Printable dimensions:
			*
			if .printablePageOnly
				iPrintHeight = .page.marginBox.Height
				iPrintWidth  = .page.marginBox.Width - m.iExtraMargin
				iOffsetX     = .page.marginBox.Left + m.iExtraMargin
				iOffsetY     = .page.marginBox.Top
		
				* Cosmetic adjustment:
				* it looks better if it doesn't write over the page borders:
				*
				iPrintWidth = m.iPrintWidth - 0 && 1
			else
				iPrintHeight = .page.Height
				iPrintWidth  = .page.Width - m.iExtraMargin 
				iOffsetX     = m.iExtraMargin 
				iOffsetY     = 0
		
				* Cosmetic adjustment:
				* it looks better if it doesn't write over the page borders:
				*
				iPrintWidth = m.iPrintWidth - 1 && 2
			endif
			
			
		
			* How many columns?
			*
			do case
			case .page.columnCount < .columnCount
				* add columns:
				for i = .page.columnCount+1 to .columnCount
					cColName = "col" + trans(m.i)
					.page.newObject( m.cColName, "shpPreviewColumn","frxPanels.vcx" )
					.page.columnCount = .page.columnCount+1
				endfor
					
			case .page.columnCount > .columnCount
				* remove columns:
				for i = .page.columnCount to .columnCount+1 step -1
					cColName = "col" + trans(m.i)
					.page.removeObject( m.cColName )
					.page.columnCount = .page.columnCount-1
				endfor
				
			otherwise	
				* nothing to do
			
			endcase
		
			* Size the columns:
			*
			iHeaderHeight = max( .FruToPixels( .headerHeight ), 0)
			iFooterHeight = max( .FruToPixels( .footerHeight), 0)
		
			iColHeight  = m.iPrintHeight ;
					    - m.iHeaderHeight ;
					    - m.iFooterHeight
			iColHeight  = max( 1, m.iColHeight )
		
		*	iColWidth = m.iPrintWidth
			iColWidth = max( .FruToPixels( .columnWidth ), 0)
		
			if .columnSpacing > 0
				iColSpacing = max(1,.FruToPixels( .columnSpacing ) )
		*		iColWidth   = max(1, m.iColWidth - (m.iColSpacing * (.columnCount-1)) )
				iColWidth   = max(1, m.iColWidth )
			else
				iColSpacing = max(1,0)    && otherwise invisible, not so good
			endif
		*	iColWidth   = int( iColWidth / .columnCount )
			
			* Place and size the columns:
			*
			iIndex = 0
			for i = 3 to .page.controlCount
				oColumn = .page.controls[m.i]
			
				oColumn.Height  = m.iColHeight
				oColumn.Width   = m.iColWidth
				oColumn.Visible = .T.
				oColumn.Top     = m.iOffsetY + m.iHeaderHeight
		
				oColumn.Left = m.iOffsetX ;
							 + int( (m.iColWidth + m.iColSpacing)*m.iIndex)
				iIndex = m.iIndex + 1
			endfor	
				
		endwith
		THISFORM.LockScreen = .F.	
		
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frxexpressioncontrol AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtExpression" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExprBuilder" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getexpression
		*m: readonly_assign
		*m: settextboxreadonly
		*m: value_access
		*m: value_assign
		*p: calledfrom		&& a locale or "called from" ID
		*p: datatype		&& empty: not checked; C:Character; D:Date; T:DateTime; N:Numeric;  F:Float; I:Integer; B:Double; Y:Currency; L:Logical
		*p: readonly		&& Specifies if the user can edit a control, or specifies if a table or view associated with a Cursor object allows updates.
		*p: removecrlf		&& Specifies whether carriage-return line-feeds are retained in the entered expression.
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	calledfrom = ("")		&& a locale or "called from" ID
	datatype = ("")		&& empty: not checked; C:Character; D:Date; T:DateTime; N:Numeric;  F:Float; I:Integer; B:Double; Y:Currency; L:Logical
	Height = 36
	Name = "frxexpressioncontrol"
	removecrlf = .T.		&& Specifies whether carriage-return line-feeds are retained in the entered expression.
	value = ("")		&& Specifies the current state of a control.
	Width = 280

	ADD OBJECT 'cmdExprBuilder' AS cmd WITH ;
		Anchor = 8, ;
		Caption = "...", ;
		Height = 22, ;
		Left = 254, ;
		Name = "cmdExprBuilder", ;
		TabIndex = 2, ;
		Top = 1, ;
		Width = 21, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'txtExpression' AS edt WITH ;
		Anchor = 10, ;
		Height = 22, ;
		Left = 1, ;
		Name = "txtExpression", ;
		ScrollBars = 0, ;
		TabIndex = 1, ;
		Top = 1, ;
		Width = 249, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />
	
	PROCEDURE getexpression
		*-------------------------------------------------------
		* Contract: This control will always be used on 
		* an instance of frxPanel. If it is not, then adjust this
		* code to suit.
		*-------------------------------------------------------
		local cExpression, cDefaultExpr
		cExpression  = ""
		cDefaultExpr = THIS.Value
		
		cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, THIS.dataType, THIS.calledFrom )
		
		THIS.Value = m.cExpression
		
	ENDPROC

	PROCEDURE Init
		THIS.Height = max( THIS.txtExpression.Height, THIS.cmdExprBuilder.Height)+1
		THIS.Resize()
		
	ENDPROC

	PROCEDURE readonly_assign
		lparameters lReadOnly
		
		store m.lReadOnly to ;
			THIS.txtExpression.ReadOnly , ;
			THIS.ReadOnly
			
		store not m.lReadOnly to ;
			THIS.txtExpression.TabStop, ;
			THIS.cmdExprBuilder.Enabled 
		
	ENDPROC

	PROCEDURE Resize
		THIS.txtExpression.Width = THIS.Width - THIS.cmdExprBuilder.Width - (THIS.cmdExprBuilder.Left - THIS.txtExpression.Width)
		THIS.cmdExprBuilder.Left = THIS.Width - THIS.cmdExprBuilder.Width
	ENDPROC

	PROCEDURE settextboxreadonly
		lparameters lReadOnly
		
		store m.lReadOnly to ;
			THIS.txtExpression.ReadOnly 
			
		store not m.lReadOnly to ;
			THIS.txtExpression.TabStop
		
	ENDPROC

	PROCEDURE value_access
		* Remove CR/LF?
		local cText
		cText = rtrim( THIS.txtExpression.Value )
		if THIS.removeCRLF
			cText = chrtran( m.cText,chr(9)+chr(13),"")
		endif
		return m.cText
	ENDPROC

	PROCEDURE value_assign
		lparameters vNewValue
		
		store m.vNewValue to ;
			THIS.txtExpression.Value, ;
			THIS.Value
		
	ENDPROC

	PROCEDURE cmdExprBuilder.Click
		THIS.Parent.getExpression()
	ENDPROC

ENDDEFINE

DEFINE CLASS frxobjectpositioncontrol AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="optionGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="label" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gifFloat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gifTop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gifBottom" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: caption_access
		*m: caption_assign
		*m: loadfromfrx
		*m: savetofrx
		*m: updategif
		*m: value_access
		*m: value_assign
		*p: caption		&& Specifies the text displayed in an object's caption.
		*p: value		&& 1=Float,2=relative to top,3=relative to bottom
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	caption = Object position:		&& Specifies the text displayed in an object's caption.
	Height = 102
	Name = "frxobjectpositioncontrol"
	Style = 3
	value = 2		&& 1=Float,2=relative to top,3=relative to bottom
	Width = 243

	ADD OBJECT 'gifBottom' AS image WITH ;
		Height = 34, ;
		Left = 19, ;
		Name = "gifBottom", ;
		Picture = images\objpos_bottom.gif, ;
		Top = 24, ;
		Width = 31
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'gifFloat' AS image WITH ;
		Height = 34, ;
		Left = 19, ;
		Name = "gifFloat", ;
		Picture = images\objpos_float.gif, ;
		Top = 24, ;
		Width = 31
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'gifTop' AS image WITH ;
		Height = 34, ;
		Left = 19, ;
		Name = "gifTop", ;
		Picture = images\objpos_top.gif, ;
		Top = 24, ;
		Width = 31
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'label' AS lbl WITH ;
		Caption = " Object position ", ;
		Left = 10, ;
		Name = "label", ;
		Style = 3, ;
		Top = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'optionGroup' AS opg WITH ;
		ButtonCount = 3, ;
		Height = 81, ;
		Left = 0, ;
		Name = "optionGroup", ;
		Top = 7, ;
		Width = 240, ;
		Opt1.Caption = "\<Float", ;
		Opt1.Left = 66, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 15, ;
		Opt2.Caption = "Fix relative to \<top of band", ;
		Opt2.Left = 66, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 36, ;
		Opt3.Caption = "Fix relative to \<bottom of band", ;
		Opt3.Left = 66, ;
		Opt3.Name = "Opt3", ;
		Opt3.Top = 57
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />
	
	PROCEDURE caption_access
		*To do: Modify this routine for the Access method
		RETURN THIS.label.Caption
		
	ENDPROC

	PROCEDURE caption_assign
		LPARAMETERS cCaption
		THIS.label.Caption = m.cCaption
		
	ENDPROC

	PROCEDURE enabled_assign
		lparameter lEnabled
		dodefault( m.lEnabled )
		
		THIS.optionGroup.Enabled = m.lEnabled
	ENDPROC

	PROCEDURE loadfromfrx
		* Object Position is weird:
		* Object Position is stored in three logical fields:
		* FLOAT, TOP, BOTTOM. (TFF, FTF, FFT)
		
		do case
		case FLOAT
			THIS.Value = 1
		case TOP
			THIS.Value = 2
		case BOTTOM
			THIS.Value = 3
		otherwise
			*error I guess
			THIS.Value = 2
		endcase
		
	ENDPROC

	PROCEDURE savetofrx
		replace ;
			FLOAT  with (THIS.Value = 1), ;
			TOP    with (THIS.Value = 2), ;
			BOTTOM with (THIS.Value = 3) 
		
	ENDPROC

	PROCEDURE updategif
		do case
		case THIS.optionGroup.Value = 1
			THIS.gifFloat.ZOrder(0)
		case THIS.optionGroup.Value = 2
			THIS.gifTop.ZOrder(0)
		case THIS.optionGroup.Value = 3
			THIS.gifBottom.ZOrder(0)
		endcase
		
	ENDPROC

	PROCEDURE value_access
		return THIS.optionGroup.Value
	ENDPROC

	PROCEDURE value_assign
		lparameters n
		if between( n, 1, 3)
			THIS.optionGroup.Value = n
		else
			THIS.optionGroup.Value = 2
		endif
		this.updateGif()
		
	ENDPROC

	PROCEDURE label.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPOS_LBL_OBJECT_POS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE optionGroup.InteractiveChange
		THIS.Parent.updateGif()
	ENDPROC

	PROCEDURE optionGroup.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPOS_OPT_FLOAT_LOC
		#ENDIF
	ENDPROC

	PROCEDURE optionGroup.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPOS_OPT_FIX_REL_TO_TOP_LOC
		#ENDIF
	ENDPROC

	PROCEDURE optionGroup.Opt3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPOS_OPT_FRX_REL_TO_BOTTOM_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frxpanel AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: addquotes		&& Adds quotes around a string
		*m: canceltofrx		&& put code here that reverts any changes made to the FRX records.
		*m: ensurememberdatastructure
		*m: loadfromfrx		&& put code here that reads the FRX records and assigns values to the contained controls.
		*m: refreshenabledstate		&& place to put code to update the enabled status of controls depending on the value of others.
		*m: savetofrx		&& put code here that saves the data values in the contained controls into the FRX record(s). Return .T. if ok to save and exit, .F. if data does not validate and prevent exit.
		*m: setinitialvalues		&& put code here to set the initil values of each control. Called only during CREATE events to set up the inital state of a record.
		*m: setprotection
		*m: stripquotes		&& removes quotes around a string
		*p: bufferisdirty
		*p: event
		*p: frxcursor		&& Assigned in the parent container's .Execute() method, usually.
		*p: priority
		*p: _memberdata
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	event = .NULL.
	frxcursor = .NULL.		&& Assigned in the parent container's .Execute() method, usually.
	Name = "frxpanel"
	priority = 0
	Style = 3
	Tag = "frx"
	_memberdata = <VFPData>
		<memberdata name="bufferisdirty" type="Property" display="BufferIsDirty"/>
		<memberdata name="event" type="Property" display="Event"/>
		<memberdata name="frxcursor" type="Property" display="FrxCursor"/>
		<memberdata name="priority" type="Property" display="Priority"/>
		<memberdata name="addquotes" type="Method" display="AddQuotes"/>
		<memberdata name="canceltofrx" type="Method" display="CancelToFrx"/>
		<memberdata name="ensurememberdatastructure" type="Method" display="EnsureMemberDataStructure"/>
		<memberdata name="loadfromfrx" type="Method" display="LoadFromFrx"/>
		<memberdata name="refreshenabledstate" type="Method" display="RefreshEnabledState"/>
		<memberdata name="savetofrx" type="Method" display="SaveToFrx"/>
		<memberdata name="setinitialvalues" type="Method" display="SetInitialValues"/>
		<memberdata name="setprotection" type="Method" display="SetProtection"/>
		<memberdata name="stripquotes" type="Method" display="StripQuotes"/>
		</VFPData>
	
	PROCEDURE addquotes		&& Adds quotes around a string
		LPARAMETERS cValue
		
		RETURN ["] + cValue + ["]
		
	ENDPROC

	PROCEDURE canceltofrx		&& put code here that reverts any changes made to the FRX records.
	ENDPROC

	PROCEDURE Destroy
		this.event = null
		this.frxcursor = null
	ENDPROC

	PROCEDURE ensurememberdatastructure
	ENDPROC

	PROCEDURE Init
		THIS.BorderWidth=0
		
	ENDPROC

	PROCEDURE loadfromfrx		&& put code here that reads the FRX records and assigns values to the contained controls.
	ENDPROC

	PROCEDURE refreshenabledstate		&& place to put code to update the enabled status of controls depending on the value of others.
	ENDPROC

	PROCEDURE RightClick
		*-----------------------------------------------------------
		* Defer right-click events to the parent object
		*-----------------------------------------------------------
		THIS.Parent.RightClick()
	ENDPROC

	PROCEDURE savetofrx		&& put code here that saves the data values in the contained controls into the FRX record(s). Return .T. if ok to save and exit, .F. if data does not validate and prevent exit.
	ENDPROC

	PROCEDURE setinitialvalues		&& put code here to set the initil values of each control. Called only during CREATE events to set up the inital state of a record.
	ENDPROC

	PROCEDURE setprotection
		*=======================================================================
		* SetProtection()
		*
		* This container will check to see if the current record in the FRX is
		* marked with "Edit" protection, and if so, configure its controls to be 
		* read-only.
		*
		* Assumes: the frx cursor is the selected alias
		*=======================================================================
		lparameter loContainer
		
		if type("loContainer") <> "O" or isnull(loContainer)
			loContainer = THIS
		endif
			
		if THIS.event.protected
		
			*-----------------------------------------------------------------
			* Check for OBJECT_NO_EDIT protection:
			*-----------------------------------------------------------------
			if THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_OBJECT_NO_EDIT) ;
			or THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_BAND_NO_EDIT) 
		
				local oControl
				for each oControl in loContainer.Controls
		
					*-----------------------------------------------------------------
					* Do whatever it takes to make each control type appropriately
					* read-only. Unfortunately not all control types have a .ReadOnly 
					* property.
					*-----------------------------------------------------------------
					do case
					case inlist( oControl.BaseClass, "Combobox" )
						if type("oControl.TabStop") = "L"
							oControl.TabStop = .F.
						endif
						if type( "oControl.Enabled" ) = "L"
							oControl.Enabled = .F.
						endif
									
					case inlist( oControl.BaseClass, "Pageframe" )
						* recurse into the container
						local loPage
						for each loPage in oControl.Pages
							THIS.setProtection( loPage )
						endfor
						
					case not inlist( oControl.BaseClass, "Label", "Shape", "Page" )
		
						if type("oControl.TabStop") = "L"
							oControl.TabStop = .F.
						endif
						do case
						case type( "oControl.ReadOnly" ) = "L"
							oControl.ReadOnly = .T.
		
						case type( "oControl.Enabled" ) = "L"
							oControl.Enabled = .F.
							
						endcase	
					endcase
				
					if type("oControl.SelectOnEntry")="L"
						oControl.SelectOnEntry = .F.
					endif
				endfor
			endif
		endif
	ENDPROC

	PROCEDURE stripquotes		&& removes quotes around a string
		lparameter lcValue
		
		do case
		case left( m.lcValue, 1 ) == ["] and right( m.lcValue, 1 ) == ["]
			return substr( m.lcValue, 2, len( m.lcValue ) - 2 )
		
		case left( m.lcValue, 1 ) == ['] and right( m.lcValue, 1 ) == [']
			return substr( m.lcValue, 2, len( m.lcValue ) - 2 )
		
		otherwise
			return m.lcValue
		
		endcase
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frxstretchdowncontrol AS cnt OF "frxcontrols.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="optionGroup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="label" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gifNoStretch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gifToTallest" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="gifToHeight" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: loadfromfrx
		*m: savetofrx
		*m: updategif
		*m: value_access
		*m: value_assign
		*p: value		&& Specifies the current state of a control.
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	Height = 92
	Name = "frxstretchdowncontrol"
	Style = 3
	value = 0		&& Specifies the current state of a control.
	Width = 315

	ADD OBJECT 'gifNoStretch' AS image WITH ;
		Height = 34, ;
		Left = 19, ;
		Name = "gifNoStretch", ;
		Picture = images\stretchdown_no.gif, ;
		Top = 24, ;
		Width = 31
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'gifToHeight' AS image WITH ;
		Height = 34, ;
		Left = 19, ;
		Name = "gifToHeight", ;
		Picture = images\stretchdown_band.gif, ;
		Top = 24, ;
		Width = 31
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'gifToTallest' AS image WITH ;
		Height = 34, ;
		Left = 19, ;
		Name = "gifToTallest", ;
		Picture = images\stretchdown_tallest.gif, ;
		Top = 24, ;
		Width = 31
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'label' AS lbl WITH ;
		Caption = " Stretch downwards ", ;
		Left = 10, ;
		Name = "label", ;
		Style = 3, ;
		Top = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'optionGroup' AS opg WITH ;
		ButtonCount = 3, ;
		Height = 79, ;
		Left = 0, ;
		Name = "optionGroup", ;
		Top = 7, ;
		Width = 312, ;
		Opt1.Caption = "\<No stretch", ;
		Opt1.Left = 66, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 14, ;
		Opt2.Caption = "Stretch relative to ta\<llest object in group", ;
		Opt2.Left = 66, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 35, ;
		Opt3.Caption = "Stretch relative to \<height of band", ;
		Opt3.Left = 66, ;
		Opt3.Name = "Opt3", ;
		Opt3.Top = 56
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />
	
	PROCEDURE enabled_assign
		lparameter lEnabled
		dodefault( m.lEnabled )
		
		THIS.optionGroup.Enabled = m.lEnabled
	ENDPROC

	PROCEDURE loadfromfrx
		* Stretch Downwards is stored in two logical fields:
		*
		*  STRETCH, STRETCHTOP
		do case
		case not STRETCH and not STRETCHTOP
			THIS.Value = 1
			
		case not STRETCH and STRETCHTOP
			THIS.Value = 2
			
		case STRETCH and not STRETCHTOP
			THIS.Value = 3
			
		otherwise
			THIS.Value = 1
		endcase
		
	ENDPROC

	PROCEDURE savetofrx
		* Stretch Downwards is stored in two logical fields:
		*  STRETCH, STRETCHTOP
		
		do case
		case THIS.Value = 1
			replace STRETCH with .F., ;
					STRETCHTOP with .F.
					
		case THIS.Value = 2
			replace STRETCH with .F., ;
					STRETCHTOP with .T.
		
		case THIS.Value = 3			
			replace STRETCH with .T., ;
					STRETCHTOP with .F.
		endcase
	ENDPROC

	PROCEDURE updategif
		do case
		case THIS.optionGroup.Value = 1
			THIS.gifNoStretch.ZOrder(0)
		case THIS.optionGroup.Value = 2
			THIS.gifToTallest.ZOrder(0)
		case THIS.optionGroup.Value = 3
			THIS.gifToHeight.ZOrder(0)
		endcase
		
	ENDPROC

	PROCEDURE value_access
		return THIS.optionGroup.Value
	ENDPROC

	PROCEDURE value_assign
		lparameters n
		if between( n, 1, 3)
			THIS.optionGroup.Value = n
		else
			THIS.optionGroup.Value = 2
		endif
		this.updateGif()
	ENDPROC

	PROCEDURE label.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_STRETCH_LBL_STRETCH_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE optionGroup.InteractiveChange
		THIS.Parent.updateGif()
	ENDPROC

	PROCEDURE optionGroup.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_STRETCH_OPT_NO_STRETCH_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE optionGroup.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_STRETCH_OPT_REL_TO_TALLEST_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE optionGroup.Opt3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_STRETCH_OPT_REL_TO_HEIGHT_LOC    
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelabsolutepositioning AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnHeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnWidth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnTop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblHeading" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl6" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: saveexprwidth
	*</DefinedPropArrayMethod>

	Height = 116
	Name = "panelabsolutepositioning"
	Width = 235

	ADD OBJECT 'Lbl4' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Height:", ;
		Left = 127, ;
		Name = "Lbl4", ;
		TabIndex = 7, ;
		Top = 19, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl5' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Width:", ;
		Left = 126, ;
		Name = "Lbl5", ;
		TabIndex = 8, ;
		Top = 64, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl6' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "From page top:", ;
		Left = 15, ;
		Name = "Lbl6", ;
		TabIndex = 9, ;
		Top = 19, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl7' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "From left:", ;
		Left = 15, ;
		Name = "Lbl7", ;
		TabIndex = 10, ;
		Top = 64, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblHeading' AS lbl WITH ;
		Caption = " Size and position in layout ", ;
		Left = 10, ;
		Name = "lblHeading", ;
		Style = 3, ;
		TabIndex = 6, ;
		Top = 1, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 104, ;
		Left = 0, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 231, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'spnHeight' AS spnmeasurementunits WITH ;
		KeyboardLowValue = 0, ;
		Left = 126, ;
		Name = "spnHeight", ;
		TabIndex = 4, ;
		Top = 36, ;
		Width = 88, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnLeft' AS spnmeasurementunits WITH ;
		KeyboardLowValue = 0, ;
		Left = 15, ;
		Name = "spnLeft", ;
		TabIndex = 3, ;
		Top = 81, ;
		Width = 88, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnTop' AS spnmeasurementunits WITH ;
		KeyboardLowValue = 0, ;
		Left = 15, ;
		Name = "spnTop", ;
		TabIndex = 2, ;
		Top = 36, ;
		Width = 88, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnWidth' AS spnmeasurementunits WITH ;
		KeyboardLowValue = 0, ;
		Left = 126, ;
		Name = "spnWidth", ;
		TabIndex = 5, ;
		Top = 81, ;
		Width = 88, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			local iUnits
			iUnits = THIS.frxCursor.getReportAttribute("UNITS")
		
			store m.iUnits to ;
				THIS.spnHeight.units,;
				THIS.spnWidth.units, ;
				THIS.spnTop.units, ;
				THIS.spnLeft.units
		
			THIS.spnTop.Value    = VPOS
			THIS.spnLeft.Value   = HPOS 
			THIS.spnHeight.Value = HEIGHT
		
			do case
			case THIS.event.eventType = FRX_BLDR_EVENT_OBJECTCREATE and ;
				 THIS.event.objType   = FRX_OBJTYP_FIELD
				 
				*-----------------------------------------------------------
				* We are adding a Field/Expression object.
				* Do not specifiy a width, rather, determine the 
				* default width from the expression itself. 
				* See frxPanel.vcx/panelFieldExpr::SaveToFrx(), SaveExprWidth()
				*-----------------------------------------------------------
				THIS.spnWidth.Value  = 0
				THIS.spnWidth.Enabled  = .F.
		
			otherwise
		
				THIS.spnWidth.Value  = WIDTH
		
			endcase
			
		*	THIS.lblHeading.Caption = THIS.lblHeading.Caption + "(" ;
		*	                        + THIS.frxCursor.getReportAttribute("UNITS",1) ; 
		*                           + ") "
		                            
			*
			THIS.RefreshEnabledState()
			
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE refreshenabledstate
		if inlist( THIS.event.OBJTYPE, FRX_OBJTYP_LABEL )
			THIS.spnHeight.Enabled = .F.
			THIS.spnWidth.Enabled  = .F.
		endif
	ENDPROC

	PROCEDURE saveexprwidth
	ENDPROC

	PROCEDURE savetofrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			*-----------------------------------------------------------
			* Absolute positioning: Save the location:
			*-----------------------------------------------------------
			replace VPOS	with THIS.spnTop.Value, ;
					HPOS 	with THIS.spnLeft.Value 
			
			do case
			case THIS.event.eventType = FRX_BLDR_EVENT_OBJECTCREATE and ;
				 THIS.event.objType   = FRX_OBJTYP_FIELD
				*-----------------------------------------------------------
				* We are ADDing a Field/Expression object.
				* Under these circumstances, the spnWidth control is disabled
				* because the panelFieldExpr::SaveExprWidth() method will
				* update the width of the control.
				* So, do not set width for new FieldExpressions
				*-----------------------------------------------------------
		
			case THIS.event.ObjType = FRX_OBJTYP_LABEL
				*-----------------------------------------------------------
				* Do not set height, width for text objects:
				*-----------------------------------------------------------
			
			otherwise
				*-----------------------------------------------------------
				* Update the height, width:
				*-----------------------------------------------------------
				replace HEIGHT 	with max( THIS.spnHeight.Value, PIXEL_WIDTH_IN_FRUS );
						WIDTH	with max( THIS.spnWidth.Value,  PIXEL_WIDTH_IN_FRUS ) 
		
			endcase
		
			return .T.
		endif
		
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.spnHeight.Value       = 0
		THIS.spnWidth.Value        = 0
		THIS.spnTop.Value          = 0
		THIS.spnLeft.Value         = 0
		
		
	ENDPROC

	PROCEDURE setprotection
		dodefault()
		
		if THIS.event.protected
		
			if THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_OBJECT_LOCK )
		
				*--------------------------------------------------------------
				* do not allow the size/position of the object to be changed:
				*--------------------------------------------------------------
				store .T. to ;
					THIS.spnTop.ReadOnly, ;
					THIS.spnLeft.ReadOnly, ;
					THIS.spnHeight.ReadOnly, ;
					THIS.spnWidth.ReadOnly
		
			endif
		endif
	ENDPROC

	PROCEDURE Lbl4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ABSPOS_LBL_HEIGHT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl5.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ABSPOS_LBL_WIDTH_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl6.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ABSPOS_LBL_PAGE_TOP_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl7.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ABSPOS_LBL_LEFT_LOC
		#ENDIF
		
		
	ENDPROC

	PROCEDURE lblHeading.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_ABSPOS_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelband AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblHeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnHeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkConstantHeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="SHP1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRunExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expEntry" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expExit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOnEntry" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblOnExit" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 197
	Name = "panelband"
	Width = 306

	ADD OBJECT 'chkConstantHeight' AS chk WITH ;
		Alignment = 0, ;
		Caption = "C\<onstant band height", ;
		Left = 0, ;
		Name = "chkConstantHeight", ;
		TabIndex = 3, ;
		Top = 48, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'expEntry' AS frxexpressioncontrol WITH ;
		calledfrom = BandOnEntryExpression, ;
		Height = 23, ;
		Left = 12, ;
		Name = "expEntry", ;
		TabIndex = 6, ;
		Top = 109, ;
		ZOrderSet = 5, ;
		TXTEXPRESSION.Name = "TXTEXPRESSION", ;
		CMDEXPRBUILDER.Name = "CMDEXPRBUILDER"
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'expExit' AS frxexpressioncontrol WITH ;
		calledfrom = BandOnExitExpression, ;
		Height = 23, ;
		Left = 12, ;
		Name = "expExit", ;
		TabIndex = 8, ;
		Top = 157, ;
		ZOrderSet = 6, ;
		TXTEXPRESSION.Name = "TXTEXPRESSION", ;
		CMDEXPRBUILDER.Name = "CMDEXPRBUILDER"
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'lblHeight' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Height:", ;
		Left = 1, ;
		Name = "lblHeight", ;
		TabIndex = 1, ;
		Top = 1, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblOnEntry' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "On \<entry:", ;
		Left = 12, ;
		Name = "lblOnEntry", ;
		TabIndex = 5, ;
		Top = 93, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblOnExit' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "On e\<xit:", ;
		Left = 12, ;
		Name = "lblOnExit", ;
		TabIndex = 7, ;
		Top = 141, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblRunExpr' AS lbl WITH ;
		Caption = " Run expression ", ;
		Left = 8, ;
		Name = "lblRunExpr", ;
		Style = 3, ;
		TabIndex = 4, ;
		Top = 72, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'SHP1' AS shp WITH ;
		BackStyle = 0, ;
		Height = 108, ;
		Left = 0, ;
		Name = "SHP1", ;
		Style = 3, ;
		Top = 80, ;
		Width = 300, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'spnHeight' AS spnmeasurementunits WITH ;
		highvaluefru = 200000, ;
		Left = 0, ;
		Name = "spnHeight", ;
		SpinnerHighValue = 20.00, ;
		TabIndex = 2, ;
		Top = 18, ;
		Width = 100, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />
	
	PROCEDURE Init
		dodefault()
		THIS.expEntry.Resize()
		THIS.expExit.Resize()  
	ENDPROC

	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			* Height is stored in HEIGHT in FRUs
			
			THIS.spnHeight.Value = HEIGHT
			THIS.spnHeight.Units = THIS.frxcursor.getReportAttribute("UNITS") 
		
			* Constant Band height is PLAIN. 
			* The control is disabled if multiple columns 
			* and print order is snaked (left-right)
		
			if THIS.frxCursor.getReportAttribute("MULTICOLUMN") and ;
			   THIS.frxCursor.getReportAttribute("SNAKED_COLUMNS")
		
				THIS.chkConstantHeight.Value = .T.
				THIS.chkConstantHeight.Enabled = .F.		
		
			else		
				THIS.chkConstantHeight.Value = PLAIN
			endif
			
			* Run Expression:
			* On Entry: TAG
			* On Exit: TAG2
		
			THIS.expEntry.Value = alltrim(TAG)
			THIS.expExit.Value  = alltrim(TAG2)
		
			*-------------------------------------
			* Go to protected mode, if necessary:
			*-------------------------------------
			THIS.setProtection()
		
			*-------------------------------------
			* Some additional protection:	
			*-------------------------------------
			if THIS.event.protected
		
				*-----------------------------------------------------------------
				* Check for BAND_NO_RESIZE protection:
				*-----------------------------------------------------------------
				if THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_BAND_NO_RESIZE)
		
					THIS.spnHeight.ReadOnly = .T.
		
				endif
			endif	
		endif
	ENDPROC

	PROCEDURE savetofrx
		* THIS DEFAULT CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			*-------------------------------------------------------------
			* 0. Refresh the store the current bands and objects	
			*-------------------------------------------------------------
			THIS.frxCursor.createObjectCursor()
		
			*-------------------------------------------------------------
			* Height is stored in HEIGHT in FRUs
			* Don't save constant band height if the control is disabled:
			*-------------------------------------------------------------
			if not THIS.chkConstantHeight.Enabled
				replace ;
					HEIGHT 		with THIS.spnHeight.Value, ;
					TAG			with THIS.expEntry.Value, ;
					TAG2		with THIS.expExit.Value
			else		
				replace ;
					HEIGHT 		with THIS.spnHeight.Value, ;
					PLAIN		with THIS.chkConstantHeight.Value, ;
					TAG			with THIS.expEntry.Value, ;
					TAG2		with THIS.expExit.Value
			endif
		
			*-------------------------------------------------------------
			* 7. Regenerate the band cursor from the new FRX:
			*-------------------------------------------------------------
			THIS.frxCursor.createBandCursor()
			
			*-------------------------------------------------------------
			* 8 . Resync the object absolute positions relative to the bands:
			*-------------------------------------------------------------
			select (THIS.Tag)
			THIS.frxCursor.synchObjectPositions()
		
			return .T.
		endif
		return .F.
	ENDPROC

	PROCEDURE chkConstantHeight.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BAND_CHK_CONSTANT_HEIGHT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblHeight.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BAND_LBL_HEIGHT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblOnEntry.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BAND_LBL_ONENTRY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblOnExit.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BAND_LBL_ONEXIT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblRunExpr.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BAND_LBL_RUN_EXPR_LOC
		#ENDIF
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelbandprotection AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkBandEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkBandResize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 127
	Name = "panelbandprotection"
	Width = 333

	ADD OBJECT 'chkBandEdit' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Properties dialog box is not available", ;
		Left = 24, ;
		Name = "chkBandEdit", ;
		TabIndex = 2, ;
		Top = 91
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkBandResize' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Band cannot be resized", ;
		Left = 24, ;
		Name = "chkBandResize", ;
		TabIndex = 1, ;
		Top = 68
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		Caption = " When in PROTECTED mode ", ;
		Left = 11, ;
		Name = "Lbl1", ;
		Style = 3, ;
		TabIndex = 3, ;
		Top = 1, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "The following restrictions will apply to this band when the layout is modified in protected mode:", ;
		Height = 43, ;
		Left = 8, ;
		Name = "Lbl2", ;
		TabIndex = 4, ;
		Top = 21, ;
		Width = 300, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 108, ;
		Left = 1, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 319, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE loadfromfrx
		if used(this.Tag)
		
			select (this.Tag)
		
			local iProtection
			iProtection = this.frxcursor.BinstringToInt( ORDER ) 
			
			THIS.chkBandEdit.Value    = bittest( m.iProtection , FRX_PROTECT_BAND_NO_EDIT)
			THIS.chkBandResize.Value  = bittest( m.iProtection , FRX_PROTECT_BAND_NO_RESIZE)
			
			THIS.SetProtection()
			
		endif	
		
	ENDPROC

	PROCEDURE savetofrx
		if used(this.Tag)
			select (this.Tag)
			
			local iProtection
			iProtection = 0
		
			if THIS.chkBandEdit.Value
				iProtection = bitset( iProtection, FRX_PROTECT_BAND_NO_EDIT)
			endif
			if THIS.chkBandResize.Value
				iProtection = bitset( iProtection, FRX_PROTECT_BAND_NO_RESIZE)
			endif
			replace ORDER with THIS.frxCursor.IntToBinstring( m.iProtection )
		endif	
		return .T.
	ENDPROC

	PROCEDURE setprotection
		lparameter loContainer
		if THIS.event.protected
			
			THIS.Visible = .F.
		
		endif
	ENDPROC

	PROCEDURE chkBandEdit.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BANDPROT_CHK_NO_PROPS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkBandResize.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BANDPROT_CHK_NO_RESIZE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BANDPROT_LBL_CAPTION_LOC
		#ENDIF
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_BANDPROT_LBL_HELP_TEXT_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelcalculate AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cbocalculate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboReset" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl6" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 120
	Name = "panelcalculate"
	Width = 301

	ADD OBJECT 'Cbocalculate' AS cbocalculate WITH ;
		Left = 12, ;
		Name = "Cbocalculate", ;
		TabIndex = 3, ;
		Top = 38, ;
		Width = 240, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboReset' AS cbocalcreset WITH ;
		Left = 12, ;
		Name = "cboReset", ;
		TabIndex = 5, ;
		Top = 81, ;
		Width = 240, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="combobox" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		Caption = " Calculate ", ;
		Left = 10, ;
		Name = "Lbl3", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl5' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Reset based on:", ;
		Left = 12, ;
		Name = "Lbl5", ;
		TabIndex = 4, ;
		Top = 64, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl6' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Calculation type:", ;
		Left = 12, ;
		Name = "Lbl6", ;
		TabIndex = 2, ;
		Top = 21, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp3' AS shp WITH ;
		Height = 105, ;
		Left = 1, ;
		Name = "Shp3", ;
		Style = 3, ;
		Top = 9, ;
		Width = 275, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE loadfromfrx
		* select the alias stored in the TAG property:
		*
		if not empty( THIS.Tag)
			select (THIS.Tag)
		
			local curRec, iDetailCount, iGroupCount, oBand
			curRec = recno()
			iDetailCount = 1
			iGroupCount  = 0
		
			*--------------------------------------------------------------
			* Calculation Type:
			*--------------------------------------------------------------
			THIS.cboCalculate.Value = (TOTALTYPE + 1)
			
			*--------------------------------------------------------------
			* ask the Reset Based On combo to figure out its options:
			*--------------------------------------------------------------
			THIS.frxCursor.createCalcResetOnCursor()
			THIS.cboReset.LoadFromFrx()	
		
			*----------------------------------------------------------------
			* Assign a value to Reset based On:
			*----------------------------------------------------------------
			if TOTALTYPE > 0
				* Set the item id to the value of RESETTOTAL in the FRX
				THIS.cboReset.ListItemId = RESETTOTAL
			else	
				*----------------------------------------------------------------
				* If TOTALTYPE = 0 then RESETTOTAL is:
				*   displayed as equal to the innermost band ; but stored as 1.
				* Even if the user specified something different, the value will 
				* revert to 1. 
				* This is different than Report Variables, where RESETTOTAL=1 
				* genuinely means "End of Report".
				*----------------------------------------------------------------
			
				*----------------------------------------------------------------
				* If the report has multi-detail bands, then the "innermost band" 
				* is the detail band in which the Field object resides
				*----------------------------------------------------------------
				count for OBJTYPE = FRX_OBJTYP_BAND and ;
				          OBJCODE = FRX_OBJCOD_DETAIL ;
					to iDetailCount
					
				if m.iDetailCount = 1
					count for OBJTYPE = FRX_OBJTYP_BAND and ;
					          OBJCODE = FRX_OBJCOD_GROUPHEADER ;
						to iGroupCount
				endif
				go (m.curRec)
			
				do case
				case m.iDetailCount > 1		
					*----------------------------------------------------------------
					* set the "Reset on" value to one that is 
					* equivalent to the current object's band:
					*----------------------------------------------------------------
					oBand = THIS.frxCursor.getBandFor( UNIQUEID )
					THIS.cboReset.ListItemId = oBand.RESETTOTAL
		
				case m.iGroupCount > 0 
					*----------------------------------------------------------------
					* set the "Reset on" value to on that is 
					* equivalent to the current object's band:
					*----------------------------------------------------------------
					THIS.cboReset.ListItemId = FRX_RESETTOTAL_GROUP_OFFSET + m.iGRoupCount
		
				otherwise
					THIS.cboReset.ListItemId = FRX_RESETTOTAL_ENDOFREPORT		
		
				endcase
				THIS.cboReset.Enabled    = .F.
			endif
			
			*--------------------------------------------------------------
			* Go to protected mode, if necessary:
			*--------------------------------------------------------------
			THIS.setProtection()
			
		endif
	ENDPROC

	PROCEDURE savetofrx
		*=====================================================================
		* SaveToFrx()
		*
		* Save the changes back to the FRX record(s). Return .F. if validation fails
		*=====================================================================
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(this.Tag)
			select (this.Tag)
		endif
		
		*--------------------------------------------------------------
		* Calculation type:
		*--------------------------------------------------------------
		
		replace TOTALTYPE with THIS.cboCalculate.Value - 1
		
		*--------------------------------------------------------------
		* Reset based on:
		*
		* For Field/Expressions, if TOTALTYPE = 0 then RESETTOTAL is 
		* always DISPLAYED AS equal to the innermost band, but stored
		* as 1. Even if you select something different, the value will 
		* revert to 1. 
		* (This is different than Report Variables, where RESETTOTAL=1 
		* genuinely means "End of Report".)
		*--------------------------------------------------------------
		if THIS.cboCalculate.Value = FRX_TOTALTYPE_NONE+1 
			REPLACE ;
				TOTALTYPE	WITH FRX_TOTALTYPE_NONE, ;
				RESETTOTAL	WITH FRX_RESETTOTAL_ENDOFREPORT
		else
			REPLACE ;
				TOTALTYPE	WITH (THIS.cboCalculate.Value - 1), ;
				RESETTOTAL	WITH (THIS.cboReset.ListItemId) 
		endif
		
		return .T.
	ENDPROC

	PROCEDURE Cbocalculate.InteractiveChange
		THIS.Parent.cboReset.Enabled = (THIS.Value > 1)
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CALCULATE_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl5.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CALCULATE_LBL_RESET_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl6.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CALCULATE_LBL_TYPE_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelcommentuser AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgComment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCommentText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdComment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUserCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblUserText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCommentCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgUser" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*p: commenttext
		*p: usertext
	*</DefinedPropArrayMethod>

	commenttext = ("")
	Height = 170
	Name = "panelcommentuser"
	usertext = ("")
	Width = 313

	ADD OBJECT 'cmdComment' AS cmd WITH ;
		Caption = "Edit comment...", ;
		Left = 186, ;
		Name = "cmdComment", ;
		TabIndex = 3, ;
		Top = 60, ;
		Width = 120, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdUser' AS cmd WITH ;
		Caption = "Edit user data...", ;
		Left = 186, ;
		Name = "cmdUser", ;
		TabIndex = 6, ;
		Top = 140, ;
		Width = 120, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'imgComment' AS image WITH ;
		Height = 32, ;
		Left = 8, ;
		Name = "imgComment", ;
		Picture = images\comments.bmp, ;
		Top = 20, ;
		Width = 32, ;
		ZOrderSet = 10
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgUser' AS image WITH ;
		Height = 32, ;
		Left = 8, ;
		Name = "imgUser", ;
		Picture = images\userdata.bmp, ;
		Top = 104, ;
		Width = 32, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblCommentCaption' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = "Comment ", ;
		Left = 2, ;
		Name = "lblCommentCaption", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblCommentText' AS lbl WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "see OTHER_EDIT_COMMENT_LOC", ;
		Height = 69, ;
		Left = 56, ;
		Name = "lblCommentText", ;
		TabIndex = 2, ;
		Top = 17, ;
		Width = 248, ;
		WordWrap = .T., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblUserCaption' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = "User data ", ;
		Left = 2, ;
		Name = "lblUserCaption", ;
		Style = 3, ;
		TabIndex = 4, ;
		Top = 82, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblUserText' AS lbl WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "see OTHER_EDIT_USER_LOC", ;
		Height = 68, ;
		Left = 58, ;
		Name = "lblUserText", ;
		TabIndex = 5, ;
		Top = 98, ;
		Width = 248, ;
		WordWrap = .T., ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 2, ;
		Left = 5, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 9, ;
		Width = 300, ;
		ZOrderSet = 11
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpUser' AS shape WITH ;
		Height = 2, ;
		Left = 5, ;
		Name = "shpUser", ;
		SpecialEffect = 0, ;
		Top = 90, ;
		Width = 300, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			*--------------------------------------------
			* Comment:
			*--------------------------------------------
			this.commentText = trim(COMMENT)
			if not empty( THIS.commentText )
				this.lblCommentText.Caption = left(THIS.commentText,245)
			else
				this.lblCommentText.Caption = OTHER_EDIT_COMMENT_LOC
			endif
		
			*--------------------------------------------
			* User:
			*--------------------------------------------
			this.userText = trim(USER)
			if not empty( THIS.userText )
				this.lblUserText.Caption = left(THIS.userText,245)
			else
				this.lblUserText.Caption = OTHER_EDIT_USER_LOC
			endif
		
			*--------------------------------------------
			* Go to protected mode, if necessary:
			*--------------------------------------------
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE savetofrx
		* Comment & User:
		*
		replace COMMENT with trim(this.commentText) , ;
				USER    with trim(this.userText) ;
			in (this.Tag)
		
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.edtComment.Value   = ""
		THIS.edtUser.Value      = ""
	ENDPROC

	PROCEDURE setprotection
		if THIS.event.protected
			
			* Make the USER field invisible in protected mode:
			
			store .F. to ;
				THIS.shpUser.Visible, ;
				THIS.lblUserCaption.Visible, ;
				THIS.lblUserText.Visible, ;
				THIS.imgUser.Visible, ;
				THIS.cmdUser.Visible
				
			* OBJECT_NO_EDIT protection:
			*
			if THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_OBJECT_NO_EDIT) or ;
			   THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_BAND_NO_EDIT)
			
				THIS.lblCommentText.Caption = THIS.commentText
				THIS.cmdComment.Visible = .F.
						
			endif
		endif
	ENDPROC

	PROCEDURE cmdComment.Click
		*----------------------------------------------------------------
		* Launch a multi-line edit window
		*----------------------------------------------------------------
		local x
		x = newobject("frxMemoEditForm","frxBuilder")
		with x
			.Caption 		= THISFORM.Caption + " " + THIS.Parent.lblCommentCaption.Caption
			.FixedWidthFont = .F.
			.Text 			= THIS.Parent.CommentText
			.setHelperText(OTHER_EDIT_COMMENT_LOC)
			.Execute()
		endwith
		
		THIS.Parent.CommentText = x.Text
		
		if not empty( THIS.Parent.CommentText )
			THIS.Parent.lblCommentText.Caption = left(x.Text,245)
		else
			THIS.Parent.lblCommentText.Caption = OTHER_EDIT_COMMENT_LOC 
		endif
		return
		
		
	ENDPROC

	PROCEDURE cmdComment.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_COMMENTUSER_CMD_EDIT_COMMENT_LOC 
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdUser.Click
		*----------------------------------------------------------------
		* Launch a multi-line edit window
		*----------------------------------------------------------------
		local x
		x = newobject("frxMemoEditForm","frxBuilder")
		with x
			.Caption 		= THISFORM.Caption + " " + THIS.Parent.lblUserCaption.Caption
			.FixedWidthFont = .T.
			.Text 			= THIS.Parent.UserText
			.setHelperText(OTHER_EDIT_USER_LOC)
			.Execute()
		endwith
		
		THIS.Parent.UserText = x.Text
		
		if not empty( THIS.Parent.UserText )
			THIS.Parent.lblUserText.Caption = left(x.Text,245)
		else
			THIS.Parent.lblUserText.Caption = OTHER_EDIT_USER_LOC 
		endif
		return
		
		
	ENDPROC

	PROCEDURE cmdUser.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_COMMENTUSER_CMD_EDIT_USER_LOC    
		#ENDIF
		
	ENDPROC

	PROCEDURE lblCommentCaption.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_COMMENTUSER_LBL_COMMENT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblCommentText.Init
		THIS.Caption = OTHER_EDIT_COMMENT_LOC
	ENDPROC

	PROCEDURE lblUserCaption.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_COMMENTUSER_LBL_USERDATA_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblUserText.Init
		THIS.Caption = OTHER_EDIT_USER_LOC
	ENDPROC

ENDDEFINE

DEFINE CLASS panelde AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkPrivateSession" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgDeSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLoad" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClass" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClasslib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkUseFullPath" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: getmethodcode
		*m: loaddataenv
		*p: frxdeloader
	*</DefinedPropArrayMethod>

	frxdeloader = .NULL.
	Height = 239
	Name = "panelde"
	Width = 413

	ADD OBJECT 'chkPrivateSession' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Report uses a private data session", ;
		Height = 15, ;
		Left = 8, ;
		Name = "chkPrivateSession", ;
		TabIndex = 9, ;
		Top = 220, ;
		Width = 185, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkUseFullPath' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use full path", ;
		Height = 15, ;
		Left = 41, ;
		Name = "chkUseFullPath", ;
		TabIndex = 3, ;
		Top = 69, ;
		Value = .T., ;
		Width = 78, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLoad' AS cmd WITH ;
		Caption = "Select...", ;
		Left = 40, ;
		Name = "cmdLoad", ;
		TabIndex = 4, ;
		Top = 91, ;
		Width = 104
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Caption = " Load data environment", ;
		Left = 7, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 0, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LBL3' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Class:", ;
		Left = 8, ;
		Name = "LBL3", ;
		TabIndex = 5, ;
		Top = 122
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl4' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Class Library / Source:", ;
		Left = 8, ;
		Name = "Lbl4", ;
		TabIndex = 7, ;
		Top = 165
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'opgDeSource' AS opg WITH ;
		ButtonCount = 2, ;
		Height = 206, ;
		Left = 0, ;
		Name = "opgDeSource", ;
		TabIndex = 2, ;
		Top = 6, ;
		Value = 2, ;
		Width = 404, ;
		Opt1.Caption = "Copy from another report file", ;
		Opt1.Left = 9, ;
		Opt1.Name = "Opt1", ;
		Opt1.TabIndex = 1, ;
		Opt1.Top = 17, ;
		Opt1.Value = 0, ;
		Opt2.Caption = "Link to a DataEnvironment class", ;
		Opt2.Left = 9, ;
		Opt2.Name = "Opt2", ;
		Opt2.TabIndex = 2, ;
		Opt2.Top = 38, ;
		Opt2.Value = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'txtClass' AS txt WITH ;
		Left = 8, ;
		Name = "txtClass", ;
		ReadOnly = .T., ;
		TabIndex = 6, ;
		Themes = .F., ;
		Top = 138, ;
		Width = 384
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtClasslib' AS txt WITH ;
		Left = 8, ;
		Name = "txtClasslib", ;
		ReadOnly = .T., ;
		TabIndex = 8, ;
		Themes = .F., ;
		Top = 181, ;
		Width = 384
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE getmethodcode
	ENDPROC

	PROCEDURE Init
		dodefault()
		
		THIS.frxDeLoader = newobject("frxDeLoader", FRXUTILS_PRG_CLASSLIB )
	ENDPROC

	PROCEDURE loaddataenv
		*------------------------------------------
		* Shut the data environment window if its open:
		*---------------------------------------
		if wvisible("Data Environment")
			release Window ("Data Environment")
		endif
		
		local iResult
		do case
		*------------------------------------------
		* copy from another report file
		*---------------------------------------
		case THIS.opgDeSource.Value = 1
		
			*---------------------------------------
			* choose a report
			* getfile("FRX"), using the directory
			* from the previously saved file:
			*---------------------------------------
			local cRepfile
			cRepFile = ""
			if not empty( THIS.txtClassLib.Value )
				local cCurDir, cFrxDir
				cCurDir = set("DEFAULT")+sys(2003)
				cFrxDir = justpath(THIS.txtClassLib.Value)
				if upper(m.cCurDir) <> upper(m.cFrxDir)
					*---------------------------------------
					* change directory before prompting:
					*---------------------------------------
					if directory( m.cFrxDir )
						set default to (m.cFrxDir)
						cRepFile = getfile("FRX")
						set default to (m.cCurDir)
					endif
				endif
			else
				cRepFile = getfile("FRX")
			endif
		
			if not empty( m.cRepFile )
		
				if messagebox( LOAD_DE_CONFIRMATION_LOC, 4+48, DEFAULT_MBOX_TITLE_LOC ) = 6
		
					select (THIS.Tag)
					
					iResult = THIS.frxDeLoader.LoadFromReport( m.cRepFile )
					do case
					case m.iResult = 0
						
						THIS.txtClass.Value    = ""
						THIS.txtClasslib.Value = m.cRepFile
		
						=messagebox( LOAD_DE_SUCCESS_LOC, 0+64, DEFAULT_MBOX_TITLE_LOC )
		
					otherwise
						=messagebox( LOAD_DE_ERROR_LOC, 0+64, DEFAULT_MBOX_TITLE_LOC )
					
					endcase
				else
					* user decided not to go ahead 
				endif
			else
				* no FRX file selected to copy from
			endif
		
			
		*------------------------------------------
		* From class (DE or form)
		*------------------------------------------
		case THIS.opgDeSource.Value = 2
		
			*------------------------------------------
			* choose a class. Can default to current.
			*-----------------------------------
			dimension de[2]
			local lContinue
			*---------------------------------------
			* Fix for SP1: Do not use the filename if it 
			*              is not appropriate type
			*---------------------------------------
			if not empty( THIS.txtClassLib.Value ) and ;
			   file( alltrim(THIS.txtClassLib.Value) ) and ;
			   upper(justext( THIS.txtClassLib.Value )) = "VCX"
			   
				lContinue = agetclass( de, THIS.txtClassLib.Value )
			else
				lContinue = agetclass( de )
			endif	
			
			do case
			case empty( de[1] )
				*------------------------------------------
				* No class selected; abandon operation.
				*------------------------------------------
				m.lContinue = .F.
			
			case empty( de[2] )
				*------------------------------------------
				* Class selected was not a DataEnvironment:
				*------------------------------------------
				=messagebox( LOAD_DE_INVALID_CLASS_LOC, 0+48, DEFAULT_MBOX_TITLE_LOC )
				m.lContinue = .F.
		
			endcase
		
			if m.lContinue
		
				*-----------------------------------------------------------------
				* Make sure they know this will replace the current environment:
				*-----------------------------------------------------------------
				if messagebox( LOAD_DE_CONFIRMATION_LOC, 4+48, DEFAULT_MBOX_TITLE_LOC ) = 6
		
					*------------------------------------------
					* Fix for SP1: Option to strip paths
					*------------------------------------------
					if THIS.chkUseFullPath.Value = .T.
						THIS.frxDeLoader.pathMode = 0 && default
					else
						* see frxutils.prg!frxDeLoader for full options
						THIS.frxDeLoader.pathMode = 2 
					endif
		
					* The specified class library may not be in scope so 
					* we must pass this method the full path:
					
					local iResult
					iResult = THIS.frxDeLoader.LoadFromClass( de[2], de[1] )
		
					do case
					case m.iResult = 0
						*------------------------------------------
						* Update the memberdata:
						* Reset the panel:
						*------------------------------------------
						THIS.txtClass.Value    = de[2]
						
						if THIS.chkUseFullPath.Value = .T.
							THIS.txtClasslib.Value = de[1]
						else			
							* use relative path? lower(sys(2014, de[1] ))
							* or just strip it:
							THIS.txtClasslib.Value = justfname( de[1] )
						endif
						
						=messagebox( LOAD_DE_SUCCESS_LOC, 0+64, DEFAULT_MBOX_TITLE_LOC )
					
					case m.iResult = 1
						*------------------------------------------
						* Error occurred instantiating the class:
						*------------------------------------------
						* Fix for SP1: Additional error info:
						=messagebox( LOAD_DE_ERR_INSTANTIATING_CLASS_LOC + ;
						             chr(13) + ;
						             "[" + THIS.frxDeLoader.errorMessage + "]", ;
						             0+48, DEFAULT_MBOX_TITLE_LOC )
						return
		
					case m.iResult = 2
						*------------------------------------------
						* Class selected was not a DataEnvironment:
						*------------------------------------------
						=messagebox( LOAD_DE_INVALID_CLASS_LOC, 0+48, DEFAULT_MBOX_TITLE_LOC )
						return
		
					endcase				
				endif
				
			endif		
			
		endcase
		
		THIS.bufferIsDirty = .T.
		
		return
		
		
	ENDPROC

	PROCEDURE loadfromfrx
		if not used("memberdata")
			return
		endif
		
		local curSel
		curSel = select(0)
		select memberdata
		locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			   and empty(NAME)
		if found()
			THIS.txtClass.Value    = trim(DECLASS)
			THIS.txtClassLib.Value = trim(DECLASSLIB)
		else
			* should be at EOF, empty values:
			THIS.txtClass.Value    = trim(DECLASS)
			THIS.txtClassLib.Value = trim(DECLASSLIB)
		endif	   
		select (m.curSel)
		
		if not empty(THIS.Tag)
		
			*-----------------------------------------------------
			* Other properties are stored in the DE record of the FRX
			*-----------------------------------------------------
			select (THIS.Tag)
			locate for OBJTYPE = FRX_OBJTYP_DATAENV
			if found()
		
				* Use Private Data Session: ENVIRON in the Data Environment record 25.
				*
				THIS.chkPrivateSession.Value = ENVIRON
		
				* Option:
				if not empty( THIS.txtClass.Value )
					THIS.opgDeSource.Value = 2
				else
					THIS.opgDeSource.Value = 1
				endif			 
				THIS.chkUseFullPath.Enabled = (THIS.opgDeSource.Value=2)
		
				* Go to protected mode, if necessary:
				*
				THIS.setProtection()
			else
				* This would mean a corrupt FRX?
			endif
		endif
	ENDPROC

	PROCEDURE savetofrx
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		local curSel
		curSel = select(0)
		select memberdata
		locate for TYPE = FRX_BLDR_MEMBERDATATYPE ;
			   and empty(NAME)
		if found()
			replace ;
				DECLASS		with alltrim(THIS.txtClass.Value), ;
				DECLASSLIB	with alltrim(THIS.txtClassLib.Value)
		else
			insert into memberdata ;
				( TYPE, ;
				DECLASS, ;
				DECLASSLIB ) ;
			values ;
			    ( FRX_BLDR_MEMBERDATATYPE, ;
			      alltrim(THIS.txtClass.Value), ;
			      alltrim(THIS.txtClassLib.Value) )
		endif
		select (m.curSel)
		
		if not empty(THIS.Tag)
		
			select (THIS.Tag)
			locate for OBJTYPE = FRX_OBJTYP_DATAENV and PLATFORM = FRX_PLATFORM_WINDOWS
			if found()
			
				*--------------------------------------------------
				* Use Private Data Session: 
				* ENVIRON in the Data Environment record 25.
				*--------------------------------------------------
				replace ENVIRON with THIS.chkPrivateSession.Value
				
				return .T.
			else
				* This would mean a corrupt FRX...
			endif
			
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
			
		endif
		
		
	ENDPROC

	PROCEDURE chkPrivateSession.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_CHK_PRIVATE_SESSION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkPrivateSession.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		
	ENDPROC

	PROCEDURE chkUseFullPath.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_CHK_USE_FULL_PATH_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkUseFullPath.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE cmdLoad.Click
		THIS.Parent.LoadDataEnv()
	ENDPROC

	PROCEDURE cmdLoad.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_CMD_SELECT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LBL3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_LBL_CLASSNAME_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_LBL_LIBRARY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgDeSource.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		THIS.Parent.chkUseFullPath.Enabled = (THIS.Value=2)
		
		
	ENDPROC

	PROCEDURE opgDeSource.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_OPT_COPY_FROM_FRX_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgDeSource.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_LOADDE_OPT_LINK_TO_CLASS_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS paneldesigntimelabel AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtDesignTimeLabel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 45
	Name = "paneldesigntimelabel"
	Width = 283

	ADD OBJECT 'LBL1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Design-time caption:", ;
		Left = 2, ;
		Name = "LBL1", ;
		Top = 2, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'txtDesignTimeLabel' AS edt WITH ;
		Height = 22, ;
		Left = 2, ;
		Name = "txtDesignTimeLabel", ;
		ScrollBars = 0, ;
		Top = 19, ;
		Width = 275, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			THIS.txtDesignTimeLabel.Value = NAME
		
			THIS.SetProtection()
		endif
	ENDPROC

	PROCEDURE savetofrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			replace NAME with THIS.txtDesignTimeLabel.Value
		
		endif
	ENDPROC

	PROCEDURE setprotection
		lparameter loContainer
		if THIS.event.Protected
			THIS.Visible = .F.
		endif
	ENDPROC

	PROCEDURE LBL1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DTLABEL_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS paneldetail AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNewColumn" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkNewPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkHasHeader" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkReprintHeader" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkResetPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblThreshold" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnThreshold" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="expTargetAlias" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTargetAlias" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 241
	Name = "paneldetail"
	Width = 371

	ADD OBJECT 'chkHasHeader' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Associated \<header and footer bands", ;
		Left = 12, ;
		Name = "chkHasHeader", ;
		TabIndex = 5, ;
		Top = 87
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNewColumn' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Start on new \<column", ;
		Enabled = .F., ;
		Left = 12, ;
		Name = "chkNewColumn", ;
		TabIndex = 2, ;
		Top = 24
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkNewPage' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Start on new \<page", ;
		Left = 12, ;
		Name = "chkNewPage", ;
		TabIndex = 3, ;
		Top = 45
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkReprintHeader' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<Reprint detail header on each page", ;
		Enabled = .F., ;
		Left = 28, ;
		Name = "chkReprintHeader", ;
		TabIndex = 6, ;
		Top = 108
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkResetPage' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Reset page \<number to 1 for each detail set", ;
		Left = 12, ;
		Name = "chkResetPage", ;
		TabIndex = 4, ;
		Top = 66
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'expTargetAlias' AS frxexpressioncontrol WITH ;
		calledfrom = TargetAliasExpression, ;
		Height = 28, ;
		Left = 12, ;
		Name = "expTargetAlias", ;
		TabIndex = 10, ;
		Top = 196, ;
		Width = 308, ;
		txtExpression.Name = "txtExpression", ;
		cmdExprBuilder.Name = "cmdExprBuilder"
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		Caption = " Detail properties ", ;
		Left = 11, ;
		Name = "Lbl1", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 1, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblTargetAlias' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Target alias expression:", ;
		Left = 12, ;
		Name = "lblTargetAlias", ;
		TabIndex = 9, ;
		Top = 180
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblThreshold' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Start detail set on new page when less than:", ;
		Left = 12, ;
		Name = "lblThreshold", ;
		TabIndex = 7, ;
		Top = 134
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 220, ;
		Left = 1, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 335, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'spnThreshold' AS spnmeasurementunits WITH ;
		Left = 12, ;
		Name = "spnThreshold", ;
		TabIndex = 8, ;
		Top = 151, ;
		Width = 102
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			* Start on new column: COLBREAK
			* (disabled unless multi-col report)
			*
			if THIS.frxcursor.getReportAttribute("MULTICOLUMN")
				THIS.chkNewColumn.Enabled = .T.
				THIS.chkNewColumn.Value = COLBREAK 
			else
				THIS.chkNewColumn.Enabled = .F.
				THIS.chkNewColumn.Value = .F.	
			endif
			
			* Start on new page: PAGEBREAK
			*
			THIS.chkNewPage.Value = PAGEBREAK
			
			* Reset page number: RESETPAGE
			*
			THIS.chkResetPage.Value = RESETPAGE
			 	
			* Detail header/footer:
			* Check recno()+/-1 for (9,9) and (9,10) records?
			*
			THIS.chkHasHeader.Value = THIS.frxCursor.hasDetailHeader(UNIQUEID)
			
			* reprint detail header: NOREPEAT 
			* (disabled unless has detail header/footer)
			
			if THIS.chkHasheader.Value
				THIS.chkReprintHeader.Value = NOREPEAT 
			else
				THIS.chkReprintHeader.Value = .F.
			endif
			
			* Start on new page when less than: WIDTH
			*
			THIS.spnThreshold.Units = THIS.frxcursor.getReportAttribute("UNITS") 
			THIS.spnThreshold.Value = WIDTH
			
			* Target alias: EXPR (as expression, strings need quotes)
			* (IDEA: add checkbox "[x] Expression (strings need quotes)"
			*
			THIS.expTargetAlias.Value = EXPR 	
		
			THIS.RefreshEnabledState()
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
			
		endif
	ENDPROC

	PROCEDURE refreshenabledstate
		* reprint detail header: NOREPEAT 
		* (disabled unless has detail header/footer)
			
		if THIS.chkHasheader.Value
			THIS.chkReprintHeader.Enabled = .T.
		else
			THIS.chkReprintHeader.Enabled = .F.
		endif
		
	ENDPROC

	PROCEDURE savetofrx
		* THIS DEFAULT CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
			local cCurrObject	
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			do case
			case THIS.chkHasHeader.Value and ;
				not THIS.frxCursor.hasDetailHeader(UNIQUEID)
		
				* This must be done before
				* the new bands are added. We want the START_BAND_ID, BAND_OFFSET
				* values to be correct prior to the new bands:
				*
				THIS.frxCursor.createObjectCursor()
				
				* Add in the detail header/footer records:
				*
				select (THIS.Tag)
				THIS.frxCursor.insertDetailHeaderFooter()
		
				* move the objects:
		
				* regenerate the band cursor
				* so that it incorporates the new bands' START, STOP positions:
				*
				THIS.frxCursor.createBandCursor()
				
				select (THIS.Tag)
		
				THIS.frxCursor.synchObjectPositions()
				
				
			case not THIS.chkHasHeader.Value and ;
				 THIS.frxCursor.hasDetailHeader(UNIQUEID)
		
				* Before we delete them, we need to 
				* warn the user about any objects that might be 
				* in the bands that are about to be deleted.
				
				local cHeaderId, cFooterId, lWarnBeforeDelete, oBandObjects, cText
				lWarnBeforeDelete = .F.
				oBandObjects = newobject("Collection")
				skip -1
				cHeaderId = UNIQUEID
				skip 2
				cFooterId = UNIQUEID
				skip -1
		
				* Determine which objects may be affected:
				*
				THIS.frxCursor.createObjectCursor()
				select objects
				scan
					if inlist( objects.START_BAND_ID, m.cHeaderID, m.cFooterId )
						* the object exists in one of the bands that is to be deleted.
						*
						oBandObjects.Add( objects.UNIQUEID )
					endif			
				endscan
				
				if oBandObjects.Count > 0
		
					cText = strtran( BAND_REMOVE_WARNING_LOC, "{%1}", trans(oBandObjects.Count) )
					cText = strtran( m.cText, "{%2}", "Detail header/footer" )
					lnResult = messagebox( m.cText, 512+3+48, DEFAULT_MBOX_TITLE_LOC )
								
					do case
					case m.lnResult = 2	&& cancel
						return .F.
										
					case m.lnResult = 6 && yes
						* Remove the objects
						select (THIS.Tag)
						for each cObjId in oBandObjects
							locate for UNIQUEID = cObjId
							delete
						endfor
						
					endcase
				endif
						
				* do we also need to *move* the objects that 
				* are not in the bands?
		
				* Remove the header/footer
				select (THIS.Tag)
				locate for UNIQUEID = m.cHeaderId
				delete
				locate for UNIQUEID = m.cFooterID
				delete
				
				* MOVE THE OBJECTS:
				
				* Refresh the band cursor (ignores deleted records):
				* and update the relative positions:
				*
				THIS.frxCursor.createBandCursor()
				
				select (THIS.Tag)
		
				THIS.frxCursor.synchObjectPositions()
				
			endcase
			
			select (THIS.Tag)
			locate for UNIQUEID = m.cCurrObject
			replace ;
				COLBREAK 	with THIS.chkNewColumn.Value, ;
				PAGEBREAK	with THIS.chkNewPage.Value, ;
				RESETPAGE	with THIS.chkResetPage.Value, ;
				NOREPEAT	with THIS.chkReprintHeader.Value, ;
				WIDTH		with THIS.spnThreshold.Value, ;
				EXPR		with THIS.expTargetAlias.Value
			
			return .T.
		endif
		return .F.
	ENDPROC

	PROCEDURE chkHasHeader.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_CHK_HEADERFOOTER_LOC      
		#ENDIF
		
	ENDPROC

	PROCEDURE chkHasHeader.InteractiveChange
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE chkNewColumn.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_CHK_NEW_COLUMN_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkNewPage.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_CHK_NEW_PAGE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkReprintHeader.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_CHK_REPRINT_HEADER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkResetPage.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_CHK_RESET_PAGE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblTargetAlias.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_LBL_TARGET_ALIAS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblThreshold.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAIL_LBL_THRESHOLD_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS paneldetailbands AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="detailList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: addband
		*m: removeband
		*p: bandcount
	*</DefinedPropArrayMethod>

	Height = 218
	Name = "paneldetailbands"
	Width = 229

	ADD OBJECT 'cmdAdd' AS cmd WITH ;
		Caption = "Add", ;
		Height = 25, ;
		Left = 8, ;
		Name = "cmdAdd", ;
		TabIndex = 3, ;
		Top = 160, ;
		Width = 88
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS cmd WITH ;
		Caption = "Remove", ;
		Height = 25, ;
		Left = 104, ;
		Name = "cmdRemove", ;
		TabIndex = 4, ;
		Top = 160, ;
		Width = 88
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'detailList' AS lst WITH ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "200,0", ;
		Height = 131, ;
		Left = 9, ;
		MoverBars = .T., ;
		Name = "detailList", ;
		TabIndex = 2, ;
		Top = 21, ;
		Width = 205
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="listbox" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		Caption = " Detail bands ", ;
		Left = 9, ;
		Name = "Lbl3", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 1, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp3' AS shp WITH ;
		Height = 187, ;
		Left = 0, ;
		Name = "Shp3", ;
		Style = 3, ;
		Top = 8, ;
		Width = 224, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE addband
		*===============================================================
		* AddBand()
		*
		* Add a new item to the list with the next available band number.
		* The band numbers will always increment, even if you delete some
		* before adding more. No big deal. They get re-numbered next time 
		* frxCursor::createBandCursor() or whatever is run.
		*===============================================================
		THIS.bandCount = THIS.bandCount + 1
		*THIS.detailList.AddListItem( DETAIL_LOC + trans(THIS.bandCount), THIS.bandCount, 1)
		THIS.detailList.AddListItem( DETAIL_LOC + "(" + NEW_LOC + ")", THIS.bandCount, 1)
		THIS.detailList.AddListItem( NEW_LOC, THIS.bandCount, 2)
		THIS.RefreshEnabledState()
		THIS.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE loadfromfrx
		*===============================================================
		* LoadFromFrx()
		*===============================================================
		*---------------------------------------
		* Read control panel values out of the FRX:
		*---------------------------------------
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			*------------------------------------------
			* If the NO_OPTBAND protection flag is set,
			* this control panel should not be visible:
			*---------------------------------------
			if  THIS.event.Protected and ;
				THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_REPORT_NO_OPTBAND )
				THIS.Visible = .F.
				return
			endif
		
			local cCurrObject, i
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*------------------------------------------------------------
			* Details: number of (9,4) records in FRX
			*------------------------------------------------------------
		
			this.frxCursor.createbandcursor()
			select bands
			i = 0
			scan for OBJCODE = FRX_OBJCOD_DETAIL
				i = m.i + 1
				THIS.detailList.AddListItem(BANDLABEL, m.i, 1)
				THIS.detailList.AddListItem(UNIQUEID,  m.i, 2)
			endscan	
		
			THIS.bandCount = m.i
			
			THIS.refreshEnabledstate()
			 
			select (THIS.Tag)
			locate for UNIQUEID = m.cCurrObject
		endif
	ENDPROC

	PROCEDURE refreshenabledstate
		THIS.cmdAdd.Enabled    = (THIS.detailList.ListCount < 20 )
		
		if (THIS.detailList.ListCount > 1) and ;
		   (THIS.detailList.ListIndex > 1)
			THIS.cmdRemove.Enabled = .T.
		else
			THIS.cmdRemove.Enabled = .F.
		endif
		
	ENDPROC

	PROCEDURE removeband
		*===============================================================
		* RemoveBand()
		* 
		* Delete the currently selected band item from the list:
		*===============================================================
		local currentIndex, cBandName, cBandId, iObjectCount
		local curSel, curRec, cHeaderId, cFooterId
		curSel = select(0)
		
		with THIS.detailList
			*------------------------------------------------------------
			* Get the uniqueID of the band from the selected item:
			*------------------------------------------------------------
			currentIndex = .ItemIdToIndex( .listItemId )
			
			cBandName = .List( m.currentIndex, 1 )
			cBandId   = .List( m.currentIndex, 2 )
		
			*------------------------------------------------------------
			* Does this band have header/footer bands?
			*------------------------------------------------------------
			select (THIS.Tag)
			curRec = recno()
			store "" to cHeaderID, cFooterID
			locate for UNIQUEID = m.cBandId
			if found()
				skip -1
				if (OBJTYPE = FRX_OBJTYP_BAND and OBJCODE = FRX_OBJCOD_DETAILHEADER)
					cHeaderId = frx.UNIQUEID
					skip 2
					cFooterId = frx.UNIQUEID
				endif
			endif
			go m.curRec in (THIS.Tag)
			
			*------------------------------------------------------------
			* Before we remove a band, we need to ensure that 
			* the objects contained in the band (and it's header/footer)are 
			* dealt with or at least warn about the presence of them.
			*------------------------------------------------------------
			local lWarnBeforeDelete, oBandObjects, iCount
			lWarnBeforeDelete = .F.
			oBandObjects = THIS.frxCursor.getObjectsInBand( m.cBandId )
			iCount = oBandObjects.Count
			if not empty( m.cHeaderId )
				oBandObjects = THIS.frxCursor.getObjectsInBand( m.cHeaderId )
				iCount = m.iCount + oBandObjects.Count
			endif
			if not empty( m.cFooterId )
				oBandObjects = THIS.frxCursor.getObjectsInBand( m.cFooterId )
				iCount = m.iCount + oBandObjects.Count
			endif
		
			if m.iCount > 0
				cText = strtran( DETAIL_BAND_REMOVE_WARN_LOC, "{%1}", trans(m.iCount) )
				lnResult = messagebox( m.cText, 256+48+4, DEFAULT_MBOX_TITLE_LOC )
			else
				lnResult = 6 && Yes
			endif
		
			if m.lnResult = 6 && Yes
				*------------------------------------------------------------
				* Remove the band from the list:
				*------------------------------------------------------------
				.RemoveListItem( .ListItemId )	
				.ListIndex = .ListCount	
			endif 
			
		endwith
		THIS.bufferIsDirty = .T.
		THIS.RefreshEnabledState()
	ENDPROC

	PROCEDURE savetofrx
		*===============================================================
		* SaveToFrx()
		*
		* Write the control values back into the FRX record(s)
		*
		* The bands could have been re-ordered
		* The bands could have deleted
		* The bands could have been added
		*===============================================================
		
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
			set filter to PLATFORM = FRX_PLATFORM_WINDOWS and not deleted()
		
			local cCurrObject	
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*-------------------------------------------------------------
			* 0. Refresh the store the current bands and objects	
			*-------------------------------------------------------------
			THIS.frxCursor.createBandCursor()
			THIS.frxCursor.createObjectCursor()
		
			*-------------------------------------------------------------
			* 1. Construct the beginning of a shadow frx: 
			*    (NB: SQL select does not respect current filter.)
			*-------------------------------------------------------------
			select * ;
				from (THIS.Tag) ;
				where not deleted() and PLATFORM = FRX_PLATFORM_WINDOWS and ;
					((OBJTYPE = FRX_OBJTYP_REPORTHEADER and OBJCODE = FRX_OBJCOD_REPORTHEADER) ;
					   or (OBJTYPE = FRX_OBJTYP_BAND and ;
					     inlist(OBJCODE, FRX_OBJCOD_TITLE, FRX_OBJCOD_PAGEHEADER, FRX_OBJCOD_COLHEADER, FRX_OBJCOD_GROUPHEADER))) ;
				into cursor newfrx readwrite
		
			*-------------------------------------------------------------
			* Make sure we're at the bottom of the new frx:
			*-------------------------------------------------------------
			go bottom in newfrx
			
			*-------------------------------------------------------------
			* 2. Add in the new bands in the order dictated by the that they are now:
			*-------------------------------------------------------------
			local i, cDetailID
		
			for i = 1 to THIS.detailList.listCount
		
			    *cBandName = THIS.detailList.List(i,1)
				cDetailId  = THIS.detailList.List(i,2)
						
				*-------------------------------------------------------------
				* is this band in the current FRX:
				*-------------------------------------------------------------
				select bands
				locate for UNIQUEID = m.cDetailId
				if found()
					*-------------------------------------------------------------
					* Copy the band into the shadow frx:
					*-------------------------------------------------------------
					select (THIS.Tag)
					locate for UNIQUEID = m.cDetailId
					if found()
						if THIS.frxCursor.hasDetailHeader( m.cDetailId )
							skip -1
							iScope = 3
						else
							iScope = 1
						endif
						scan next m.iScope
							scatter memo name oRow
							select newfrx
							insert into newfrx from name oRow			
							select (THIS.Tag)
						endscan
					endif
				else
					*-------------------------------------------------------------
					* Add a new band into the frx:
					*-------------------------------------------------------------
					select newfrx
					THIS.frxCursor.insertDetailBand()
				endif						
				
			endfor
		
			*-------------------------------------------------------------
			* 3. Fill in the remaining X-Band footers into shadow cursor,
			*    but not any objects in deleted bands
			*-------------------------------------------------------------
			select (THIS.Tag)
			go top
			locate for OBJTYPE = FRX_OBJTYP_BAND and ;
				inlist(OBJCODE, FRX_OBJCOD_GROUPFOOTER, FRX_OBJCOD_COLFOOTER, FRX_OBJCOD_PAGEFOOTER, FRX_OBJCOD_SUMMARY) 
				
			if found()
		
				scan while OBJTYPE = FRX_OBJTYP_BAND 
					 
					scatter memo name oRow
					select newfrx
					insert into newfrx from name oRow			
					select (THIS.Tag)
		
				endscan
			endif
		
			*-------------------------------------------------------------
			* 4. Copy objects that are in the new bands:
			*-------------------------------------------------------------
			select objects
			scan
				select newfrx
				locate for UNIQUEID = objects.START_BAND_ID
				if found()
					select (THIS.Tag)
					locate for UNIQUEID = objects.UNIQUEID 
					if found()
						scatter memo name oRow
						select newfrx
						insert into newfrx from name oRow			
					endif
				endif
				select objects
			endscan
		
			*-------------------------------------------------------------
			* 5. Add remaining records into the shadow frx:
			*-------------------------------------------------------------
			select (THIS.Tag)
			go top
			locate for inlist( OBJTYPE, FRX_OBJTYP_WORKAREA, FRX_OBJTYP_INDEX, FRX_OBJTYP_RELATION, FRX_OBJTYP_GROUP, FRX_OBJTYP_VARIABLE, ;
							   FRX_OBJTYP_PDRIVER, FRX_OBJTYP_FONTRES, FRX_OBJTYP_DATAENV, FRX_OBJTYP_DATAOBJ ) 
		
			if found()
		
				scan rest for inlist( OBJTYPE, FRX_OBJTYP_WORKAREA, FRX_OBJTYP_INDEX, FRX_OBJTYP_RELATION, FRX_OBJTYP_GROUP, FRX_OBJTYP_VARIABLE, ;
							            FRX_OBJTYP_PDRIVER, FRX_OBJTYP_FONTRES, FRX_OBJTYP_DATAENV, FRX_OBJTYP_DATAOBJ ) 
							            
					scatter memo name oRow
					select newfrx
					insert into newfrx from name oRow			
					select (THIS.Tag)
		
				endscan
			endif
		
			*-------------------------------------------------------------
			* 6. Replace the FRX cursor:
			*-------------------------------------------------------------
			select (THIS.Tag)
			set filter to
			
			* Pull out the other platform records:
			select * ;
				from (THIS.Tag) ;
				where PLATFORM <> FRX_PLATFORM_WINDOWS ;
				into cursor other_platforms readwrite
			select (THIS.Tag)
			zap
			append from dbf('newfrx')
			if reccount('other_platforms') > 0
				append From dbf('other_platforms')
			endif
			use in newfrx
			use in other_platforms
			
			*-------------------------------------------------------------
			* 7. Regenerate the band cursor from the new FRX:
			*-------------------------------------------------------------
			THIS.frxCursor.createBandCursor()
			
			*-------------------------------------------------------------
			* 8 . Resync the object absolute positions relative to the bands:
			*-------------------------------------------------------------
			select (THIS.Tag)
			THIS.frxCursor.synchObjectPositions()
		
			*-------------------------------------------------------------
			* Done.	
			*-------------------------------------------------------------
			select (THIS.Tag)
			locate for UNIQUEID = cCurrObject
		
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
		
		endif
	ENDPROC

	PROCEDURE cmdAdd.Click
		THIS.Parent.AddBand()
		
	ENDPROC

	PROCEDURE cmdAdd.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_ADD_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdRemove.Click
		THIS.Parent.RemoveBand()
	ENDPROC

	PROCEDURE cmdRemove.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_REMOVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE detailList.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_DETAILBANDS_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelfieldexpr AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="objExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: saveexprwidth
	*</DefinedPropArrayMethod>

	Height = 63
	Name = "panelfieldexpr"
	Tag = "frx"
	Width = 292

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Expression:", ;
		Left = 1, ;
		Name = "Lbl1", ;
		TabIndex = 1, ;
		Top = 0, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'objExpr' AS frxexpressioncontrol WITH ;
		calledfrom = FieldExpression, ;
		Height = 46, ;
		Left = 0, ;
		Name = "objExpr", ;
		removecrlf = .T., ;
		TabIndex = 2, ;
		Top = 17, ;
		Width = 285, ;
		ZOrderSet = 3, ;
		txtExpression.Height = 41, ;
		txtExpression.Left = 0, ;
		txtExpression.MaxLength = 255, ;
		txtExpression.Name = "txtExpression", ;
		txtExpression.Top = 1, ;
		txtExpression.Width = 252, ;
		cmdExprBuilder.Left = 256, ;
		cmdExprBuilder.Name = "cmdExprBuilder", ;
		cmdExprBuilder.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />
	
	PROCEDURE loadfromfrx
		* select the alias stored in the TAG property:
		*
		if not empty( THIS.Tag)
			select (THIS.Tag)
		
			*--------------------------------------------------------------
			* Caption:
			*--------------------------------------------------------------
			THIS.objExpr.Value = rtrim(EXPR)
		*	THIS.objExpr.DefaultSessionID = THIS.event.DefaultSessionID
			
			*--------------------------------------------------------------
			* Go to protected mode, if necessary:
			*--------------------------------------------------------------
			THIS.setProtection()
			
		endif
	ENDPROC

	PROCEDURE saveexprwidth
		*===================================================================
		* SaveExprWidth()
		*
		* Determine the default size of a Field/Expression control
		* and update the FRX
		*
		* Assumes: 
		*  - Style/Font/Format information has been saved in the FRX already
		*  - Currently located on the right FRX record
		*===================================================================
		
		*----------------------------------------------------------------
		* Grab the font characteristics
		* this works because the loFormatter object is created 
		* while the frx record is selected. See frxFormatUtil::Init()
		*----------------------------------------------------------------
		local loFormat, loFieldExpr
		loFormat    = newobject("frxFormatUtil",BUILDER_CLASSLIB)
		loFormat.setFont()
		loFieldExpr = newobject("FormatExpressionParser", FRXUTILS_PRG_CLASSLIB )
		* Gotta do this before we switch datasessions
		loFieldExpr.Value = THIS.StripQuotes( PICTURE )
		
		*----------------------------------------------------------------
		* Now, the rest needs to be evaluated in the right datasession:
		*----------------------------------------------------------------
		set datasession to (THIS.event.defaultSessionId)
		
		*----------------------------------------------------------------
		* Identify the type and value of the expression:
		*----------------------------------------------------------------
		local cExpression, cType, cField, cAlias, iSize
		
		cExpression = rtrim(THIS.objExpr.Value)
		
		
		if not empty( loFieldExpr.TemplateString )
			*----------------------------------------------------------
			* Derive the size of the control from the template string:
			*----------------------------------------------------------
			iSize = len( loFieldExpr.TemplateString )
		else
			*----------------------------------------------------------
			* If possible, determine the size and type of the expression:
			*----------------------------------------------------------
		
			if ("." $ m.cExpression) 
				
				do case
				case isdigit( m.cExpression )
					cAlias = ""
					cField = m.cExpression
					
				*----------------------------------------------------------
				* Fix for SP2
				* May be an expression:			
				*----------------------------------------------------------
				case (len(chrtran(m.cExpression, ",+-*/(){}^[]'" + '"', "" ) ) <> len(m.cExpression))
				
					* It contains characters that might be functions, expressions, etc.
					* probably not a simple alias.fieldname case.
					
					cAlias = ""
					cField = m.cExpression
					
				otherwise			
					cAlias = substr(m.cExpression,1,rat(".",m.cExpression)-1)
					cField = substr(m.cExpression,rat(".",m.cExpression)+1)
					if lower(m.cAlias) == "m"
						* It's a memvar, not an alias
						cAlias = ""
						cField = m.cExpression
					endif
				endcase
			else
				cAlias = ""
				cField = m.cExpression
			endif
			cType = ""
			iSize = 0
		
			*---------------------------------------------
			* try and get the field type, width
			*---------------------------------------------
			do case
			case not empty( m.cAlias) and used( m.cAlias )
				try
					iColCount = afields( raCols, m.cAlias )
				
					i = ascan( raCols, upper(m.cField) )
					if i > 0
						cType = raCols[i+1]
						iSize = raCols[i+2]
					endif
				catch
				endtry
				
			case used()
				*---------------------------------------------
				* try without the alias
				*---------------------------------------------
				try
					iColCount = afields( raCols )
				
					i = ascan( raCols, upper(m.cField) )
					if i > 0
						cType = raCols[i+1]
						iSize = raCols[i+2]
					endif
				catch
				endtry
				
			endcase
		
			if empty(m.cType)
				*---------------------------------------------
				* Try type()
				*---------------------------------------------
				cType = type( m.cExpression )
			endif	
		
			
		
			do case
			case m.cType = "Y"
				*----------------------------------------------------------
				* Currency: use the default
				*----------------------------------------------------------
				iSize = FIELDEXPR_DEFAULT_WIDTH_CURRENCY
				
			case m.cType = "I"
				*----------------------------------------------------------
				* Integer: Use the default:
				*----------------------------------------------------------
				iSize = FIELDEXPR_DEFAULT_WIDTH_INTEGER
		
			case m.cType = "D"
				*----------------------------------------------------------
				* Date: Use the default:
				*----------------------------------------------------------
				iSize = FIELDEXPR_DEFAULT_WIDTH_DATE
		
			case m.cType = "T"
				*----------------------------------------------------------
				* Datetime: Use the default:
				*----------------------------------------------------------
				iSize = FIELDEXPR_DEFAULT_WIDTH_DATETIME
		
			case m.cType = "M"
				*----------------------------------------------------------
				* Default width for memos is 70 chars:
				*----------------------------------------------------------
				iSize = FIELDEXPR_DEFAULT_WIDTH_MEMO
		
			case inlist( m.cType, "U", "W","V", "Q")
				*----------------------------------------------------------
				* Use a default control size:
				*----------------------------------------------------------
				iSize = FIELDEXPR_DEFAULT_WIDTH_CHARS
		
			otherwise
				*----------------------------------------------------------
				* Can we figure out the size?
				*----------------------------------------------------------
				if (not empty( m.cAlias )) and used( m.cAlias )   && SP2: Test for USED()
					iSize = fsize( m.cField, m.cAlias )		
				else
					iSize = fsize( m.cField )		
				endif
		
			endcase				
		
			*----------------------------------------------------------
			* Still no joy? Try getting the results of the expression:
			*----------------------------------------------------------
			if empty( m.iSize )
				try
					iSize = len( transform( eval( m.cExpression )))
				catch
					iSize = 0
				endtry
			endif
		
			if m.iSize = 0
				*----------------------------------------------------------
				* Use a default control size:
				*----------------------------------------------------------
				iSize = FIELDEXPR_DEFAULT_WIDTH_CHARS
			endif
		endif
		
		*----------------------------------------------------------------
		* Use a minimum width of 1 character:
		*----------------------------------------------------------------
		iSize = max( 1, m.iSize )
		
		*----------------------------------------------------------------
		* Pad the width by 1
		*----------------------------------------------------------------
		iSize = m.iSize + 1
		
		*----------------------------------------------------------------
		* restore the data session:
		*----------------------------------------------------------------
		set datasession to (THIS.event.frxSessionId)
		
		*----------------------------------------------------------------
		* Use the average character width in pixels times the 
		* relative width of the "0" character to get the width of the 
		* Field/Expression object in pixels. (loFormat knows about 
		* the current font.)
		*----------------------------------------------------------------
		local nExprWidth
		nExprWidth = (m.iSize * loFormat.FontMetric(6) * loFormat.TxtWidth("0") )
		
		*----------------------------------------------------------------
		* Convert to FRU:
		*----------------------------------------------------------------
		nExprWidth = THIS.frxCursor.PixelsToFru( m.nExprWidth )
		
		*----------------------------------------------------------------
		* Add 10% for GDI+ stringlength fudging:
		*----------------------------------------------------------------
		*nExprWidth = int( m.nExprWidth * 1.1 )
		
		*----------------------------------------------------------------
		* Update the object's width:
		*----------------------------------------------------------------
		replace WIDTH  with  m.nExprWidth 
		
		return
	ENDPROC

	PROCEDURE savetofrx
		*=====================================================================
		* SaveToFrx()
		*
		* Save the changes back to the FRX record(s). Return .F. if validation fails
		*=====================================================================
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(this.Tag)
			select (this.Tag)
		endif
		
		if empty(THIS.objExpr.Value)
			=messagebox(FIELDEXPR_INVALID_CAPTION_MSG_LOC, 48, PROPEDIT_MBOX_TITLE_LOC)
			return .F.
		ENDIF	
			 
		replace ;
			EXPR 		with chrtran(rtrim( this.objExpr.Value ),chr(13)+chr(10),"  ")
		
		*--------------------------------------------------------------
		* Object Size:
		*--------------------------------------------------------------
		do case
		case THIS.event.objType = FRX_OBJTYP_FIELD and ;
			 THIS.event.eventType = FRX_BLDR_EVENT_OBJECTCREATE
		
			*-----------------------------------------------------
			* Save the Expression width:
			*-----------------------------------------------------
			THIS.SaveExprWidth()	
		
		endcase
		
		
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.objExpr.Value = ""
		
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FIELDEXPR_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE objExpr.txtExpression.KeyPress
		lparameters iKey, iModifier
		
		do case
		case m.iKey = 13 and m.iModifier = 0
			keyboard "{CTRL-W}"
			nodefault
		
		otherwise
			dodefault( m.iKey, m.iModifier )
		
		endcase
	ENDPROC

ENDDEFINE

DEFINE CLASS panelfieldformat AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgDataType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboStringTrimMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat.chkUpper" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat.chkSetDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat.chkBritishDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat.opgIgnoreInputMask" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat.Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat.opgJustify" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCharFormat.Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkLeftJustify" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkBlankIfZero" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkNegative" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkSetDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkBritishDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkCRifPositive" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkDBifNegative" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkLeadingZeros" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkCurrency" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntNumFormat.chkScientific" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDateFormat" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDateFormat.chkSetDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDateFormat.chkBritishDate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDateFormat.chkBlankIfZero" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDateFormat.chkYL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntDateFormat.chkYS" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: alignment_access
		*m: alignment_assign
		*m: datatype_access
		*m: datatype_assign
		*m: formatstring_access
		*m: formatstring_assign
		*m: updatecontrols
		*p: alignment		&& Specifies the alignment of text associated with a control.
		*p: datatype		&& Specifies the Visual FoxPro datatype for the field.
		*p: formatexpression
		*p: formatstring
	*</DefinedPropArrayMethod>

	datatype = ("")		&& Specifies the Visual FoxPro datatype for the field.
	formatexpression = .NULL.
	formatstring = ("")
	Height = 282
	Name = "panelfieldformat"
	Width = 313

	ADD OBJECT 'cboStringTrimMode' AS cbo WITH ;
		Left = 2, ;
		Name = "cboStringTrimMode", ;
		TabIndex = 6, ;
		Top = 256, ;
		Width = 294
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'cntCharFormat' AS container WITH ;
		BackStyle = 0, ;
		Height = 140, ;
		Left = 8, ;
		Name = "cntCharFormat", ;
		TabIndex = 3, ;
		Top = 84, ;
		Width = 280
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntCharFormat.chkBritishDate' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<British date", ;
		Left = 25, ;
		Name = "chkBritishDate", ;
		TabIndex = 4, ;
		Top = 120, ;
		Value = .F.
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntCharFormat.chkSetDate' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<SET DATE format", ;
		Left = 25, ;
		Name = "chkSetDate", ;
		TabIndex = 3, ;
		Top = 98, ;
		Value = .F.
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntCharFormat.chkUpper' AS chk WITH ;
		Alignment = 0, ;
		Caption = "To \<upper case", ;
		Left = 25, ;
		Name = "chkUpper", ;
		TabIndex = 2, ;
		Top = 76, ;
		Value = .F.
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntCharFormat.Lbl1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = " Template characters ", ;
		Left = 15, ;
		Name = "Lbl1", ;
		Style = 3, ;
		TabIndex = 6, ;
		Top = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'cntCharFormat.Lbl2' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = " Alignment ", ;
		Left = 186, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 7, ;
		Top = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'cntCharFormat.opgIgnoreInputMask' AS opg WITH ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		Height = 53, ;
		Left = 10, ;
		Name = "opgIgnoreInputMask", ;
		TabIndex = 1, ;
		Top = 16, ;
		Value = 1, ;
		Width = 123, ;
		Opt1.Caption = "\<Overlay", ;
		Opt1.Left = 15, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 11, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "\<Interleave", ;
		Opt2.Left = 15, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 30
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'cntCharFormat.opgJustify' AS opg WITH ;
		BorderStyle = 0, ;
		ButtonCount = 3, ;
		ControlSource = "", ;
		Height = 84, ;
		Left = 171, ;
		Name = "opgJustify", ;
		TabIndex = 5, ;
		Top = 14, ;
		Value = 1, ;
		Width = 92, ;
		Opt1.Caption = "\<Left", ;
		Opt1.Left = 19, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 14, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "\<Right", ;
		Opt2.Left = 19, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 33, ;
		Opt3.Caption = "Cen\<ter", ;
		Opt3.Left = 19, ;
		Opt3.Name = "Opt3", ;
		Opt3.Top = 52
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'cntDateFormat' AS container WITH ;
		BackStyle = 0, ;
		Height = 148, ;
		Left = 308, ;
		Name = "cntDateFormat", ;
		TabIndex = 5, ;
		Top = 124, ;
		Width = 184
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntDateFormat.chkBlankIfZero' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Blank if \<empty", ;
		Left = 25, ;
		Name = "chkBlankIfZero", ;
		TabIndex = 3, ;
		Top = 61, ;
		Value = .F., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntDateFormat.chkBritishDate' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<British date", ;
		Left = 25, ;
		Name = "chkBritishDate", ;
		TabIndex = 2, ;
		Top = 37, ;
		Value = .F., ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntDateFormat.chkSetDate' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<SET DATE format", ;
		Left = 25, ;
		Name = "chkSetDate", ;
		TabIndex = 1, ;
		Top = 13, ;
		Value = .F., ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntDateFormat.chkYL' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use \<long date setting", ;
		Left = 25, ;
		Name = "chkYL", ;
		TabIndex = 4, ;
		Top = 85, ;
		Value = .F., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntDateFormat.chkYS' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use \<short date setting", ;
		Left = 25, ;
		Name = "chkYS", ;
		TabIndex = 5, ;
		Top = 109, ;
		Value = .F., ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat' AS container WITH ;
		BackStyle = 0, ;
		Height = 148, ;
		Left = 308, ;
		Name = "cntNumFormat", ;
		TabIndex = 4, ;
		Top = 12, ;
		Width = 264
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntNumFormat.chkBlankIfZero' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Blank if \<zero", ;
		Left = 25, ;
		Name = "chkBlankIfZero", ;
		TabIndex = 2, ;
		Top = 37, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkBritishDate' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "\<British date", ;
		Left = 25, ;
		Name = "chkBritishDate", ;
		TabIndex = 5, ;
		Top = 109, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkCRifPositive' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "C\<R if positive", ;
		Left = 154, ;
		Name = "chkCRifPositive", ;
		TabIndex = 6, ;
		Top = 13, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkCurrency' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "C\<urrency", ;
		Left = 154, ;
		Name = "chkCurrency", ;
		TabIndex = 9, ;
		Top = 85, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkDBifNegative' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "DB if negati\<ve", ;
		Left = 154, ;
		Name = "chkDBifNegative", ;
		TabIndex = 7, ;
		Top = 37, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkLeadingZeros' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Leading z\<eros", ;
		Left = 154, ;
		Name = "chkLeadingZeros", ;
		TabIndex = 8, ;
		Top = 61, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkLeftJustify' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "\<Left justify", ;
		Left = 25, ;
		Name = "chkLeftJustify", ;
		TabIndex = 1, ;
		Top = 13, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkNegative' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "(Ne\<gative)", ;
		Left = 25, ;
		Name = "chkNegative", ;
		TabIndex = 3, ;
		Top = 61, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkScientific' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "Scien\<tific", ;
		Left = 154, ;
		Name = "chkScientific", ;
		TabIndex = 10, ;
		Top = 109, ;
		Value = .F., ;
		Width = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cntNumFormat.chkSetDate' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "\<SET DATE format", ;
		Height = 17, ;
		Left = 25, ;
		Name = "chkSetDate", ;
		TabIndex = 4, ;
		Top = 85, ;
		Value = .F., ;
		Width = 122
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Format expression:", ;
		Left = 2, ;
		Name = "Lbl1", ;
		TabIndex = 7, ;
		Top = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Caption = " Format options ", ;
		Left = 12, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 8, ;
		Top = 69, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Trim mode for character expressions:", ;
		Left = 2, ;
		Name = "Lbl3", ;
		TabIndex = 9, ;
		Top = 238, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'opgDataType' AS opg WITH ;
		BorderStyle = 0, ;
		ButtonCount = 3, ;
		Height = 24, ;
		Left = 4, ;
		Name = "opgDataType", ;
		TabIndex = 2, ;
		Top = 44, ;
		Value = 1, ;
		Width = 300, ;
		Opt1.Caption = "\<Character", ;
		Opt1.Left = 5, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 4, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "\<Numeric", ;
		Opt2.Left = 120, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 4, ;
		Opt3.Caption = "\<Date", ;
		Opt3.Left = 225, ;
		Opt3.Name = "Opt3", ;
		Opt3.Top = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 156, ;
		Left = 2, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 76, ;
		Width = 294, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'txtFormat' AS edt WITH ;
		Height = 22, ;
		Left = 2, ;
		Name = "txtFormat", ;
		ScrollBars = 0, ;
		TabIndex = 1, ;
		Top = 19, ;
		Width = 294
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />
	
	PROCEDURE alignment_access
		do case
		case THIS.opgDataType.Value = 1  && Character
			return THIS.cntCharFormat.opgJustify.Value
		
		case THIS.opgDataType.Value = 2  && Numeric
			if THIS.cntNumFormat.ChkLeftJustify.Value
				return 1
			else
				return 2
			endif 
		
		case THIS.opgDataType.Value = 3  && Date
			return 1
		
		endcase
	ENDPROC

	PROCEDURE alignment_assign
		LPARAMETER iAlign
		
		THIS.cntCharFormat.opgJustify.Value = m.iAlign
		
		do case
		case THIS.opgDataType.Value = 1  && Character
			THIS.cntNumFormat.chkLeftJustify.Value = .F.
		
		case THIS.opgDataType.Value = 2  && Numeric
			THIS.cntNumFormat.chkLeftJustify.Value = (m.iAlign=1)
		
		case THIS.opgDataType.Value = 3  && Date
			THIS.cntNumFormat.chkLeftJustify.Value = .F.
		
		endcase
		
		
			
		
	ENDPROC

	PROCEDURE datatype_access
		LOCAL cDataType
		
		DO CASE
		CASE THIS.opgDataType.Value == 2
			cDataType = 'N'
		
		CASE THIS.opgDataType.Value == 3
			cDataType = 'D'
		
		OTHERWISE
			cDataType = 'C'
		
		ENDCASE
		
		RETURN cDataType
		
	ENDPROC

	PROCEDURE datatype_assign
		LPARAMETERS cDataType
		
		DO CASE
		CASE cDataType == 'N'
			THIS.opgDataType.Value = 2
		
		CASE cDataType == 'D'
			THIS.opgDataType.Value = 3
		
		OTHERWISE
			THIS.opgDataType.Value = 1
		
		ENDCASE
		
		THIS.UpdateControls()
		
	ENDPROC

	PROCEDURE formatstring_access
		* return format string based upon what's selected
		LOCAL cFormatString
		
		cFormatString = ''
		DO CASE
		CASE THIS.opgDataType.Value == 2  && numeric	
			WITH THIS.cntNumFormat
				cFormatString = cFormatString + IIF(.chkLeftJustify.Value, 'B', '')
				cFormatString = cFormatString + IIF(.chkBlankIfZero.Value, 'Z', '')
				cFormatString = cFormatString + IIF(.chkNegative.Value, '(', '')
				cFormatString = cFormatString + IIF(.chkSetDate.Value, 'D', '')
				cFormatString = cFormatString + IIF(.chkBritishDate.Value, 'E', '')
				cFormatString = cFormatString + IIF(.chkCRifPositive.Value, 'C', '')
				cFormatString = cFormatString + IIF(.chkDBifNegative.Value, 'X', '')
				cFormatString = cFormatString + IIF(.chkLeadingZeros.Value, 'L', '')
				cFormatString = cFormatString + IIF(.chkCurrency.Value, '$', '')
				cFormatString = cFormatString + IIF(.chkScientific.Value, '^', '')
			ENDWITH
		
		CASE THIS.opgDataType.Value == 3  && date
			WITH THIS.cntDateFormat
				cFormatString = cFormatString + IIF(.chkSetDate.Value, 'D', '')
				cFormatString = cFormatString + IIF(.chkBritishDate.Value, 'E', '')
				cFormatString = cFormatString + IIF(.chkBlankIfZero.Value, 'Z', '')
				cFormatString = cFormatString + IIF(.chkYL.Value, 'YL', '')
				cFormatString = cFormatString + IIF(.chkYS.Value, 'YS', '')
			ENDWITH
			
		OTHERWISE
			WITH THIS.cntCharFormat
				cFormatString = cFormatString + IIF(.chkSetDate.Value, 'D', '')
				cFormatString = cFormatString + IIF(.chkBritishDate.Value, 'E', '')
				cFormatString = cFormatString + IIF(.opgIgnoreInputMask.Value=2,'R','')
				cFormatString = cFormatString + IIF(.chkUpper.Value, '!', '')
				
				DO CASE
				CASE .opgJustify.Value == 2
					cFormatString = cFormatString + IIF(.chkUpper.Value, 'J', '')
		
				CASE .opgJustify.Value == 3
					cFormatString = cFormatString + IIF(.chkUpper.Value, 'I', '')
		
				ENDCASE
			ENDWITH
		ENDCASE
		
		*-----------------------------------------------
		* Split entered formatstring into components
		* and add any explicit checkbox values:
		*-----------------------------------------------
		THIS.FormatExpression.Value = ALLTRIM(THIS.txtFormat.Value)
		THIS.FormatExpression.TemplateString = THIS.FormatExpression.TemplateString 
		THIS.FormatExpression.FormatCodes    = THIS.FormatExpression.FormatCodes + cFormatString
		cFormatString = THIS.FormatExpression.Value
		RETURN cFormatString
		
	ENDPROC

	PROCEDURE formatstring_assign
		LPARAMETERS cFormatString
		LOCAL cFormat
		LOCAL cPicture
		
		* break into format and picture clauses:
		
		THIS.FormatExpression.Value = m.cFormatString
		cFormat  = THIS.FormatExpression.FormatCodes
		cPicture = THIS.FormatExpression.TemplateString
		
		THIS.txtFormat.Value = cPicture
		WITH THIS.cntNumFormat
			.chkLeftJustify.Value = 'B' $ cFormat
			.chkBlankIfZero.Value = 'Z' $ cFormat
			.chkNegative.Value = '(' $ cFormat
			.chkSetDate.Value = 'D' $ cFormat
			.chkBritishDate.Value = 'E' $ cFormat
			.chkCRifPositive.Value = 'C' $ cFormat
			.chkDBifNegative.Value = 'X' $ cFormat
			.chkLeadingZeros.Value = 'L' $ cFormat
			.chkCurrency.Value = '$' $ cFormat
			.chkScientific.Value = '^' $ cFormat
		ENDWITH
		
		WITH THIS.cntDateFormat
			.chkSetDate.Value = 'D' $ cFormat
			.chkBritishDate.Value = 'E' $ cFormat
			.chkBlankIfZero.Value = 'Z' $ cFormat
			.chkYL.Value          = 'YL' $ cFormat
			.chkYS.Value          = 'YS' $ cFormat
		ENDWITH
		
		WITH THIS.cntCharFormat
			.chkUpper.Value = ('!' $ cFormat)
			.chkSetDate.Value = ('D' $ cFormat)
			.chkBritishDate.Value = ('E' $ cFormat)
			.opgIgnoreInputMask.Value = iif( 'R' $ cFormat, 2, 1 )
			
			DO CASE
			CASE ('J' $ cFormat)
				.opgJustify.Value = 2  && right
		
			CASE ('I' $ cFormat)  && center
				.opgJustify.Value = 3
			
			OTHERWISE
				.opgJustify.Value = 1
		
			ENDCASE
		ENDWITH
		
		THIS.FormatString = m.cFormatString
		
		THIS.UpdateControls()
		
	ENDPROC

	PROCEDURE Init
		dodefault()
		THIS.FormatExpression = newobject("FormatExpressionParser", FRXUTILS_PRG_CLASSLIB )
		
		
	ENDPROC

	PROCEDURE loadfromfrx
		if not used(THIS.Tag)
			return .F.
		endif
		select (THIS.Tag)
		
		*-------------------------------------------------------------------
		* The following order of assignment is crucial, due to 
		* the magical and disturbing behavior of assignment methods:
		*-------------------------------------------------------------------
		
		*-------------------------------------------------------------------
		* Load expression data type: (must be first)
		*-------------------------------------------------------------------
		THIS.DataType     = FILLCHAR
		
		*-------------------------------------------------------------------
		* Load format codes + template string:
		*-------------------------------------------------------------------
		THIS.FormatString = THIS.StripQuotes(trim(PICTURE))
		
		*-------------------------------------------------------------------
		* Text alignment: 0=left, 1 = Right, 2 = Center
		*-------------------------------------------------------------------
		THIS.Alignment    = OFFSET+1
		
		*-------------------------------------------------------------------
		* Load GDI+ string trimming mode:
		*-------------------------------------------------------------------
		THIS.cboStringTrimMode.Value = RULERLINES+1
		
		*-------------------------------------------------------------------
		* Set the position and initial visible status of the panels:
		*-------------------------------------------------------------------
		store THIS.cntCharFormat.Top to ;
			THIS.cntNumFormat.Top, ;
			THIS.cntDateFormat.Top
			
		store THIS.cntCharFormat.Left to ;
			THIS.cntNumFormat.Left, ;
			THIS.cntDateFormat.Left
			
		do case
		case THIS.opgDataType.Value = 1
			THIS.cntNumFormat.Visible   = .F.
			THIS.cntDateFormat.Visible  = .F.
		
		case THIS.opgDataType.Value = 2
			THIS.cntCharFormat.Visible  = .F.
			THIS.cntDateFormat.Visible  = .F.
		
		case THIS.opgDataType.Value = 3
			THIS.cntCharFormat.Visible  = .F.
			THIS.cntNumFormat.Visible   = .F.
			
		endcase
		
		THIS.UpdateControls()
		
		*--------------------------------------------------------------
		* Go to protected mode, if necessary:
		*--------------------------------------------------------------
		THIS.setProtection()
			
		
	ENDPROC

	PROCEDURE savetofrx
		if not used(THIS.Tag)
			return .F.
		endif
		select (THIS.Tag)
		
		*-------------------------------------------------------------------
		* Load values from frx record into panel controls:
		*-------------------------------------------------------------------
		replace FILLCHAR   with THIS.DataType, ;
				OFFSET 	   with THIS.Alignment-1, ;
				PICTURE    with THIS.AddQuotes(alltrim(THIS.FormatString)), ;
				RULERLINES with THIS.cboStringTrimMode.Value-1
		
		
		return .T.
	ENDPROC

	PROCEDURE SetFocus
		THIS.txtFormat.SetFocus()
	ENDPROC

	PROCEDURE updatecontrols
		*------------------------------------------------------
		* SP2: Use a different containership model:
		*------------------------------------------------------
		
		with THIS.cntCharFormat
			.chkSetDate.Enabled = !.chkBritishDate.Value
			.chkBritishDate.Enabled = !.chkSetDate.Value
		endwith
		
		with THIS.cntNumFormat
			.chkSetDate.Enabled = !.chkBritishDate.Value
			.chkBritishDate.Enabled = !.chkSetDate.Value
		endwith
		
		with THIS.cntDateFormat
			.chkSetDate.Enabled = !.chkBritishDate.Value
			.chkBritishDate.Enabled = !.chkSetDate.Value
			.chkYL.Enabled = !.chkYS.Value
			.chkYS.Enabled = !.chkYL.Value
		endwith
		
	ENDPROC

	PROCEDURE cboStringTrimMode.Init
		dodefault()
		
		THIS.Style = 2 	&& dropdown list
		
		*-------------------------------------------------------------------
		* String Trimming is 0 by default. Values are 0-5. Those pesky zero-based enums....
		*-------------------------------------------------------------------
		
		THIS.AddItem( STRINGTRIM_DEFAULT_LOC,        FRX_STRINGTRIM_DEFAULT        + 1 )
		THIS.AddItem( STRINGTRIM_CHAR_LOC,           FRX_STRINGTRIM_CHAR           + 1 )
		THIS.AddItem( STRINGTRIM_WORD_LOC,           FRX_STRINGTRIM_WORD           + 1 )
		THIS.AddItem( STRINGTRIM_ELLIPSIS_CHAR_LOC,  FRX_STRINGTRIM_ELLIPSIS_CHAR  + 1 )
		THIS.AddItem( STRINGTRIM_ELLIPSIS_WORD_LOC,  FRX_STRINGTRIM_ELLIPSIS_WORD  + 1 )
		THIS.AddItem( STRINGTRIM_ELLIPSIS_FILE_LOC,  FRX_STRINGTRIM_ELLIPSIS_PATH  + 1 )
		
	ENDPROC

	PROCEDURE cntCharFormat.chkBritishDate.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_BRITISH_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.chkBritishDate.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntCharFormat.chkSetDate.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_SET_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.chkSetDate.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntCharFormat.chkUpper.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_UPPERCASE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.Init
		THIS.BorderWidth = 0
	ENDPROC

	PROCEDURE cntCharFormat.Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_TEMPLATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_JUSTIFY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.opgIgnoreInputMask.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_OVERLAY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.opgIgnoreInputMask.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_INTERLEAVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.opgJustify.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_JUST_LEFT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.opgJustify.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_JUST_RIGHT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntCharFormat.opgJustify.Opt3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_JUST_CENTER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntDateFormat.chkBlankIfZero.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_BLANK_EMPTY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntDateFormat.chkBlankIfZero.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntDateFormat.chkBritishDate.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_BRITISH_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntDateFormat.chkBritishDate.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntDateFormat.chkSetDate.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_SET_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntDateFormat.chkSetDate.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntDateFormat.chkYL.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_USE_LONG_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntDateFormat.chkYL.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntDateFormat.chkYS.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_USE_SHORT_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntDateFormat.chkYS.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntDateFormat.Init
		THIS.BorderWidth = 0
		
	ENDPROC

	PROCEDURE cntNumFormat.chkBlankIfZero.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_ZERO_BLANK_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkBritishDate.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_BRITISH_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkBritishDate.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntNumFormat.chkCRifPositive.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_CR_POSITIVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkCurrency.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_CURRENCY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkDBifNegative.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_DB_NEGATIVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkLeadingZeros.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_LEADING_0_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkLeftJustify.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_LEFT_JUST_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkNegative.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_NEGATIVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkScientific.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_SCIENTIFIC_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkSetDate.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_SET_DATE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cntNumFormat.chkSetDate.InteractiveChange
		THIS.Parent.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE cntNumFormat.Init
		THIS.BorderWidth = 0
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_OPTIONS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_TRIM_MODE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgDataType.InteractiveChange
		do case
		case THIS.Value = 1
			THIS.Parent.cntCharFormat.Visible  = .T.
			THIS.Parent.cntNumFormat.Visible   = .F.
			THIS.Parent.cntDateFormat.Visible  = .F.
		
		case THIS.Value = 2
			THIS.Parent.cntCharFormat.Visible  = .F.
			THIS.Parent.cntNumFormat.Visible   = .T.
			THIS.Parent.cntDateFormat.Visible  = .F.
		
		case THIS.Value = 3
			THIS.Parent.cntCharFormat.Visible  = .F.
			THIS.Parent.cntNumFormat.Visible   = .F.
			THIS.Parent.cntDateFormat.Visible  = .T.
			
		endcase
		THIS.Parent.UpdateControls()
		
	ENDPROC

	PROCEDURE opgDataType.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_CHARACTER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgDataType.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_NUMERIC_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgDataType.Opt3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_DATE_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelfieldpositioning AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chkStretch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="objPosition" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 116
	Name = "panelfieldpositioning"
	Width = 289

	ADD OBJECT 'chkStretch' AS chk WITH ;
		Alignment = 0, ;
		AutoSize = .F., ;
		Caption = "\<Stretch with overflow", ;
		Height = 15, ;
		Left = 4, ;
		Name = "chkStretch", ;
		TabIndex = 6, ;
		Top = 96, ;
		Value = .F., ;
		Width = 203
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'objPosition' AS frxobjectpositioncontrol WITH ;
		Height = 95, ;
		Left = 2, ;
		Name = "objPosition", ;
		TabIndex = 5, ;
		Top = 1, ;
		Width = 285, ;
		OptionGroup.Left = 0, ;
		OptionGroup.Name = "OptionGroup", ;
		OptionGroup.opt1.Left = 66, ;
		OptionGroup.opt1.Name = "opt1", ;
		OptionGroup.opt1.Top = 15, ;
		OptionGroup.opt2.Left = 66, ;
		OptionGroup.opt2.Name = "opt2", ;
		OptionGroup.opt2.Top = 36, ;
		OptionGroup.opt3.Left = 66, ;
		OptionGroup.opt3.Name = "opt3", ;
		OptionGroup.opt3.Top = 57, ;
		OptionGroup.Top = 7, ;
		OptionGroup.Width = 276, ;
		Label.Name = "Label", ;
		GIFFLOAT.Height = 34, ;
		GIFFLOAT.Name = "GIFFLOAT", ;
		GIFFLOAT.Width = 31, ;
		GIFTOP.Height = 34, ;
		GIFTOP.Name = "GIFTOP", ;
		GIFTOP.Width = 31, ;
		GIFBOTTOM.Height = 34, ;
		GIFBOTTOM.Name = "GIFBOTTOM", ;
		GIFBOTTOM.Width = 31
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />
	
	PROCEDURE loadfromfrx
		* NB: THIS CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* For 
		
		* select the alias stored in the TAG property:
		*
		if not empty( THIS.Tag)
			select (THIS.Tag)
		
			* Object Position:
			*
			THIS.objPosition.LoadFromFrx()
		
			THIS.chkStretch.Value = STRETCH
			
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
			
		endif
	ENDPROC

	PROCEDURE savetofrx
		*=====================================================================
		* SaveToFrx()
		*
		* Save the changes back to the FRX record(s). Return .F. if validation fails
		*=====================================================================
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(this.Tag)
			select (this.Tag)
		endif
		
		replace ;
			STRETCH		with this.chkStretch.Value
		
		*--------------------------------------------------------------
		* Object Position:
		*--------------------------------------------------------------
		THIS.objPosition.SaveToFrx()
		
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.objPosition.Value = OBJECT_POSITION_FIX_TOP
		THIS.chkStretch.Value = .F.
	ENDPROC

	PROCEDURE chkStretch.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FIELDPOS_CHK_OVERFLOW_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelgroupexpr AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="objExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 49
	Name = "panelgroupexpr"
	Width = 293

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Group \<expression:", ;
		Left = 2, ;
		Name = "Lbl1", ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'objExpr' AS frxexpressioncontrol WITH ;
		calledfrom = BandGroupOnExpression, ;
		Height = 30, ;
		Left = 2, ;
		Name = "objExpr", ;
		removecrlf = .T., ;
		TabIndex = 2, ;
		Top = 18, ;
		Width = 285, ;
		ZOrderSet = 3, ;
		TXTEXPRESSION.Left = 0, ;
		TXTEXPRESSION.Name = "TXTEXPRESSION", ;
		TXTEXPRESSION.Top = 1, ;
		TXTEXPRESSION.Width = 252, ;
		CMDEXPRBUILDER.Left = 256, ;
		CMDEXPRBUILDER.Name = "CMDEXPRBUILDER", ;
		CMDEXPRBUILDER.Top = 1
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />
	
	PROCEDURE loadfromfrx
		* select the alias stored in the TAG property:
		*
		if not empty( THIS.Tag)
			select (THIS.Tag)
		
			*--------------------------------------------------------------
			* Caption:
			*--------------------------------------------------------------
			THIS.objExpr.Value = rtrim(EXPR)
			
			*--------------------------------------------------------------
			* Go to protected mode, if necessary:
			*--------------------------------------------------------------
			THIS.setProtection()
			
		endif
	ENDPROC

	PROCEDURE savetofrx
		*=====================================================================
		* SaveToFrx()
		*
		* Save the changes back to the FRX record(s). Return .F. if validation fails
		*=====================================================================
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(this.Tag)
			select (this.Tag)
		endif
		
		replace ;
			EXPR 		with chrtran(rtrim( this.objExpr.Value ),chr(13)+chr(10),"  ")
		
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.objExpr.Value = ""
		
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPEXPR_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE objExpr.TXTEXPRESSION.Valid
		*-------------------------------------------------------------------
		* Let them press the ESC key, or Cancel
		*-------------------------------------------------------------------
		if lastkey()=27
			return .T.
		endif
		
		*-------------------------------------------------------------------
		* This value cannot be empty
		*-------------------------------------------------------------------
		if empty(THIS.Value)
			return .F.
		endif
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelgrouping AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="groupList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkReprint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblThreshold" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnThreshold" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgPaginate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl4" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: addgroup
		*m: removegroup
		*p: groupcount
		*p: measurementunits
		*p: unitconverter
	*</DefinedPropArrayMethod>

	groupcount = 0
	Height = 226
	measurementunits = 0
	Name = "panelgrouping"
	unitconverter = .NULL.
	Width = 521

	ADD OBJECT 'chkReprint' AS chk WITH ;
		Alignment = 0, ;
		Anchor = 9, ;
		Caption = "\<Reprint group header on each page", ;
		Left = 232, ;
		Name = "chkReprint", ;
		TabIndex = 7, ;
		Top = 158, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAdd' AS cmd WITH ;
		Anchor = 6, ;
		Caption = "Add", ;
		Left = 4, ;
		Name = "cmdAdd", ;
		TabIndex = 2, ;
		Top = 195, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetExpr' AS cmd WITH ;
		Anchor = 9, ;
		Caption = "...", ;
		Height = 22, ;
		Left = 492, ;
		Name = "cmdGetExpr", ;
		TabIndex = 5, ;
		Top = 18, ;
		Width = 20, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS cmd WITH ;
		Anchor = 6, ;
		Caption = "Remove", ;
		Left = 85, ;
		Name = "cmdRemove", ;
		TabIndex = 3, ;
		Top = 195, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtExpr' AS edt WITH ;
		Anchor = 9, ;
		Height = 22, ;
		Left = 231, ;
		Name = "edtExpr", ;
		ScrollBars = 0, ;
		SelectOnEntry = .T., ;
		TabIndex = 4, ;
		Top = 18, ;
		Width = 257, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'groupList' AS lst WITH ;
		Anchor = 15, ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "200,0", ;
		Height = 170, ;
		Left = 3, ;
		MoverBars = .T., ;
		Name = "groupList", ;
		TabIndex = 1, ;
		Top = 18, ;
		Width = 219, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="listbox" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Grouping nesting order:", ;
		Left = 3, ;
		Name = "Lbl1", ;
		TabIndex = 11, ;
		Top = 0, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Group on:", ;
		Left = 234, ;
		Name = "Lbl2", ;
		TabIndex = 12, ;
		Top = 0, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl4' AS lbl WITH ;
		Anchor = 9, ;
		Caption = " Group starts on ", ;
		Left = 237, ;
		Name = "Lbl4", ;
		Style = 3, ;
		TabIndex = 10, ;
		Top = 45, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblThreshold' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "\<Start group on new page when less than:", ;
		Left = 232, ;
		Name = "lblThreshold", ;
		TabIndex = 8, ;
		Top = 180, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'opgPaginate' AS opg WITH ;
		Anchor = 9, ;
		ButtonCount = 4, ;
		Height = 99, ;
		Left = 231, ;
		Name = "opgPaginate", ;
		TabIndex = 6, ;
		Top = 53, ;
		Width = 281, ;
		ZOrderSet = 10, ;
		Opt1.Caption = "New line", ;
		Opt1.Left = 17, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 12, ;
		Opt2.Caption = "New \<column", ;
		Opt2.Left = 17, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 33, ;
		Opt3.Caption = "New \<page", ;
		Opt3.Left = 17, ;
		Opt3.Name = "Opt3", ;
		Opt3.Top = 54, ;
		Opt4.Caption = "\<New page number 1", ;
		Opt4.Left = 17, ;
		Opt4.Name = "Opt4", ;
		Opt4.Top = 75
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'spnThreshold' AS spn WITH ;
		Anchor = 9, ;
		Left = 232, ;
		Name = "spnThreshold", ;
		TabIndex = 9, ;
		Top = 198, ;
		Width = 93, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />
	
	PROCEDURE addgroup
		*===============================================================
		* AddBand()
		*
		* Add a new item to the list with the next available band number.
		* The band numbers will always increment, even if you delete some
		* before adding more. No big deal. They get re-numbered next time 
		* frxCursor::createBandCursor() or whatever is run.
		*===============================================================
		
		local cExpression
		cExpression = THIS.event.GetExpression( "", "", "BandGroupOnExpression" )
		
		if not empty( m.cExpression )
			*------------------------------------
			* Add the new band
			*------------------------------------
		
			THIS.groupCount = THIS.groupCount + 1
		
			local cUniqueId
			cUniqueId = sys(2015)
		
			THIS.groupList.AddListItem( m.cExpression, THIS.groupCount, 1)
			THIS.groupList.AddListItem( m.cUniqueId,   THIS.groupCount, 2)
		
			insert into groups ;
				( UNIQUEID, EXPR, PAGINATE, REPRINT, THRESH, FOOTER_ID  ) ;
			values ;
				( m.cUniqueId, ".T.", 1, .F., 0.0, sys(2015) )
		
			THIS.groupList.ListIndex = THIS.groupList.listCount
			THIS.groupList.InteractiveChange()
		
			THIS.edtExpr.Value = m.cExpression
			THIS.edtExpr.SetFocus()
			THIS.RefreshEnabledState()
			THIS.bufferIsDirty = .T.
		
		endif		
		
	ENDPROC

	PROCEDURE Init
		if not dodefault()
			return .F.
		endif
		
	ENDPROC

	PROCEDURE loadfromfrx
		*===============================================================
		* LoadFromFrx()
		*===============================================================
		*------------------------------------------
		* If the NO_GROUP protection flag is set on the report header,
		* this control panel should not be visible:
		*---------------------------------------
		if THIS.Event.Protected
			local lcProtFlags
			lcProtFlags = THIS.frxCursor.getReportAttribute("PROTECTION")
			
			if THIS.frxCursor.hasProtectionFlag( lcProtFlags, FRX_PROTECT_REPORT_NO_GROUP )
				THIS.Visible = .F.
				return
			endif
		endif
		
		*---------------------------------------
		* Read the panel control values from the FRX record(s)
		*---------------------------------------
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			local cCurrObject, i
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*------------------------------------------------------------
			* Set the units of the measurement spinner:
			*------------------------------------------------------------
			local iUnits
			iUnits = THIS.frxCursor.getReportAttribute("UNITS")
			THIS.event.unitConverter.units = m.iUnits
			THIS.spnThreshold.Increment = THIS.event.unitConverter.getSpinnerIncrement()
			THIS.spnThreshold.InputMask = THIS.event.unitConverter.getSpinnerInputMask()
		
			*------------------------------------------------------------
			* Data Groups: number of (9,3) records in FRX
			*------------------------------------------------------------
			this.frxCursor.createGroupCursor()
		
			select groups
			i = 0
			scan 
				i = m.i + 1
				THIS.groupList.AddListItem(trim(EXPR), m.i, 1)
				THIS.groupList.AddListItem(UNIQUEID,  m.i, 2)
			endscan	
		
			THIS.groupCount = m.i
			if i > 0
				THIS.groupList.Value = 1
			endif
			
			THIS.refreshEnabledstate()
			 
			select (THIS.Tag)
			locate for UNIQUEID = m.cCurrObject
		
			THIS.edtExpr.ControlSource      = "groups.EXPR"
			THIS.opgPaginate.ControlSource  = "groups.PAGINATE"
			THIS.chkReprint.ControlSource   = "groups.REPRINT"
			THIS.spnThreshold.ControlSource = "groups.THRESH"
		
		endif
	ENDPROC

	PROCEDURE refreshenabledstate
		if eof("groups")
			THIS.opgPaginate.enabled = .F.
		else
			THIS.opgPaginate.enabled = .T.
		endif
		
		THIS.cmdRemove.Enabled = (THIS.groupList.ListCount > 0) ;
				 and (THIS.groupList.ListItemId > 0)
		*---------------------------------------------
		* Fix for SP1: 74 groups are legal, not 20!
		*---------------------------------------------
		*THIS.cmdAdd.Enabled    = (THIS.groupList.ListCount < 20 )
		THIS.cmdAdd.Enabled    = (THIS.groupList.ListCount < 74 )
		
		*-------------------------------------------------------
		* You can only choose "start on new column" when 
		* there are more than 1 columns:
		*-------------------------------------------------------
		THIS.opgPaginate.opt2.Enabled = THIS.frxCursor.getReportAttribute("MULTICOLUMN") and ;
										THIS.groupList.ListIndex > 0
		
		THIS.cmdGetExpr.Enabled = (THIS.groupList.ListIndex > 0)
	ENDPROC

	PROCEDURE removegroup
		*===============================================================
		* RemoveGroup()
		* 
		* Delete the currently selected band item from the list:
		*===============================================================
		local currentIndex, cGroupExpr, cBandId, iObjectCount
		local lWarnBeforeDelete, oBandObjects, iCount
		local curSel
		curSel = select(0)
		
		with THIS.groupList
			*------------------------------------------------------------
			* Get the uniqueID of the band from the selected item:
			*------------------------------------------------------------
			currentIndex = .ItemIdToIndex( .listItemId )
			
			cGroupExpr = .List( m.currentIndex, 1 )
			cBandId    = .List( m.currentIndex, 2 )
			
			select groups
			locate for UNIQUEID = m.cBandId
		
			*------------------------------------------------------------
			* Before we remove a band, we need to ensure that 
			* the objects contained in the band (header & footer)are 
			* dealt with or at least warn about the presence of them.
			*------------------------------------------------------------
			lWarnBeforeDelete = .F.
			oBandObjects = THIS.frxCursor.getObjectsInBand( m.cBandId )
			iCount = oBandObjects.Count
			oBandObjects = THIS.frxCursor.getObjectsInBand( groups.FOOTER_ID )
			iCount = m.iCount + oBandObjects.Count	
				
			if m.iCount > 0
				cText = strtran( GROUP_BAND_REMOVE_WARN_LOC, "{%1}", trans(m.iCount) )
				lnResult = messagebox( m.cText, 256+48+4, DEFAULT_MBOX_TITLE_LOC )
			else
				lnResult = 6 && Yes
			endif
		
			if m.lnResult = 6 && Yes
				*------------------------------------------------------------
				* Remove the band from the list:
				*------------------------------------------------------------
				.RemoveListItem( .ListItemId )		
				THIS.groupCount = THIS.groupCount - 1
				*THIS.groupList.ListIndex = THIS.groupCount		
			endif 
			
		endwith
		*------------------------------------------------------------
		* Put the list on no row
		*------------------------------------------------------------
		THIS.groupList.ListIndex = 0
		
		*------------------------------------------------------------
		* Put the groups cursor on eof:
		*------------------------------------------------------------
		go bottom in groups
		skip in groups
		
		select (m.curSel)
		
		THIS.RefreshEnabledState()
		THIS.bufferIsDirty = .T.
		THIS.Refresh()
		
	ENDPROC

	PROCEDURE savetofrx
		*===============================================================
		* SaveToFrx()
		*
		* Write the control values back into the FRX record(s)
		*
		* The groups could have been re-ordered
		* The groups could have deleted
		* The groups could have been added
		*===============================================================
		
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
			set filter to PLATFORM = FRX_PLATFORM_WINDOWS and not deleted()
		
			local cCurrObject	
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*-------------------------------------------------------------
			* Group Header: (9,3) records in FRX
			* Group Footer: (9,5)
			*-------------------------------------------------------------
			
			*-------------------------------------------------------------
			* 0. Refresh the store the current bands and objects	
			*-------------------------------------------------------------
			THIS.frxCursor.createBandCursor()
			THIS.frxCursor.createObjectCursor()
		
			*-------------------------------------------------------------
			* 1. Construct the beginning of a shadow frx:
			*    (NB: SQL Select does not respect current filter)
			*-------------------------------------------------------------
			select * ;
				from (THIS.Tag) ;
				where not deleted() and PLATFORM = FRX_PLATFORM_WINDOWS and ;
					((OBJTYPE = FRX_OBJTYP_REPORTHEADER and OBJCODE = FRX_OBJCOD_REPORTHEADER) ;
				   or (OBJTYPE = FRX_OBJTYP_BAND and ;
				     inlist(OBJCODE, FRX_OBJCOD_TITLE, FRX_OBJCOD_PAGEHEADER, FRX_OBJCOD_COLHEADER ))) ;
				into cursor newfrx readwrite
		
			*-------------------------------------------------------------
			* Make sure we're at the bottom of the new frx:
			*-------------------------------------------------------------
			go bottom in newfrx
			
			local i, cGroupId, lColBreak, lPageBreak, lResetPage, oRow
		
			*-------------------------------------------------------------
			* 2. Add in the group headers in the order dictated by the list:
			*-------------------------------------------------------------
			for i = 1 to THIS.groupList.listCount
		
			    *cBandName = THIS.groupList.List(i,1)
				cGroupId   = THIS.groupList.List(i,2)
		
				*-------------------------------------------------------------
				* synch up the groups cursor record pointer:
				*-------------------------------------------------------------
				select groups
				locate for UNIQUEID = m.cGroupId
						
				*-------------------------------------------------------------
				* convert the pagination value into the logical flags:
				*-------------------------------------------------------------
				store .F. to lColBreak, lPageBreak, lResetPage
					
				do case
				case groups.PAGINATE = 2
					lColBreak = .T.
					
				case groups.PAGINATE = 3
					lPageBreak = .T.					
					
				case groups.PAGINATE = 4
					store .T. to lPageBreak, lResetPage
				endcase
						
				*-------------------------------------------------------------
				* is this band in the current FRX:
				*-------------------------------------------------------------
				select bands
				locate for UNIQUEID = groups.UNIQUEID
				if found()
					*-------------------------------------------------------------
					* Copy the band into the shadow frx:
					*-------------------------------------------------------------
					select (THIS.Tag)
					locate for UNIQUEID = groups.UNIQUEID
					if found()
					
						scatter memo name oRow
						
						*-------------------------------------------------------------
						* Update the row attributes from the group cursor:
						*-------------------------------------------------------------
					    *oRow.UNIQUEID = groups.UNIQUEID  && this is already true
						oRow.EXPR      = trim(groups.EXPR)
						oRow.NOREPEAT  = groups.REPRINT
						oRow.WIDTH     = THIS.event.unitConverter.getFruValueOf(groups.THRESH)
						oRow.COLBREAK  = m.lColBreak
						oRow.PAGEBREAK = m.lPageBreak
						oRow.RESETPAGE = m.lResetPage
		
						select newfrx
						insert into newfrx from name oRow			
						select (THIS.Tag)
					endif
				else
					*-------------------------------------------------------------
					* Add a new group header band into the frx:
					*-------------------------------------------------------------
					select newfrx
					THIS.frxCursor.insertBand( FRX_OBJCOD_GROUPHEADER )
					replace ;
						UNIQUEID   with groups.UNIQUEID, ;
						EXPR       with trim(groups.EXPR), ;
						NOREPEAT   with groups.REPRINT, ;
						WIDTH      with THIS.event.unitConverter.getFruValueOf(groups.THRESH), ;
						COLBREAK   with m.lColBreak, ;
						PAGEBREAK  with m.lPageBreak, ;
						RESETPAGE  with m.lResetPage
				endif						
				
			endfor
		
			*-------------------------------------------------------------
			* 3. Add in the detail band records:
			*-------------------------------------------------------------
			select (THIS.Tag)
			go top
			locate for OBJTYPE = FRX_OBJTYP_BAND and ;
				inlist(OBJCODE, FRX_OBJCOD_DETAILHEADER, FRX_OBJCOD_DETAIL, FRX_OBJCOD_DETAILFOOTER) 
				
			if found()
				scan rest while OBJTYPE = FRX_OBJTYP_BAND and ;
								inlist(OBJCODE, FRX_OBJCOD_DETAILHEADER, FRX_OBJCOD_DETAIL, FRX_OBJCOD_DETAILFOOTER) 
		
					scatter memo name oRow
					select newfrx
					insert into newfrx from name oRow			
					select (THIS.Tag)
		
				endscan
			endif
			
			*-------------------------------------------------------------
			* 4. Add in the group footers in the reverse order dictated by the list:
			*-------------------------------------------------------------
			for i = THIS.groupList.listCount to 1 step -1
		
			    *cBandName = THIS.groupList.List(i,1)
				cGroupId   = THIS.groupList.List(i,2)
		
				*-------------------------------------------------------------
				* synch up the groups cursor record pointer:
				*-------------------------------------------------------------
				select groups
				locate for UNIQUEID = m.cGroupId
						
				*-------------------------------------------------------------
				* convert the pagination value into the logical flags:
				*-------------------------------------------------------------
				store .F. to lColBreak, lPageBreak, lResetPage
					
				do case
				case groups.PAGINATE = 2
					lColBreak = .T.
					
				case groups.PAGINATE = 3
					lPageBreak = .T.					
					
				case groups.PAGINATE = 4
					store .T. to lPageBreak, lResetPage
				endcase
						
				*-------------------------------------------------------------
				* is this band in the current FRX:
				*-------------------------------------------------------------
				select bands
				locate for UNIQUEID = groups.FOOTER_ID
				if found()
					*-------------------------------------------------------------
					* Copy the band into the shadow frx:
					*-------------------------------------------------------------
					select (THIS.Tag)
					locate for UNIQUEID = groups.FOOTER_ID 
					if found()
					
						scatter memo name oRow
						
						*-------------------------------------------------------------
						* Update the row attributes from the group cursor:
						*-------------------------------------------------------------
					    *oRow.UNIQUEID = groups.FOOTER_ID  && this is already true
						oRow.NOREPEAT  = groups.REPRINT
						oRow.WIDTH     = THIS.event.unitConverter.getFruValueOf(groups.THRESH)
						oRow.COLBREAK  = m.lColBreak
						oRow.PAGEBREAK = m.lPageBreak
						oRow.RESETPAGE = m.lResetPage
		
						select newfrx
						insert into newfrx from name oRow			
						select (THIS.Tag)
					endif
				else
					*-------------------------------------------------------------
					* Add the matching group footer band into the frx.
					* Note:footers do not have the EXPR field filled.
					*-------------------------------------------------------------
					select newfrx
					THIS.frxCursor.insertBand( FRX_OBJCOD_GROUPFOOTER )
					replace ;
						UNIQUEID   with groups.FOOTER_ID, ;
						NOREPEAT   with groups.REPRINT, ;
						WIDTH      with THIS.event.unitConverter.getFruValueOf(groups.THRESH), ;
						COLBREAK   with m.lColBreak, ;
						PAGEBREAK  with m.lPageBreak, ;
						RESETPAGE  with m.lResetPage
				endif						
				
			endfor
		
			*-------------------------------------------------------------
			* 5. Add in the rest of the x-footer bands:
			*-------------------------------------------------------------
			select (THIS.Tag)
			go top
			locate for OBJTYPE = FRX_OBJTYP_BAND and ;
				inlist(OBJCODE, FRX_OBJCOD_COLFOOTER, FRX_OBJCOD_PAGEFOOTER, FRX_OBJCOD_SUMMARY) 
				
			if found()
				scan rest while OBJTYPE = FRX_OBJTYP_BAND and ;
				inlist(OBJCODE, FRX_OBJCOD_COLFOOTER, FRX_OBJCOD_PAGEFOOTER, FRX_OBJCOD_SUMMARY) 
		
					scatter memo name oRow
					select newfrx
					insert into newfrx from name oRow			
					select (THIS.Tag)
		
				endscan
			endif
		
			*-------------------------------------------------------------
			* 5. Copy objects from the old FRX that are in any band in 
			*    the new frx:
			*-------------------------------------------------------------
			select objects
			scan
				select newfrx
				locate for UNIQUEID = objects.START_BAND_ID
				if found()
					select (THIS.Tag)
					locate for UNIQUEID = objects.UNIQUEID 
					if found()
						scatter memo name oRow
						select newfrx
						insert into newfrx from name oRow			
					endif
				endif
				select objects
			endscan
		
			*-------------------------------------------------------------
			* 6. Add remaining records into the shadow frx:
			*-------------------------------------------------------------
			select (THIS.Tag)
			go top
			locate for inlist( OBJTYPE, FRX_OBJTYP_WORKAREA, FRX_OBJTYP_INDEX, FRX_OBJTYP_RELATION, FRX_OBJTYP_GROUP, FRX_OBJTYP_VARIABLE, FRX_OBJTYP_PDRIVER, FRX_OBJTYP_FONTRES, FRX_OBJTYP_DATAENV, FRX_OBJTYP_DATAOBJ ) 
		
			if found()
				scan rest for inlist( OBJTYPE, FRX_OBJTYP_WORKAREA, FRX_OBJTYP_INDEX, FRX_OBJTYP_RELATION, FRX_OBJTYP_GROUP, FRX_OBJTYP_VARIABLE, FRX_OBJTYP_PDRIVER, FRX_OBJTYP_FONTRES, FRX_OBJTYP_DATAENV, FRX_OBJTYP_DATAOBJ ) 
								
					scatter memo name oRow
					select newfrx
					insert into newfrx from name oRow			
					select (THIS.Tag)
		
				endscan
			endif
		
			*-------------------------------------------------------------
			* 7. Replace the FRX cursor:
			*-------------------------------------------------------------
			select (THIS.Tag)
			set filter to
			
			* Pull out the other platform records:
			select * ;
				from (THIS.Tag) ;
				where PLATFORM <> FRX_PLATFORM_WINDOWS ;
				into cursor other_platforms readwrite
			select (THIS.Tag)
			zap
			append from dbf('newfrx')
			if reccount('other_platforms') > 0
				append From dbf('other_platforms')
			endif
			use in newfrx
			use in other_platforms
			
			*-------------------------------------------------------------
			* 8. Regenerate the band cursor from the new FRX:
			*-------------------------------------------------------------
			THIS.frxCursor.createBandCursor()
			
			*-------------------------------------------------------------
			* 9 . Resync the object absolute positions relative to the bands:
			*-------------------------------------------------------------
			select (THIS.Tag)
			THIS.frxCursor.synchObjectPositions()
		
			*-------------------------------------------------------------
			* Done.	
			*-------------------------------------------------------------
			select (THIS.Tag)
			locate for UNIQUEID = cCurrObject
		
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
		
		endif
	ENDPROC

	PROCEDURE chkReprint.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_CHK_REPRINT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkReprint.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE cmdAdd.Click
		THIS.Parent.AddGroup()
		
	ENDPROC

	PROCEDURE cmdAdd.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_ADD_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdGetExpr.Click
		if not eof("groups")
			local cDefaultExpr, cExpression
			cDefaultExpr = this.Parent.edtExpr.Value
			cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "", "BandGroupOnExpression" )
			THIS.Parent.edtExpr.Value = m.cExpression
			THIS.Parent.bufferIsDirty = .T.	
			THIS.Parent.edtExpr.SetFocus()
		endif
	ENDPROC

	PROCEDURE cmdRemove.Click
		THIS.Parent.RemoveGroup()
	ENDPROC

	PROCEDURE cmdRemove.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_REMOVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE edtExpr.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE edtExpr.Valid
		*-------------------------------------------------------------------
		* Let them press the ESC key, or Cancel
		*-------------------------------------------------------------------
		if lastkey()=27
			return .T.
		endif
		
		*-------------------------------------------------------------------
		* This value cannot be empty
		*-------------------------------------------------------------------
		if empty(THIS.Value)
			return .F.
		endif
		
		*-------------------------------------------------------------------
		* Update the group list expression
		*-------------------------------------------------------------------
		local currentIndex
		with THIS.Parent.groupList
			currentIndex = .ItemIdToIndex( .listItemId )
			.AddListItem( trim(THIS.Value), m.currentIndex, 1 )
		endwith
		
	ENDPROC

	PROCEDURE groupList.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE groupList.InteractiveChange
		*-------------------------------------------------------------------
		* Locate the groups cursor on the right record
		*-------------------------------------------------------------------
		local currentIndex, cBandId 
		currentIndex = THIS.ItemIdToIndex( THIS.listItemId )
		cBandId      = THIS.List( m.currentIndex, 2 )
		select groups
		locate for UNIQUEID = m.cBandId
		THIS.Parent.Refresh()
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE groupList.ProgrammaticChange
		THIS.InteractiveChange()
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_LBL_NESTING_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_LBL_GROUP_ON_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_LBL_STARTS_ON_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblThreshold.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_LBL_THRESHOLD_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPaginate.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE opgPaginate.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_OPT_NEW_LINE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPaginate.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_OPT_NEW_COL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPaginate.Opt3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_OPT_NEW_PAGE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPaginate.Opt4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_GROUPING_OPT_NEW_PAGE1_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE spnThreshold.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

ENDDEFINE

DEFINE CLASS panelmemberdata AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblScriptText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblScriptCaption" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: editsettings
		*p: execwhen
		*p: scripttext
	*</DefinedPropArrayMethod>

	execwhen = ("")
	Height = 86
	Name = "panelmemberdata"
	scripttext = ("")
	Width = 319

	ADD OBJECT 'cmdScript' AS cmd WITH ;
		Caption = "Edit settings...", ;
		Left = 188, ;
		Name = "cmdScript", ;
		TabIndex = 3, ;
		Top = 60, ;
		Width = 120, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'imgScript' AS image WITH ;
		Height = 32, ;
		Left = 8, ;
		Name = "imgScript", ;
		Picture = images\frxscript.bmp, ;
		Top = 22, ;
		Width = 32, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblScriptCaption' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = "Run-time extensions ", ;
		Left = 2, ;
		Name = "lblScriptCaption", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblScriptText' AS lbl WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "See OTHER_EDIT_METADATA_LOC ", ;
		Height = 63, ;
		Left = 56, ;
		Name = "lblScriptText", ;
		TabIndex = 2, ;
		Top = 18, ;
		Width = 252, ;
		WordWrap = .T., ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shape4' AS shape WITH ;
		Height = 2, ;
		Left = 5, ;
		Name = "Shape4", ;
		SpecialEffect = 0, ;
		Top = 9, ;
		Width = 300, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE editsettings
		*----------------------------------------------------------------
		* Launch a multi-line edit window
		*----------------------------------------------------------------
		local loEditor
		loEditor     = THIS.Event.GetExtensionEditor()
		if not isnull( m.loEditor )
			*------------------------------------
			* Give it the current FRX alias:
			*------------------------------------
			loEditor.Tag = THIS.Tag
			loEditor.Execute( THIS.Event )
		endif
		
	ENDPROC

	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			*-------------------------------------------
			* New for SP1:
			* if there is no extension class, 
			* do not show the runtime extension panel:
			*-------------------------------------------
			if not this.event.LocateExtensionClass( HANDLREG_RTEXTEND )
				THIS.Visible = .F.
				return
			endif
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE savetofrx
		return .T.
	ENDPROC

	PROCEDURE setprotection
		if THIS.event.protected
			
			* Make the Script panel invisible in protected mode:
		
			THIS.Visible = .F.
				
		*	store .F. to ;
				THIS.shpScript.Visible, ;
				THIS.lblScriptCaption.Visible, ;
				THIS.lblScriptText.Visible, ;
				THIS.imgScript.Visible, ;
				THIS.cmdScript.Visible
				
		*	if THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_OBJECT_NO_EDIT)
		*				
		*	endif
		
		endif
	ENDPROC

	PROCEDURE cmdScript.Click
		THIS.Parent.EditSettings()
	ENDPROC

	PROCEDURE cmdScript.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MEMBERDATA_CMD_EDIT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblScriptCaption.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MEMBERDATA_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblScriptText.Init
		THIS.Caption = OTHER_EDIT_METADATA_LOC
	ENDPROC

ENDDEFINE

DEFINE CLASS panelmultiprintwhen AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="removeBlank" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Expression" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL3" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: setenabledstate
		*p: obandend		&& see THIS.LoadFromFrx()
		*p: obandstart		&& see THIS.LoadFromFrx()
	*</DefinedPropArrayMethod>

	Height = 67
	Name = "panelmultiprintwhen"
	obandend = .NULL.		&& see THIS.LoadFromFrx()
	obandstart = .NULL.		&& see THIS.LoadFromFrx()
	Width = 279

	ADD OBJECT 'cmdGetExpr' AS cmd WITH ;
		Caption = "...", ;
		Height = 22, ;
		Left = 247, ;
		Name = "cmdGetExpr", ;
		TabIndex = 4, ;
		Top = 41, ;
		Width = 21, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Expression' AS edt WITH ;
		Height = 22, ;
		Left = 2, ;
		Name = "Expression", ;
		ScrollBars = 0, ;
		TabIndex = 3, ;
		Top = 41, ;
		Width = 240, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'LBL3' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Print only when expression is true:", ;
		Left = 2, ;
		Name = "LBL3", ;
		Style = 0, ;
		TabIndex = 2, ;
		Top = 24, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'removeBlank' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<Remove line if blank", ;
		Left = 2, ;
		Name = "removeBlank", ;
		TabIndex = 1, ;
		Top = 4, ;
		Value = .F., ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />
	
	PROCEDURE enabled_assign
		lparameter lEnabled
		
		dodefault( lEnabled )
		
		for each oControl in this.Controls
			if inlist( oControl.BaseClass, "Label", "Commandbutton", "Editbox", "Textbox", "Checkbox" )
				oControl.Enabled = m.lEnabled
			endif
		endfor
		
	ENDPROC

	PROCEDURE loadfromfrx
		if used(this.Tag)
			select (this.Tag)
		
			THIS.Expression.Value = trim(SUPEXPR)
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE savetofrx
		if used(this.Tag)
			select (this.Tag)
			
			replace NOREPEAT	with THIS.removeBlank.Value, ;
					SUPEXPR   	with trim(THIS.Expression.Value)
		
		endif
	ENDPROC

	PROCEDURE setenabledstate
	ENDPROC

	PROCEDURE cmdGetExpr.Click
		local cExpression, cDefaultExpr
		cExpression  = ""
		cDefaultExpr = THIS.Parent.Expression.Value
		
		cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "L", "PrintWhenExpression" )
		
		THIS.Parent.Expression.Value = m.cExpression
	ENDPROC

	PROCEDURE LBL3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTIPRINTWHEN_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE removeBlank.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_CHK_REMOVE_BLANK_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelmultiselect AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstGroupItems" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="obgSortOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdUnselect" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: populatelist
		*m: refineselection
		*m: showbuilder
		*p: ids
		*p: imode
		*p: listalias
	*</DefinedPropArrayMethod>

	Height = 154
	ids = .NULL.
	listalias = multisel
	Name = "panelmultiselect"
	Width = 359

	ADD OBJECT 'cmdUnselect' AS cmd WITH ;
		Anchor = 6, ;
		Caption = "Remove from list", ;
		Enabled = .F., ;
		Left = 216, ;
		Name = "cmdUnselect", ;
		ToolTipText = "Removes selected items from the list", ;
		Top = 122, ;
		Width = 136
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'LBL1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Object", ;
		Left = 3, ;
		Name = "LBL1", ;
		TabIndex = 1, ;
		Top = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Anchor = 6, ;
		Caption = " Sort by ", ;
		Left = 8, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 5, ;
		Top = 111
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl4' AS lbl WITH ;
		Anchor = 32, ;
		BackStyle = 0, ;
		Caption = "Location at run-time", ;
		Left = 180, ;
		Name = "Lbl4", ;
		TabIndex = 2, ;
		Top = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lstGroupItems' AS lst WITH ;
		Anchor = 15, ;
		Height = 89, ;
		Left = 1, ;
		MultiSelect = .T., ;
		Name = "lstGroupItems", ;
		TabIndex = 4, ;
		Top = 20, ;
		Value = 0, ;
		Width = 351
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="listbox" />

	ADD OBJECT 'obgSortOrder' AS opg WITH ;
		Anchor = 6, ;
		ButtonCount = 2, ;
		Height = 33, ;
		Left = 2, ;
		Name = "obgSortOrder", ;
		TabIndex = 6, ;
		Top = 118, ;
		Value = 1, ;
		Width = 194, ;
		Opt1.Caption = "\<Type", ;
		Opt1.Left = 9, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 11, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "\<Location", ;
		Opt2.Left = 97, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />
	
	PROCEDURE loadfromfrx
		if not used(THIS.Tag)
			return .f.
		endif
		
		select (THIS.Tag)
		
		THIS.listAlias = "multisel"
		THIS.iMode     = OBJCSR_FILTER_ON_SELECTED
		
		THIS.PopulateList()
		
		select (THIS.Tag)
		return
	ENDPROC

	PROCEDURE populatelist
		*-------------------------------
		* Create an object cursor using
		* run-time location algorithm
		*-------------------------------
		
		THIS.frxCursor.createObjectCursor(THIS.Tag, THIS.listAlias, THIS.iMode, .T. )
		
		do case
		case THIS.obgSortOrder.Value = OBJCSR_SORTORDER_TYPE
			select UNIQUEID, OBJTYPE, OBJNAME, BANDLABEL, OBJ_PICT, SELECTED, BAND_SEQ, TYPE_SEQ, upper(OBJNAME) as DESCRIPT ;
				from (THIS.listAlias) ;
				where not deleted() ;
				order by TYPE_SEQ, DESCRIPT ;
				into cursor tmpObj
		
		case THIS.obgSortOrder.Value = OBJCSR_SORTORDER_BAND
			select UNIQUEID, OBJTYPE, OBJNAME, BANDLABEL, OBJ_PICT, SELECTED, BAND_SEQ, TYPE_SEQ, upper(OBJNAME) as DESCRIPT ;
				from (THIS.listAlias) ;
				where not deleted() ;
				order by BAND_SEQ, DESCRIPT ;
				into cursor tmpObj
		
		endcase
		
		with THIS.lstGroupItems
		
			.Clear()
			.ColumnCount = 2
			.ColumnLines = .F.
		
			THIS.ids = newobject("Collection")
		
			select tmpObj
			scan 
				THIS.ids.Add( UNIQUEID )		
		
				.AddListItem( OBJNAME,   recno(), 1 ) 
				.AddListItem( BANDLABEL, recno(), 2 ) 
		
				*-----------------------------------------------------
				* I don't think this path thing should be necessary:
				*-----------------------------------------------------
				.Picture[ recno() ] = THIS.event.builderpath+"images\"+trim( OBJ_PICT )
		
			endscan
		
			THIS.Resize()
		
			if .ListCount = 0
				THIS.cmdUnselect.Enabled = .F.
			endif
		
		endwith
		use in tmpObj
		
	ENDPROC

	PROCEDURE refineselection
		
		local i, curSel, curRec
		curSel = select(0)
		select frx
		curRec = recno()
		
		for i = 1 to THIS.lstGroupItems.ListCount
			if THIS.lstGroupItems.Selected(m.i)
		
				cRecID = THIS.ids(m.i)
		
				select frx
				locate for UNIQUEID = THIS.ids(m.i)
				replace CURPOS with .F.
		
			endif
		endfor
		
		THIS.frxCursor.gorec(m.curRec,"frx")
		select (m.curSel)
		
		THIS.PopulateList()
	ENDPROC

	PROCEDURE refreshenabledstate
		local isSelected
		isSelected = .F.
		for i = 1 to THIS.lstGroupItems.ListCount
			if THIS.lstGroupItems.Selected(m.i)
				isSelected = .T.
				exit
			endif
		endfor
		THIS.cmdUnselect.Enabled = m.isSelected
		
	ENDPROC

	PROCEDURE Resize
		with THIS.lstGroupItems
			local iColWidth
			iColWidth = int(.Width/2) 
			.ColumnWidths = trans(m.iColWidth)+","+trans(m.iColWidth)
		endwith
		
	ENDPROC

	PROCEDURE savetofrx
		if not used(THIS.Tag)
			return .f.
		endif
		select (THIS.Tag)
		
		* Nothing to do.
		
		return .T.
	ENDPROC

	PROCEDURE showbuilder
		if isnull( THIS.ids ) or THIS.ids.Count = 0
			return
		endif
		
		*--------------------------------------------------------------
		* Launch the builder on the selected record.
		*--------------------------------------------------------------
		select (THIS.Tag)
		local curRec, iListValue, iSelCount
		curRec = recno()
		iListValue = THIS.lstGroupItems.Value
		iSelCount = THIS.event.selectedObjectCount
		THIS.event.selectedObjectCount = 1
		
		locate for UNIQUEID = THIS.ids.Item( THIS.lstGroupItems.ListItemId)
		THIS.event.Handle( OBJTYPE, OBJCODE )
		
		THIS.event.selectedObjectCount = m.iSelCount
		
		go m.curRec in (THIS.Tag)
		
		
		THIS.PopulateList()
		THIS.lstGroupItems.Value = m.iListValue
	ENDPROC

	PROCEDURE cmdUnselect.Click
		THIS.Parent.RefineSelection()
	ENDPROC

	PROCEDURE cmdUnselect.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTISELECT_CMD_REMOVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LBL1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTISELECT_LBL_OBJECT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTISELECT_LBL_SORT_BY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTISELECT_LBL_BAND_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lstGroupItems.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE lstGroupItems.DblClick
		*--------------------------------------------------------------
		* Locate the record in objgroup matching the current selected
		* list item:
		*--------------------------------------------------------------
		THIS.Parent.ShowBuilder()
		
	ENDPROC

	PROCEDURE obgSortOrder.InteractiveChange
		THIS.Parent.PopulateList()
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE obgSortOrder.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTISELECT_OPT_TYPE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE obgSortOrder.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_MULTISELECT_OPT_LOCATION_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelobjectprotection AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkObjectLock" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkObjectNoEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkObjectHidden" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkObjectNoDelete" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkObjectNoSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 198
	Name = "panelobjectprotection"
	Width = 329

	ADD OBJECT 'chkObjectHidden' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Object is not \<visible in Designer", ;
		Left = 17, ;
		Name = "chkObjectHidden", ;
		TabIndex = 5, ;
		Top = 172, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkObjectLock' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Object cannot be \<moved or resized", ;
		Left = 17, ;
		Name = "chkObjectLock", ;
		TabIndex = 1, ;
		Top = 84, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkObjectNoDelete' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Object cannot be \<deleted", ;
		Left = 17, ;
		Name = "chkObjectNoDelete", ;
		TabIndex = 3, ;
		Top = 128, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkObjectNoEdit' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<Properties dialog box is not available", ;
		Left = 17, ;
		Name = "chkObjectNoEdit", ;
		TabIndex = 2, ;
		Top = 106, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkObjectNoSelect' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Object cannot be \<selected", ;
		Left = 17, ;
		Name = "chkObjectNoSelect", ;
		TabIndex = 4, ;
		Top = 150, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		Caption = " When in PROTECTED mode ", ;
		Left = 10, ;
		Name = "Lbl1", ;
		Style = 3, ;
		TabIndex = 6, ;
		Top = 0, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "The following restrictions will apply to this report control when the layout is modified in protected mode:", ;
		Height = 59, ;
		Left = 8, ;
		Name = "Lbl2", ;
		Top = 21, ;
		Width = 312, ;
		WordWrap = .T.
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 189, ;
		Left = 0, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 7, ;
		Width = 324, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE enabled_assign
		lparameter lEnabled
		
		dodefault( lEnabled )
		
		for each oControl in this.Controls
			if inlist( oControl.BaseClass, "Label", "Checkbox" )
				oControl.Enabled = m.lEnabled
			endif
		endfor
		
	ENDPROC

	PROCEDURE loadfromfrx
		if THIS.event.protected
			THIS.Visible = .F.	
			return
		endif
		
		if used(this.Tag)
		
			select (this.Tag)
		
			local iProtFlags
			iProtFlags = this.frxcursor.BinstringToInt( ORDER ) 
			
			THIS.chkObjectLock.Value     = bittest( m.iProtFlags, FRX_PROTECT_OBJECT_LOCK)
			THIS.chkObjectHidden.Value   = bittest( m.iProtFlags, FRX_PROTECT_OBJECT_HIDE)
			THIS.chkObjectNoDelete.Value = bittest( m.iProtFlags, FRX_PROTECT_OBJECT_NO_DELETE)
			THIS.chkObjectNoEdit.Value   = bittest( m.iProtFlags, FRX_PROTECT_OBJECT_NO_EDIT)
			THIS.chkObjectNoSelect.Value = bittest( m.iProtFlags, FRX_PROTECT_OBJECT_NO_SELECT)
		
			THIS.RefreshEnabledState()
		
			*----------------------------------------
			* Normally, you'd set this here. But this is a special case.
			* If PROTECTED is on, then this won't be visible.
			*----------------------------------------
			*THIS.SetProtection()
			
		endif	
		
	ENDPROC

	PROCEDURE refreshenabledstate
		if THIS.chkObjectHidden.Value
		*	store .T. to ;
				THIS.chkObjectLock.Value, ;
				THIS.chkObjectNoDelete.Value, ;
				THIS.chkObjectNoEdit.Value, ;
				THIS.chkObjectNoSelect.Value
		
		*	store .F. to ;
				THIS.chkObjectLock.Enabled, ;
				THIS.chkObjectNoDelete.Enabled, ;
				THIS.chkObjectNoEdit.Enabled, ;
				THIS.chkObjectNoSelect.Enabled
		
		else
			store .T. to THIS.chkObjectNoSelect.Enabled
		endif
		
		if THIS.chkObjectNoSelect.Value
		*	store .T. to ;
				THIS.chkObjectLock.Value, ;
				THIS.chkObjectNoDelete.Value, ;
				THIS.chkObjectNoEdit.Value
		
		*	store .F. to ;
				THIS.chkObjectLock.Enabled, ;
				THIS.chkObjectNoDelete.Enabled, ;
				THIS.chkObjectNoEdit.Enabled
		
		else
			store .T. to ;
				THIS.chkObjectLock.Enabled, ;
				THIS.chkObjectNoDelete.Enabled, ;
				THIS.chkObjectNoEdit.Enabled
		endif
		
	ENDPROC

	PROCEDURE savetofrx
		if used(this.Tag)
			select (this.Tag)
			
			local iProtection
			iProtection = 0
			
			if THIS.chkObjectLock.Value
				iProtection = bitset( iProtection, FRX_PROTECT_OBJECT_LOCK)
			endif
			if THIS.chkObjectHidden.Value
				iProtection = bitset( iProtection, FRX_PROTECT_OBJECT_HIDE)
			endif
			if THIS.chkObjectNoEdit.Value
				iProtection = bitset( iProtection, FRX_PROTECT_OBJECT_NO_EDIT)
			endif
			if THIS.chkObjectNoSelect.Value
				iProtection = bitset( iProtection, FRX_PROTECT_OBJECT_NO_SELECT)
			endif
			if THIS.chkObjectNoDelete.Value
				iProtection = bitset( iProtection, FRX_PROTECT_OBJECT_NO_DELETE)
			endif
			replace ORDER with THIS.frxCursor.IntToBinstring( m.iProtection )
		endif	
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.chkObjectHidden.Value = .F.
		THIS.chkObjectLock.Value   = .F.
		THIS.chkObjectNoDelete.Value = .F.
		THIS.chkObjectNoEdit.Value = .F.
	ENDPROC

	PROCEDURE chkObjectHidden.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPROTECT_CHK_NOT_VISIBLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkObjectHidden.InteractiveChange
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE chkObjectLock.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPROTECT_CHK_NO_RESIZE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkObjectNoDelete.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPROTECT_CHK_NO_DELETE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkObjectNoEdit.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPROTECT_CHK_NO_PROPS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkObjectNoSelect.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPROTECT_CHK_NO_SELECT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkObjectNoSelect.InteractiveChange
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPROTECT_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OBJPROTECT_LBL_TEXT_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS paneloptionalbands AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkHasTitle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkTitleNewPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkHasSummary" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSummaryNewPage" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPageHeader" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPageFooter" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 202
	Name = "paneloptionalbands"
	Width = 293

	ADD OBJECT 'chkHasSummary' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Report has su\<mmary band", ;
		Left = 12, ;
		Name = "chkHasSummary", ;
		TabIndex = 5, ;
		Top = 101
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkHasTitle' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Report has \<title band", ;
		Left = 12, ;
		Name = "chkHasTitle", ;
		TabIndex = 2, ;
		Top = 22
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPageFooter' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Include page \<footer with summary", ;
		Left = 24, ;
		Name = "chkPageFooter", ;
		TabIndex = 8, ;
		Top = 171
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPageHeader' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Include page \<header with summary", ;
		Left = 24, ;
		Name = "chkPageHeader", ;
		TabIndex = 7, ;
		Top = 148
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSummaryNewPage' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Summary prints as ne\<w page", ;
		Left = 24, ;
		Name = "chkSummaryNewPage", ;
		TabIndex = 6, ;
		Top = 125
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkTitleNewPage' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<New page after title has printed", ;
		Left = 24, ;
		Name = "chkTitleNewPage", ;
		TabIndex = 3, ;
		Top = 45
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		Caption = " Title ", ;
		Left = 10, ;
		Name = "Lbl1", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 1, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Caption = " Summary ", ;
		Left = 11, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 4, ;
		Top = 78, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 68, ;
		Left = 0, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 288, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp2' AS shp WITH ;
		Height = 111, ;
		Left = 1, ;
		Name = "Shp2", ;
		Style = 3, ;
		Top = 85, ;
		Width = 287, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE loadfromfrx
		*---------------------------------------
		* Read control panel values out of the FRX:
		*---------------------------------------
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			*------------------------------------------
			* If the NO_OPTBAND protection flag is set,
			* this control panel should not be visible:
			*---------------------------------------
			if THIS.event.Protected and ;
			   THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_REPORT_NO_OPTBAND )
				THIS.Visible = .F.
				return
			endif
		
			local cCurrObject	
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*--------------------------------------------
			* Title band:   record (9,0) exists in FRX
			*   New Page:   PAGEBREAK in (9,0) record
			*--------------------------------------------
			if THIS.frxCursor.hasBand( FRX_OBJCOD_TITLE )
				THIS.chkHasTitle.Value = .T.
				THIS.chkTitleNewPage.Enabled = .T.
		
				select (THIS.Tag)
				locate for ;
					OBJTYPE = FRX_OBJTYP_BAND and ;
					OBJCODE = FRX_OBJCOD_TITLE
				THIS.chkTitleNewPage.Value = PAGEBREAK
			else
				THIS.chkHasTitle.Value = .F.
				THIS.chkTitleNewPage.Enabled = .F.		 
			endif
		
			*--------------------------------------------
			* Summary Band: record type (9,8) exists in FRX
			*   New Page:   PAGEBREAK in (9,8) record
			*   Page Header:EJECTBEFORE in (9,8) record
			*   Page Footer:EJECTAFTER  in (9,8) record
			*--------------------------------------------
			if THIS.frxCursor.hasBand( FRX_OBJCOD_SUMMARY )
				THIS.chkHasSummary.Value = .T.
				THIS.chkSummaryNewPage.Enabled = .T.
		
				select (THIS.Tag)
				locate for ;
					OBJTYPE = FRX_OBJTYP_BAND and ;
					OBJCODE = FRX_OBJCOD_SUMMARY
		
				THIS.chkSummaryNewPage.Value = PAGEBREAK
				THIS.chkPageHeader.Value = EJECTBEFOR
				THIS.chkPageFooter.Value = EJECTAFTER
		
			else
				THIS.chkHasSummary.Value = .F.
			endif 		
		
			THIS.refreshEnabledState()
			
			select (THIS.Tag)
			locate for UNIQUEID = m.cCurrObject
		endif
	ENDPROC

	PROCEDURE refreshenabledstate
		THIS.chkTitleNewPage.Enabled   = THIS.chkHasTitle.Value
		
		*THIS.chkSummaryNewPage.Enabled = THIS.chkHasSummary.Value
		*THIS.chkPageHeader.Enabled     = THIS.chkSummaryNewPage.Value
		*THIS.chkPageFooter.Enabled     = THIS.chkSummaryNewPage.Value
		
		if THIS.chkHasSummary.Value
			*--------------------------------
			* [X] Report has summary band
			*--------------------------------
			THIS.chkSummaryNewPage.Enabled = .T.
			THIS.chkPageHeader.Enabled     = .T.
			THIS.chkPageFooter.Enabled     = .T.
		else
			*--------------------------------
			* [ ] Report has summary band
			*--------------------------------
			THIS.chkSummaryNewPage.Value   = .F.
			THIS.chkSummaryNewPage.Enabled = .F.
			THIS.chkPageHeader.Enabled     = .F.
			THIS.chkPageFooter.Enabled     = .F.
		endif
		
	ENDPROC

	PROCEDURE savetofrx
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			set filter to PLATFORM = FRX_PLATFORM_WINDOWS and not deleted()
			
			local cCurrObject, cText
			
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*--------------------------------------------------
			* Title band:   record (9,0) exists in FRX
			*   New Page:   PAGEBREAK in (9,0) record
		
			do case 
			case THIS.chkHasTitle.Value and ;
				 THIS.frxCursor.hasBand( FRX_OBJCOD_TITLE )
				 
				* We're updating an existing title band:
				select (THIS.Tag)
				locate for OBJTYPE  = FRX_OBJTYP_BAND and ;
						   OBJCODE  = FRX_OBJCOD_TITLE 
		
				replace PAGEBREAK 	with THIS.chkTitleNewPage.Value				   
				 
			case THIS.chkHasTitle.Value and ;
				not THIS.frxCursor.hasBand( FRX_OBJCOD_TITLE )
		
				* We're adding a Title band:
				*
				THIS.frxCursor.createObjectCursor()
				
				* This must be done before
				* the new bands are added. We want the BAND_ID, BAND_OFFSET
				* values to be correct prior to the new bands:
		
				select (THIS.Tag)
				THIS.frxCursor.insertTitleBand( THIS.chkTitleNewPage.Value )
				
				* Move the objects down so that they keep their relative positions:
		
				THIS.frxCursor.createBandCursor()
				select (THIS.Tag)
				THIS.frxCursor.synchObjectPositions()
				
			case not THIS.chkHasTitle.Value and ;
				THIS.frxCursor.hasBand( FRX_OBJCOD_TITLE )
				
				* We're deleting a title band:
				
				* Before we delete the title band, we need to 
				* warn the user about any objects that might be 
				* in the band that are about to be deleted.
				
				local lWarnBeforeDelete, oBandObjects
				lWarnBeforeDelete = .F.
						
				select (THIS.Tag)
				locate for OBJTYPE  = FRX_OBJTYP_BAND and ;
						   OBJCODE  = FRX_OBJCOD_TITLE 
		
				oBandObjects = THIS.frxCursor.getObjectsInBand( UNIQUEID )
				
				if oBandObjects.Count > 0
		
					cText = strtran( BAND_REMOVE_WARNING_LOC, "{%1}", trans(oBandObjects.Count) )
					cText = strtran( m.cText, "{%2}", "Title" )
					lnResult = messagebox( m.cText, 512+3+48, DEFAULT_MBOX_TITLE_LOC )
								
					do case
					case m.lnResult = 2	&& cancel
						return .F.
										
					case m.lnResult = 6 && yes
						* Remove the objects:
						select (THIS.Tag)
						for each cObjId in oBandObjects
							locate for UNIQUEID = cObjId
							delete
						endfor
						
					endcase		
				endif
				
				* Remove the band:
				select (THIS.Tag)
				locate for OBJTYPE  = FRX_OBJTYP_BAND and ;
						   OBJCODE  = FRX_OBJCOD_TITLE 
						   		
				delete
		
				* And move the remaining objects:
				*
				THIS.frxCursor.createBandCursor()
				select (THIS.Tag)
				THIS.frxCursor.synchObjectPositions()
						
			endcase
			
			*--------------------------------------------------
			* Summary Band: record type (9,8) exists in FRX
			*   New Page:   PAGEBREAK in (9,8) record
			*   Page Header:EJECTBEFORE in (9,8) record
			*   Page Footer:EJECTAFTER  in (9,8) record
		
			do case 
			case THIS.chkHasSummary.Value and ;
				 THIS.frxCursor.hasBand( FRX_OBJCOD_SUMMARY )
				 
				* We're updating an existing summary band:
				
				select (THIS.Tag)
				locate for OBJTYPE  = FRX_OBJTYP_BAND and ;
						   OBJCODE  = FRX_OBJCOD_SUMMARY
		
				replace PAGEBREAK 	with THIS.chkSummaryNewPage.Value, ;
						EJECTBEFOR  with THIS.chkPageHeader.Value, ;
						EJECTAFTER	with THIS.chkPageFooter.Value
		
			case THIS.chkHasSummary.Value and ;
				not THIS.frxCursor.hasBand( FRX_OBJCOD_SUMMARY )
		
				* Add a Summary band:
				*
				THIS.frxCursor.createObjectCursor()
				
				* This must be done before
				* the new bands are added. We want the BAND_ID, BAND_OFFSET
				* values to be correct prior to the new bands:
		
				select (THIS.Tag)
				THIS.frxCursor.insertSummaryBand( ;
						THIS.chkSummaryNewPage.Value, ;
						THIS.chkPageHeader.Value , ;
						THIS.chkPageFooter.Value )
				
				* Move the objects down so that they keep their relative positions:
		
				THIS.frxCursor.createBandCursor()
				select (THIS.Tag)
				THIS.frxCursor.synchObjectPositions()
				
			case not THIS.chkHasSummary.Value and ;
				THIS.frxCursor.hasBand( FRX_OBJCOD_SUMMARY )
				
				* Before we delete the summary band, we need to 
				* warn the user about any objects that might be 
				* in the band that are about to be deleted.
				
				local lWarnBeforeDelete, oBandObjects
				lWarnBeforeDelete = .F.
						
				select (THIS.Tag)
				locate for OBJTYPE  = FRX_OBJTYP_BAND and ;
						   OBJCODE  = FRX_OBJCOD_SUMMARY
		
				oBandObjects = THIS.frxCursor.getObjectsInBand( UNIQUEID )
				
				if oBandObjects.Count > 0
		
					cText = strtran( BAND_REMOVE_WARNING_LOC, "{%1}", trans(oBandObjects.Count) )
					cText = strtran( m.cText, "{%2}", "Summary" )
					lnResult = messagebox( m.cText, 512+3+48, DEFAULT_MBOX_TITLE_LOC )
								
					do case
					case m.lnResult = 2	&& cancel
						return .F.
										
					case m.lnResult = 6 && yes
						* Remove the objects:
						select (THIS.Tag)
						for each cObjId in oBandObjects
							locate for UNIQUEID = cObjId
							delete
						endfor
						
					endcase		
				endif
				
				* Delete the band:
				select (THIS.Tag)
				locate for OBJTYPE  = FRX_OBJTYP_BAND and ;
						   OBJCODE  = FRX_OBJCOD_SUMMARY
			
				delete
						
				* And move the remaining objects:
				* (hardly worth it for Summary band, though, isn't it?)
				*
				THIS.frxCursor.createBandCursor()
				select (THIS.Tag)
				THIS.frxCursor.synchObjectPositions()
		
			endcase
			
			select (THIS.Tag)
			set filter to
			locate for UNIQUEID = cCurrObject
				
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
		
		endif
	ENDPROC

	PROCEDURE chkHasSummary.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_CHK_SUMMARY_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkHasSummary.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE chkHasTitle.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_CHK_TITLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkHasTitle.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE chkPageFooter.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_CHK_SUMM_FOOTER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkPageFooter.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE chkPageHeader.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_CHK_SUMM_HEADER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkPageHeader.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE chkSummaryNewPage.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_CHK_SUMM_NEW_PAGE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkSummaryNewPage.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE chkTitleNewPage.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_CHK_TITLE_NEW_PAGE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkTitleNewPage.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_LBL_TITLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_OPTBANDS_LBL_SUMMARY_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelpagelayout AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="SHP1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnNumberCols" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWidth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnWidth" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSpacing" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnSpacing" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnLeftMargin" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgPrintArea" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgPrintOrder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPickFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oFormatter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOverrideCharset" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shp2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPrintDevice" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmd1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPrintEnvironment" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pagePreview" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: calculatecolumnspacing
		*m: calculatecolumnwidth
		*m: choosefont
		*m: loadfromtag
		*m: resynchpanel
		*m: syspagesetup
		*m: updatecolumnspacing
		*m: updatecolumnwidth
		*m: updatepreview
		*p: noprinterinstalled
		*p: odevicehelper
		*p: printercount
	*</DefinedPropArrayMethod>

	PROTECTED printercount
	Height = 294
	Name = "panelpagelayout"
	noprinterinstalled = .F.
	odevicehelper = .NULL.
	printercount = 0
	Width = 563

	ADD OBJECT 'chkOverrideCharset' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use font script", ;
		Left = 203, ;
		Name = "chkOverrideCharset", ;
		TabIndex = 17, ;
		Top = 181, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPrintEnvironment' AS chk WITH ;
		Alignment = 0, ;
		Anchor = 9, ;
		Caption = "Save printer environment ", ;
		Left = 349, ;
		Name = "chkPrintEnvironment", ;
		TabIndex = 21, ;
		Top = 260, ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Cmd1' AS cmd WITH ;
		Anchor = 9, ;
		Caption = "Page Setup...", ;
		Left = 201, ;
		Name = "Cmd1", ;
		TabIndex = 20, ;
		Top = 255, ;
		Width = 135, ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPickFont' AS cmd WITH ;
		Anchor = 9, ;
		Caption = "...", ;
		Height = 22, ;
		Left = 520, ;
		Name = "cmdPickFont", ;
		TabIndex = 16, ;
		Top = 153, ;
		Width = 21, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'LBL1' AS lbl WITH ;
		Anchor = 9, ;
		Caption = " Columns ", ;
		Left = 199, ;
		Name = "LBL1", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 1, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 1, ;
		Caption = " Printer ", ;
		Left = 200, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 18, ;
		Top = 209, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		Anchor = 9, ;
		Caption = " Print area ", ;
		Left = 405, ;
		Name = "Lbl3", ;
		Style = 3, ;
		TabIndex = 10, ;
		Top = 1, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl4' AS lbl WITH ;
		Anchor = 9, ;
		Caption = " Column print order ", ;
		Left = 402, ;
		Name = "Lbl4", ;
		Style = 3, ;
		TabIndex = 12, ;
		Top = 67, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LBL5' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Number:", ;
		Left = 202, ;
		Name = "LBL5", ;
		TabIndex = 2, ;
		Top = 18, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl6' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Default font ", ;
		Left = 200, ;
		Name = "Lbl6", ;
		Style = 3, ;
		TabIndex = 14, ;
		Top = 134, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl8' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Left margin:", ;
		Left = 202, ;
		Name = "Lbl8", ;
		TabIndex = 8, ;
		Top = 99, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblSpacing' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Spacing:", ;
		Left = 202, ;
		Name = "lblSpacing", ;
		TabIndex = 6, ;
		Top = 72, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblWidth' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Width:", ;
		Left = 202, ;
		Name = "lblWidth", ;
		TabIndex = 4, ;
		Top = 45, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'oFormatter' AS frxformatutil WITH ;
		Height = 16, ;
		Left = 466, ;
		Name = "oFormatter", ;
		Top = 173, ;
		Width = 15
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="custom" />

	ADD OBJECT 'opgPrintArea' AS opg WITH ;
		Anchor = 9, ;
		ButtonCount = 2, ;
		Height = 56, ;
		Left = 396, ;
		Name = "opgPrintArea", ;
		TabIndex = 11, ;
		Top = 7, ;
		Value = 1, ;
		Width = 160, ;
		ZOrderSet = 10, ;
		Opt1.Caption = "Printable page", ;
		Opt1.Left = 10, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 13, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "Whole page", ;
		Opt2.Left = 10, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 34
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'opgPrintOrder' AS opg WITH ;
		Anchor = 9, ;
		ButtonCount = 2, ;
		Height = 57, ;
		Left = 396, ;
		Name = "opgPrintOrder", ;
		TabIndex = 13, ;
		Top = 73, ;
		Value = 1, ;
		Width = 160, ;
		ZOrderSet = 12, ;
		Opt1.Caption = "Top to bottom", ;
		Opt1.Left = 10, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 14, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "Left to right", ;
		Opt2.Left = 10, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 35
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'pagePreview' AS ctrlpagelayoutpreview WITH ;
		Anchor = 15, ;
		Height = 283, ;
		Left = 3, ;
		Name = "pagePreview", ;
		TabIndex = 22, ;
		Top = 5, ;
		Width = 180, ;
		ZOrderSet = 25, ;
		shadow.Name = "shadow", ;
		Page.extraMargin.Name = "extraMargin", ;
		Page.marginBox.Name = "marginBox", ;
		Page.Name = "Page"
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		Height = 64, ;
		Left = 191, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 140, ;
		Width = 365, ;
		ZOrderSet = 14
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'SHP1' AS shp WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Height = 123, ;
		Left = 191, ;
		Name = "SHP1", ;
		Style = 3, ;
		Top = 7, ;
		Width = 197, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp2' AS shp WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Height = 73, ;
		Left = 192, ;
		Name = "Shp2", ;
		Style = 3, ;
		Top = 215, ;
		Width = 364, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'spnLeftMargin' AS spnmeasurementunits WITH ;
		Anchor = 9, ;
		Increment = 0.10, ;
		InputMask = "999.999", ;
		Left = 284, ;
		Name = "spnLeftMargin", ;
		TabIndex = 9, ;
		Top = 96, ;
		Width = 89, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnNumberCols' AS spn WITH ;
		Anchor = 9, ;
		Increment = 1.00, ;
		InputMask = "99", ;
		KeyboardHighValue = 20, ;
		KeyboardLowValue = 1, ;
		Left = 284, ;
		Name = "spnNumberCols", ;
		SpinnerHighValue = 20.00, ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 3, ;
		Top = 15, ;
		Value = 1, ;
		Width = 89, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnSpacing' AS spnmeasurementunits WITH ;
		Anchor = 9, ;
		Increment = 0.10, ;
		InputMask = "999.999", ;
		Left = 284, ;
		Name = "spnSpacing", ;
		TabIndex = 7, ;
		Top = 69, ;
		Width = 89, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnWidth' AS spnmeasurementunits WITH ;
		Anchor = 9, ;
		Increment = 0.10, ;
		InputMask = "999.999", ;
		Left = 284, ;
		Name = "spnWidth", ;
		TabIndex = 5, ;
		Top = 42, ;
		Width = 89, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="spinner" />

	ADD OBJECT 'txtFont' AS txt WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Left = 203, ;
		Name = "txtFont", ;
		ReadOnly = .T., ;
		TabIndex = 15, ;
		Top = 153, ;
		Width = 316, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />

	ADD OBJECT 'txtPrintDevice' AS txt WITH ;
		Anchor = 9, ;
		Left = 201, ;
		Name = "txtPrintDevice", ;
		ReadOnly = .T., ;
		TabIndex = 19, ;
		Top = 226, ;
		Width = 343, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE calculatecolumnspacing
		* Calculate column spacing in FRUs
		* from the other values known at
		* this point.
		*
		* Calculation here performed in long-hand
		* for ease of debugging:
		
		local nCols, nSpacing
		nCols    = THIS.spnNumberCols.Value
		nSpacing = 0
		
		if m.nCols > 1
				
			local nSpacing
			nSpacing = THIS.pagePreview.pageWidth
		
			if THIS.opgPrintArea.Value = 1
				* Printable page only, so subtract unprintable margin:
				*
				nSpacing = m.nSpacing - (THIS.pagePreview.marginleft * 2)
			endif
		
			nSpacing = m.nSpacing - THIS.spnLeftMargin.Value  
		
			* subtract the current column width
			* from the total available width:
			*
			nSpacing = m.nSpacing - (THIS.spnWidth.Value * m.nCols)
			
			* divided between the columns?
			*
			nSpacing = (m.nSpacing/m.nCols-1)
		
		endif
		return max(0,m.nSpacing)
		
	ENDPROC

	PROCEDURE calculatecolumnwidth
		* Calculate column width in FRUs
		* from the other values known at
		* this point.
		*
		* Calculation here performed in long-hand
		* for ease of debugging:
		
		local nWidth, nCols
		nWidth = THIS.pagePreview.pageWidth
		nCols  = THIS.spnNumberCols.Value
		
		if THIS.opgPrintArea.Value = 1
			* Printable page only, so subtract unprintable margin:
			*
			nWidth = m.nWidth - (THIS.pagePreview.marginleft * 2)
		endif
		
		nWidth = m.nWidth - THIS.spnLeftMargin.Value  && NOT pagePreview.extraLeftMargin (not known at this time)
		
		if m.nCols > 1
			* subtract the current column spacing 
			* from the total available width:
			*
			nWidth = m.nWidth - (THIS.spnSpacing.Value * (m.nCols-1))
		endif
		
		nWidth = (m.nWidth/m.nCols)
		
		return max(1000,m.nWidth)
		
	ENDPROC

	PROCEDURE choosefont
		*---------------------------------------------------------------
		* Display the font picker dialog (with the P flag)
		*---------------------------------------------------------------
		THIS.oFormatter.chooseFont()
		
		*---------------------------------------------------------------
		* Redisplay the new chosen font data:
		*---------------------------------------------------------------
		THIS.txtFont.Value            = THIS.oFormatter.GetFontString()
		THIS.chkOverrideCharset.Value = THIS.oFormatter.UseExplicitFontCharset  
		
		
		
		
	ENDPROC

	PROCEDURE Init
		THIS.oDeviceHelper = newobject("frxDeviceHelper","_frxCursor.vcx")
		
		*-----------------------------------------
		* Check for printers installed
		* Richard suggested this code:
		*-----------------------------------------
		#IF .T.
		
			#define PRINTER_ENUM_DEFAULT     0x00000001
			#define PRINTER_ENUM_LOCAL       0x00000002
			#define PRINTER_ENUM_CONNECTIONS 0x00000004 
		
			DECLARE INTEGER EnumPrintersA IN winspool.drv; 
			    INTEGER   Flags,; 
			    INTEGER   Name,; 
			    INTEGER   Level,; 
			    STRING  @ pPrinterEnum,; 
			    INTEGER   cbBuf,; 
			    INTEGER @ pcbNeeded,; 
			    INTEGER @ pcReturned
		
			local nNeeded
			nNeeded = 0 
			EnumPrintersA(PRINTER_ENUM_LOCAL + PRINTER_ENUM_CONNECTIONS, 0, 5, "", 0, @nNeeded, 0) 
			if nNeeded == 0
				THIS.NoPrinterInstalled = .T.
				=messagebox(;		
					NO_PRINTERS_INSTALLED_LOC, 48, DEFAULT_MBOX_TITLE_LOC )
			endif
		
		#ELSE
		
			local array raPrinters[1]
			local iPrinterCount
			iPrinterCount = aprinters(raPrinters)
		
			if m.iPrinterCount = 0
				THIS.NoPrinterInstalled = .T.
				=messagebox(;		
					NO_PRINTERS_INSTALLED_LOC, 48, DEFAULT_MBOX_TITLE_LOC )
			endif
		
		#ENDIF
			
		dodefault()
	ENDPROC

	PROCEDURE loadfromfrx
		*-----------------------------------------------------------------
		* Ensure the formatter has reference to our utility object:
		*-----------------------------------------------------------------
		THIS.oFormatter.frxCursor = THIS.frxCursor
		
		if used(this.Tag)
		
			select (this.Tag)
		
			*------------------------------------------------------
			* If protected, invisible and bail:
			*------------------------------------------------------
			if  THIS.event.Protected and ;
				THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_REPORT_NO_PAGESETUP )
				THIS.Visible = .F.
				return
			endif
			
			locate for OBJTYPE = FRX_OBJTYP_BAND ;
				   and OBJCODE = FRX_OBJCOD_PAGEFOOTER
		
			THIS.pagePreview.FooterHeight = HEIGHT
		
			locate for OBJTYPE = FRX_OBJTYP_BAND ;
				   and OBJCODE = FRX_OBJCOD_PAGEHEADER
		
			THIS.pagePreview.HeaderHeight = HEIGHT
		
			locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
			
			*-----------------------------------------
			* Assign units to the spinner controls:
			*-----------------------------------------
			store RULER to ;
				THIS.spnWidth.units, ;
				THIS.spnSpacing.units, ;
				THIS.spnLeftMargin.units
		
			*-----------------------------------------
			* Extract printer environment information:
			*-----------------------------------------
			THIS.chkPrintEnvironment.Value = not empty(TAG2)
		
			local cPrinterNameSuffix
		
			if THIS.chkPrintEnvironment.Value = .F.
				*---------------------------------------------------
				* This report was saved/created without the printer environment.
				* Get the printer settings from the default environment:
				*---------------------------------------------------
		
				THIS.frxCursor.createDefaultPrintEnvCursor(THIS.Tag,'defPE')
		
				cPrinterNameSuffix = PRINTER_NAME_SUFFIX_DEFAULT_LOC
				select defPE		
			else
				*--------------------------------------------
				* Get printer environment from FRX cursor:
				*--------------------------------------------
				cPrinterNameSuffix = ""
			endif
		
			if not THIS.NoPrinterInstalled
				*-----------------------------------------
				* Extract printer environment information:
				*
				* 	Printer Name
				*	Preview info
				* 	
				*-----------------------------------------
				THIS.LoadFromTag()
			endif
		
			*--------------------------------------------
			* Add " (Default)" to the printer name if applicable
			*--------------------------------------------
			if not empty( m.cPrinterNameSuffix )
				if not (m.cPrinterNameSuffix $ THIS.txtPrintDevice.Value)
					THIS.txtPrintDevice.Value = THIS.txtPrintDevice.Value + m.cPrinterNameSuffix
				endif
			endif
		
			if used('defPE')
				use in defPE
			endif
			select (THIS.Tag)
		
			*-----------------------------------------
			* Spinners:
			*-----------------------------------------
			THIS.spnNumberCols.Value = VPOS
			THIS.spnSpacing.Value    = HEIGHT
		
			THIS.spnLeftMargin.Value = HPOS
			THIS.opgPrintOrder.Value = iif( BOTTOM, 2, 1 )
		
			*-----------------------------------------
			* Caution: This must be assigned prior to 
			*          calling .UpdateColumnWidth() (see code)	
			*-----------------------------------------
			THIS.opgPrintArea.Value  = iif( TOP, 2, 1 )
			
			*-----------------------------------------
			* Column width is stored in WIDTH
			*-----------------------------------------
			if WIDTH <= 0
				*-----------------------------------------
				* Column width is default, which means 
				* calculate it from the other known values:
				*-----------------------------------------
				THIS.spnWidth.Value = THIS.calculateColumnWidth()
			else
				THIS.spnWidth.Value      = WIDTH 
			endif
		
			*-----------------------------------------------------------------
			* Ensure the formatter has reference to our utility object:
			*-----------------------------------------------------------------
			THIS.oFormatter.frxCursor = THIS.frxCursor
		
			*-----------------------------------------------------------------
			* FontCharSet:
			*
			* In VFP7/8:
			*    GETFONT(,,,1) means "Script dropdown enabled, at system default value"
			*    GETFONT(,,,0) means "Script dropdown disabled, at system default value"
			*
			* In VFP9, 
			*    GETFONT(,,,-1) will explicitly selected Western.
			*
			* In FontCharSet parlance:
			*		0 = Western
			*	    1 = System Default
			*
			* FontCharSet:
			*   frx.DOUBLE indicates if an explicit FontCharSet is specified
			*   frx.RESOID contains the value of FontCharSet
			*
			* The following instructions match the behavior that will occur 
			* from the Format menu:
			*
			* -- DOUBLE = .T. and RESOID = 0: then the Builder should 
			*    pass a -1 to explicitly select Western script in the dialog.  
			*
			* -- DOUBLE = .T. and RESOID # 0: then the Builder should 
			*    pass the value in ResoID to the dialog.
			*
			* -- DOUBLE = .F., the Builder should disregard any stray value 
			*    in ResoID and always pass a 1.  This will bring up the 
			*    dialog at the default script for the locale but allow other 
			*    scripts to be selected.
			*-----------------------------------------------------------------
			THIS.oFormatter.SetFont( FONTFACE, FONTSIZE, FONTSTYLE, DOUBLE, RESOID )
		
			THIS.chkOverrideCharset.Value = THIS.oFormatter.UseExplicitFontCharset
			THIS.txtFont.Value            = THIS.oFormatter.getFontString()
		
			THIS.RefreshEnabledState()	
			
			THIS.ResynchPanel()
		endif	
	ENDPROC

	PROCEDURE loadfromtag
		*------------------------------------------------------------
		* Get device capabilities from EXPR, TAG2
		*------------------------------------------------------------
					
		local oExprReader, cDevice, cDriver, cOrient
		oExprReader = newobject("NameValuePairManager", FRXCOMMON_PRG_CLASSLIB )
		oExprReader.LoadMemo( EXPR )
		cDevice = oExprReader.get("DEVICE")
		cDriver = oExprReader.get("DRIVER")
		cOrient = oExprReader.get("ORIENTATION")
		release oExprReader
		
		*--------------------------------------------
		* Show the name of the current printer:
		*--------------------------------------------
		THIS.pagePreview.pageOrientation = val(m.cOrient)	
		
		THIS.txtPrintDevice.Value = m.cDevice 
		
		if THIS.oDeviceHelper.LoadDeviceInfo( m.cDriver, m.cDevice, TAG2 ) 
		
			with THIS.oDeviceHelper
				* Page Width in FRUs:
				THIS.pagePreview.pageWidth  = (10000 * .ActualX)/.dpiX
				THIS.pagePreview.pageHeight = (10000 * .ActualY)/.dpiY
				THIS.pagePreview.marginLeft = (10000 * .OffsetX)/.dpiX		
				THIS.pagePreview.marginTop  = (10000 * .OffsetY)/.dpiY		
			endwith
			return .T.
		else
			=messagebox(;		
				DEVICEHELPER_ERROR_LOC + ;
				THIS.oDeviceHelper.errorMessage, 48, DEFAULT_MBOX_TITLE_LOC )
		
			return .F.		
		endif
		
		
	ENDPROC

	PROCEDURE refreshenabledstate
		store (THIS.spnNumberCols.Value > 1) to ;
			THIS.spnSpacing.Enabled, ;
			THIS.lblSpacing.Enabled, ;
			THIS.opgPrintOrder.Enabled 
	ENDPROC

	PROCEDURE resynchpanel
		* This method should be called on any event that changes
		* the attributes of the page.
		
		* This will change if the following attributes change:
		*  - number of columns
		*  - space between columns
		*  - page width
		* 
		* Note: Width and Spacing are interdependent.
		* 
		
		THIS.pagePreview.columnCount       = THIS.spnNumberCols.Value
		THIS.pagePreview.PrintablePageOnly = (THIS.opgPrintArea.Value=1)  
		THIS.pagePreview.ExtraLeftMargin   = THIS.spnLeftMargin.Value 
		THIS.pagePreview.columnSpacing     = THIS.spnSpacing.Value
		THIS.pagePreview.columnWidth       = THIS.spnWidth.Value 
		
		THIS.pagePreview.updatepreview()
		
		Store THIS.pagePreview.pageWidth to ;
			THIS.spnLeftMargin.HighValueFRU, ;
			THIS.spnWidth.HighValueFRU, ;
			THIS.spnSpacing.HighValueFRU
		
	ENDPROC

	PROCEDURE savetofrx
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		if used(this.Tag)
			select (this.Tag)
			
			go top
			locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER ;
				   and PLATFORM = FRX_PLATFORM_WINDOWS
				   
			replace ;
				WIDTH		with THIS.spnWidth.Value, ;
				HEIGHT		with THIS.spnSpacing.Value, ;
				HPOS		with THIS.spnLeftMargin.Value, ;
				TOP			with (THIS.opgPrintArea.Value=2), ;
				BOTTOM		with (THIS.opgPrintOrder.Value=2)
				
			*------------------------------------------
			* Font:
			* FONTFACE, FONTSTYLE, FONTSIZE, RESOID
			*------------------------------------------
			replace FONTFACE	with THIS.oFormatter.FontFace, ;
					FONTSIZE	with THIS.oFormatter.FontSize, ;
					FONTSTYLE	with THIS.oFormatter.FontStyle
		
			if THIS.oFormatter.UseExplicitFontCharset
				replace RESOID      with THIS.oFormatter.FontCharSet, ;
						DOUBLE		with .T.
			else
				*-----------------------------------------------------------
				* Always specify a charset, even if it is system default
				*-----------------------------------------------------------
				replace RESOID      with 1, ;
						DOUBLE		with .T.
			endif
		
			* Number of columns:
			* (also handles col header/footer):
			*
			THIS.frxCursor.setColumnCount( THIS.spnNumberCols.Value )	
		
			if THIS.chkPrintEnvironment.Value
				*---------------------------------------------
				* Tag, Tag2	probably already have the right values.
				* If they dont...
				*---------------------------------------------
				if empty( TAG2 )
					*---------------------------------------------
					* Save the default printer environment:
					*---------------------------------------------
					=sys(1037,2)
				endif
			else		
				replace TAG2	with ""
			endif
		
			*-----------------------------------------------------------------
			* Ensure the formatter clears its reference to our utility object:
			*-----------------------------------------------------------------
			THIS.oFormatter.frxCursor = null
		
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
		endif	
		return .T.
	ENDPROC

	PROCEDURE syspagesetup
		if used(THIS.Tag)
		
			local lNoPrinter
			lNoPrinter = .F.
		
			if THIS.NoPrinterInstalled
		
				*-------------------------------------------------------
				* Force the "no printers. Want to install one?" dialog
				*-------------------------------------------------------
				try 
					sys(1037,0)
				catch to oErr
					m.lNoPrinter = .T.
				endtry
		
				if m.lNoPrinter
					=messagebox(NO_PRINTERS_INSTALLED_LOC,48,DEFAULT_MBOX_TITLE_LOC)
					return
				else
					=messagebox(PRINTER_INSTALLED_OK_LOC,64,DEFAULT_MBOX_TITLE_LOC)
				endif
			endif
		
			LOCAL curSel
			curSel = select(0)
		
			select (THIS.Tag)
		
			locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
				
			if sys(1037,1) = "1"
				THIS.LoadFromTag()
				THIS.UpdateColumnWidth()
				THIS.ResynchPanel()
			endif
			select (m.curSel)	
		
		endif
	ENDPROC

	PROCEDURE updatecolumnspacing
		*--------------------------------------------------------
		* Called from spnWidth::InteractiveChange()
		*--------------------------------------------------------
		THIS.spnSpacing.Value = THIS.calculateColumnSpacing()
		
	ENDPROC

	PROCEDURE updatecolumnwidth
		*--------------------------------------------------------
		* Called from spnNumberCols::Action()
		*--------------------------------------------------------
		THIS.spnWidth.Value = THIS.calculateColumnWidth()
		return
		
		*!*	local nColWidth
		*!*	nColWidth = THIS.pagePreview.pageWidth ;
		*!*			  - THIS.pagePreview.extraLeftMargin ;
		
		*!*	if THIS.spnSpacing.Value > 0
		*!*		
		*!*		nColWidth = m.nColWidth ;
		*!*				  - (THIS.spnSpacing.Value * (THIS.spnNumberCols.Value-1)) 
		*!*	endif
		
		*!*	if THIS.opgPrintArea.Value = 1
		*!*		nColWidth = m.nColWidth ;
		*!*				  - (THIS.pagePreview.marginLeft * 2 )
		*!*	endif
		
		*!*	THIS.spnWidth.Value = m.nColWidth/THIS.spnNumberCols.Value
		
		
	ENDPROC

	PROCEDURE updatepreview
	ENDPROC

	PROCEDURE chkOverrideCharset.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_CHK_FONTSCRIPT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkOverrideCharset.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		if THIS.Value = .F.
			* We are deciding not to override the characterset
			with THIS.Parent
				.oFormatter.UseExplicitFontCharset = .F.
				.txtFont.Value = .oFormatter.getfontstring()
			endwith		
		endif
	ENDPROC

	PROCEDURE chkPrintEnvironment.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_CHK_SAVE_ENV_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkPrintEnvironment.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE Cmd1.Click
		THIS.Parent.SysPageSetup()
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE Cmd1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_CMD_PAGE_SETUP_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdPickFont.Click
		THIS.Parent.chooseFont()
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE LBL1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_COLUMNS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_PRINTER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_PRINT_AREA_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_PRINT_ORDER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LBL5.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_NUMBER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl6.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_DEF_FONT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl8.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_MARGIN_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblSpacing.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_SPACING_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblWidth.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_LBL_WIDTH_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPrintArea.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		THIS.Parent.updateColumnWidth()
		THIS.Parent.ResynchPanel()
	ENDPROC

	PROCEDURE opgPrintArea.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_OPT_PRINTABLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPrintArea.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_OPT_WHOLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPrintOrder.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE opgPrintOrder.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_OPT_TOP_BOTTOM_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgPrintOrder.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PAGELAYOUT_OPT_LEFT_RIGHT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE pagePreview.Resize
		THIS.updatepreview()
	ENDPROC

	PROCEDURE spnLeftMargin.action
		*----------------------------------------------------
		* When the left margin changes, update the other values:
		*------------------------------------------------------
		THIS.Parent.updateColumnWidth()
		THIS.Parent.ResynchPanel()
		
	ENDPROC

	PROCEDURE spnLeftMargin.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		if THIS.Value < 0
			THIS.Value = 0
		endif
		
	ENDPROC

	PROCEDURE spnNumberCols.action
		*------------------------------------------------------
		* 
		*------------------------------------------------------
		if between(THIS.Value, 1,20)
			THIS.Parent.RefreshEnabledState()
			THIS.Parent.updateColumnWidth()
			THIS.Parent.ResynchPanel()
		endif
	ENDPROC

	PROCEDURE spnNumberCols.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE spnNumberCols.LostFocus
		if THIS.Value < 1
			THIS.Value = 1
		endif
		if THIS.Value > 20
			THIS.Value = 20
		endif
		dodefault()
	ENDPROC

	PROCEDURE spnSpacing.action
		*------------------------------------------------------
		* When the column spacing changes, update the column width:
		*------------------------------------------------------
		THIS.Parent.updateColumnWidth()
		THIS.Parent.ResynchPanel()
		
	ENDPROC

	PROCEDURE spnSpacing.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		if THIS.Value < 0
			THIS.Value = 0.1
		endif
		
	ENDPROC

	PROCEDURE spnWidth.action
		*----------------------------------------------------
		* When the column width changes, update the column spacing:
		*------------------------------------------------------
		
		*THIS.Parent.updateColumnSpacing()   VFP8 doesn't change spacing
		THIS.Parent.ResynchPanel()
		
	ENDPROC

	PROCEDURE spnWidth.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		if THIS.Value < 0
			THIS.Value = 0.1
		endif
		*-------------------------------
		* Let's try this upper bound:
		*-------------------------------
		if THIS.Value > THIS.Parent.pagePreview.pageWidth
			THIS.Value = THIS.Parent.pagePreview.pageWidth
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS panelpicturebound AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="pictureSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdLocate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtLocator" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkCentered" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboPictureMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*p: expressionvariable
		*p: generalfieldname
		*p: imagefilename
	*</DefinedPropArrayMethod>

	expressionvariable = ("")
	generalfieldname = ("")
	Height = 212
	imagefilename = ("")
	Name = "panelpicturebound"
	Width = 321

	ADD OBJECT 'cboPictureMode' AS cbo WITH ;
		Left = 2, ;
		Name = "cboPictureMode", ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 164, ;
		Width = 313
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkCentered' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Center general field horizontally in frame", ;
		Left = 2, ;
		Name = "chkCentered", ;
		TabIndex = 7, ;
		Top = 193, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdLocate' AS cmd WITH ;
		Caption = "...", ;
		Height = 22, ;
		Left = 293, ;
		Name = "cmdLocate", ;
		TabIndex = 4, ;
		Top = 117, ;
		Width = 22, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'LBL1' AS lbl WITH ;
		Caption = " Control source type ", ;
		Left = 11, ;
		Name = "LBL1", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Control source:", ;
		Left = 3, ;
		Name = "Lbl2", ;
		TabIndex = 5, ;
		Top = 100
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "If source and frame are different sizes:", ;
		Left = 2, ;
		Name = "Lbl3", ;
		TabIndex = 5, ;
		Top = 147
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'pictureSource' AS opg WITH ;
		ButtonCount = 3, ;
		Height = 84, ;
		Left = 2, ;
		Name = "pictureSource", ;
		TabIndex = 2, ;
		Top = 8, ;
		Value = 1, ;
		Width = 313, ;
		ZOrderSet = 0, ;
		Opt1.Caption = "Image file name", ;
		Opt1.Left = 9, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 15, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "General field name", ;
		Opt2.Left = 9, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 36, ;
		Opt3.Caption = "Expression or variable name", ;
		Opt3.Left = 9, ;
		Opt3.Name = "Opt3", ;
		Opt3.Top = 57
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'txtLocator' AS edt WITH ;
		Height = 22, ;
		Left = 2, ;
		Name = "txtLocator", ;
		ScrollBars = 0, ;
		TabIndex = 3, ;
		Top = 117, ;
		Width = 287
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			*--------------------------------------------------------------
			* Picture source is stored in OFFSET:
			*
			* 0 = Literal / Filename,  1 = Expression / Fieldname
			*--------------------------------------------------------------
			THIS.PictureSource.Value = (OFFSET+1)
		
			if THIS.PictureSource.Value = FRX_PICTURE_SOURCE_FILENAME+1
		
				*--------------------------------------------------------------
				* Literal filename stored in PICTURE:
				*--------------------------------------------------------------
				local cPicture
				cPicture = alltrim(PICTURE)
		
				*--------------------------------------------------------------
				* This is a delimited string, so remove the delimiters:
				*--------------------------------------------------------------
				*cPicture = substr(m.cPicture,2,len(m.cPicture)-2)
				if not empty( m.cPicture )
					cPicture = eval( m.cPicture )
				endif
				
				*--------------------------------------------------------------
				* The Designer stores it as a relative path (correct) so 
				* use fullpath to make it look like what the user expects:
				*--------------------------------------------------------------
				if not empty( m.cPicture )
					*---------------------------------------------
					* Fix for SP2: relative to FRX file
					*---------------------------------------------
					*cPicture = lower(fullpath(m.cPicture))
					cPicture = lower(fullpath(m.cPicture, addbs(sys(2023))))
		
				endif
				THIS.txtLocator.Value = m.cPicture
			else
				*--------------------------------------------------------------
				* General Field or variable/expression, stored in NAME:
				*--------------------------------------------------------------
				THIS.txtLocator.Value = trim(NAME)
			endif
		
			do case
			case THIS.pictureSource.Value = 1
				THIS.imageFileName = THIS.txtLocator.Value
				
			case THIS.pictureSource.Value = 2
				THIS.generalFieldName = THIS.txtLocator.Value
		
			case THIS.pictureSource.Value = 3
				THIS.expressionVariable = THIS.txtLocator.Value
		
			endcase
			
			*--------------------------------------------------------------
			* Scale/Clip mode is stored in GENERAL
			* 0 = clip
			* 1 = scale retain shape
			* 2 = scale + fill
			*--------------------------------------------------------------
			THIS.cboPictureMode.Value = GENERAL+1
		
			*--------------------------------------------------------------
			* Centered is stored in DOUBLE:
			*--------------------------------------------------------------
			THIS.chkCentered.Value = DOUBLE
		
			*--------------------------------------------------------------
			* Go to protected mode, if necessary:
			*--------------------------------------------------------------
			THIS.setProtection()
			
		endif
	ENDPROC

	PROCEDURE savetofrx
		* THIS DEFAULT CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
		endif
		
		*--------------------------------------------------------------
		* Picture source is stored in OFFSET:
		*
		* 0 = Literal / Filename, * 1 = Expression / Fieldname
		*--------------------------------------------------------------
		replace OFFSET with (THIS.PictureSource.Value - 1)
		
		if empty(THIS.txtLocator.Value)
			=messagebox(PICTURE_INVALID_SOURCE_MSG_LOC, 48, DEFAULT_MBOX_TITLE_LOC)
			return .F.
		endif
		
		*--------------------------------------------------------------
		* Picture resource locator is stored in 
		* PICTURE ( literal/filename, with quotes!)
		* NAME    (expression/fieldname)
		*--------------------------------------------------------------
		if THIS.PictureSource.Value = FRX_PICTURE_SOURCE_FILENAME+1
		
			*-------------------------------------------
			* Ensure the file exists:
			*-------------------------------------------
			if not file(trim(THIS.txtLocator.Value))
				=messagebox(PICTURE_INVALID_FILENAME_MSG_LOC, 48, DEFAULT_MBOX_TITLE_LOC)
				return .F.
			endif
				
			replace PICTURE with ["]+trim(THIS.txtLocator.Value)+["],;
					NAME	with ""
			
		else
			replace NAME	with trim(THIS.txtLocator.Value),;
					PICTURE	with ""
		endif
		
		*--------------------------------------------------------------
		* Scale/Clip mode is stored in GENERAL
		* 0 = clip
		* 1 = scale retain shape
		* 2 = scale + fill
		*--------------------------------------------------------------
		replace GENERAL with (THIS.cboPictureMode.Value -1) 
		
		*--------------------------------------------------------------
		* Centered is stored in DOUBLE:
		*--------------------------------------------------------------
		replace DOUBLE with THIS.chkCentered.Value
		
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.pictureSource.Value = FRX_PICTURE_SOURCE_FILENAME + 1
		THIS.txtLocator.Value    = ""
		THIS.chkCentered.Value   = .F.
		THIS.cboPictureMode.Value = 1
	ENDPROC

	PROCEDURE cboPictureMode.Init
		dodefault()
		THIS.Style = 2 	&& dropdown list
		
		*-------------------------------------------------------------------
		* PictureMode is 0-2. Those pesky zero-based enums....
		*-------------------------------------------------------------------
		
		THIS.AddItem( PICTUREMODE_CLIP_LOC,             FRX_PICTUREMODE_CLIP+1             )
		THIS.AddItem( PICTUREMODE_SCALE_KEEP_SHAPE_LOC, FRX_PICTUREMODE_SCALE_KEEP_SHAPE+1 )
		THIS.AddItem( PICTUREMODE_SCALE_STRETCH_LOC,    FRX_PICTUREMODE_SCALE_STRETCH+1    )
		
	ENDPROC

	PROCEDURE chkCentered.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PICTBOUND_CHK_CENTER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdLocate.Click
		*--------------------------------------------------------------
		* Providing this control is always used on an 
		* instance of frxPanel
		* Fix for SP2: Also support EMF in Getfile dialog
		*--------------------------------------------------------------
		local cExpression, cDefaultExpr, cCalledFrom
		cExpression  = ""
		cDefaultExpr = THIS.Parent.txtLocator.Value
		
		do case
		case THIS.Parent.pictureSource.Value = 1
		
			cExpression = lower(getpict("*.ico *.bmp *.jpg *.gif *.emf:ico,bmp,jpg,gif,emf"))
		
		case THIS.Parent.pictureSource.Value = 2
		
			cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "", "OleboundField" )
		
		case THIS.Parent.pictureSource.Value = 3
		
			cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "", "OleboundExpression" )
		
		endcase
		if not empty( m.cExpression )
			THIS.Parent.txtLocator.Value = m.cExpression
		endif
		
	ENDPROC

	PROCEDURE LBL1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PICTBOUND_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PICTBOUND_LBL_SOURCE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PICTBOUND_LBL_PICTMODE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE pictureSource.InteractiveChange
		with THIS.Parent
			do case
			case THIS.Value = 1
				.txtLocator.Value = .imageFileName
				.chkCentered.Enabled = .F.
				.chkCentered.Value   = .F.
				
			case THIS.Value = 2
				.txtLocator.Value = .generalFieldName
				.chkCentered.Enabled = .T.
		
			case THIS.Value = 3
				.txtLocator.Value = .expressionVariable 
				.chkCentered.Enabled = .T.
		
			endcase
		endwith
		
	ENDPROC

	PROCEDURE pictureSource.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PICTBOUND_OPT_FILE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE pictureSource.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PICTBOUND_OPT_GENERAL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE pictureSource.Opt3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PICTBOUND_OPT_EXPRVAR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE pictureSource.ProgrammaticChange
		THIS.InteractiveChange()
	ENDPROC

	PROCEDURE txtLocator.LostFocus
		with THIS.Parent
			do case
			case .pictureSource.Value = 1
				.imageFileName = THIS.Value
				
			case .pictureSource.Value = 2
				.generalFieldName = THIS.Value
		
			case .pictureSource.Value = 3
				.expressionVariable = THIS.Value
		
			endcase
		endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS panelpicturepositioning AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="objPosition" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 89
	Name = "panelpicturepositioning"
	Width = 265

	ADD OBJECT 'objPosition' AS frxobjectpositioncontrol WITH ;
		Height = 88, ;
		Left = 0, ;
		Name = "objPosition", ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 260, ;
		ZOrderSet = 1, ;
		OptionGroup.Left = 0, ;
		OptionGroup.Name = "OptionGroup", ;
		OptionGroup.OPT1.Left = 66, ;
		OptionGroup.OPT1.Name = "OPT1", ;
		OptionGroup.OPT2.Left = 66, ;
		OptionGroup.OPT2.Name = "OPT2", ;
		OptionGroup.OPT3.Left = 66, ;
		OptionGroup.OPT3.Name = "OPT3", ;
		OptionGroup.Top = 7, ;
		OptionGroup.Width = 248, ;
		Label.Name = "Label", ;
		GIFFLOAT.Height = 34, ;
		GIFFLOAT.Name = "GIFFLOAT", ;
		GIFFLOAT.Width = 31, ;
		GIFTOP.Height = 34, ;
		GIFTOP.Name = "GIFTOP", ;
		GIFTOP.Width = 31, ;
		GIFBOTTOM.Height = 34, ;
		GIFBOTTOM.Name = "GIFBOTTOM", ;
		GIFBOTTOM.Width = 31
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			* Object Position:
			*
			THIS.objPosition.LoadFromFrx()
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE savetofrx
		* THIS DEFAULT CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
		endif
		
		* Object Position:
		*
		THIS.objPosition.SaveToFrx()
		
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.objPosition.Value     = 2
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelprintwhen AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="PrintRepeated" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="onFirstWholeBand" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="onGroupChange" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="group" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="onOverflow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="removeBlank" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Expression" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL3" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: setenabledstate
		*p: obandend		&& see THIS.LoadFromFrx()
		*p: obandstart		&& see THIS.LoadFromFrx()
	*</DefinedPropArrayMethod>

	Height = 260
	Name = "panelprintwhen"
	obandend = .NULL.		&& see THIS.LoadFromFrx()
	obandstart = .NULL.		&& see THIS.LoadFromFrx()
	Width = 338

	ADD OBJECT 'cmdGetExpr' AS cmd WITH ;
		Caption = "...", ;
		Height = 22, ;
		Left = 309, ;
		Name = "cmdGetExpr", ;
		TabIndex = 11, ;
		Top = 231, ;
		Width = 22, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Expression' AS edt WITH ;
		Height = 22, ;
		Left = 0, ;
		Name = "Expression", ;
		ScrollBars = 0, ;
		TabIndex = 10, ;
		Top = 231, ;
		Width = 304
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'group' AS cbo WITH ;
		Left = 40, ;
		Name = "group", ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 133, ;
		Width = 232, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Print repeated values ", ;
		Left = 10, ;
		Name = "Lbl1", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 1, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Caption = " Also print ", ;
		Left = 10, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 3, ;
		Top = 69, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LBL3' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "\<Print only when expression is true:", ;
		Left = 0, ;
		Name = "LBL3", ;
		Style = 0, ;
		TabIndex = 9, ;
		Top = 213, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'onFirstWholeBand' AS chk WITH ;
		Alignment = 0, ;
		Caption = "In \<first whole band of a new page/column", ;
		Left = 11, ;
		Name = "onFirstWholeBand", ;
		TabIndex = 4, ;
		Top = 92, ;
		Value = .F., ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'onGroupChange' AS chk WITH ;
		Alignment = 0, ;
		Caption = "When this data \<group expression changes:", ;
		Left = 11, ;
		Name = "onGroupChange", ;
		TabIndex = 5, ;
		Top = 114, ;
		Value = .F., ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'onOverflow' AS chk WITH ;
		Alignment = 0, ;
		Caption = "When \<band content overflows to new page/column", ;
		Left = 11, ;
		Name = "onOverflow", ;
		TabIndex = 7, ;
		Top = 159, ;
		Value = .F., ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'PrintRepeated' AS opg WITH ;
		ButtonCount = 2, ;
		Height = 56, ;
		Left = 0, ;
		Name = "PrintRepeated", ;
		TabIndex = 2, ;
		Top = 8, ;
		Width = 332, ;
		ZOrderSet = 1, ;
		Opt1.Caption = "\<Yes", ;
		Opt1.Left = 10, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 13, ;
		Opt2.Caption = "\<No", ;
		Opt2.Left = 10, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 34
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'removeBlank' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<Remove line if blank", ;
		Left = 0, ;
		Name = "removeBlank", ;
		TabIndex = 8, ;
		Top = 191, ;
		Value = .F., ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Shp1' AS shp WITH ;
		Height = 108, ;
		Left = 0, ;
		Name = "Shp1", ;
		Style = 3, ;
		Top = 76, ;
		Width = 332, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE loadfromfrx
		if used(this.Tag)
			select (this.Tag)
		
			* Save the start and end bands for later:
			
			if isnull( THIS.oBandStart )
				THIS.oBandStart = THIS.frxCursor.getBandFor( UNIQUEID, GET_START_BAND )
			endif
			if isnull( THIS.oBandEnd )
				THIS.oBandEnd   = THIS.frxCursor.getBandFor( UNIQUEID, GET_END_BAND )
			endif
		
			* Group Dropdown is populated from the EXPR field
			* of type FRX_OBJTYP_BAND, FRX_OBJCOD_GROUPHEADER records, in recno order.
			* 6 = first group
			* 7 = second group
			* etc...
			
			select EXPR ;
				from (this.tag) ;
				where OBJTYPE = FRX_OBJTYP_BAND ;
				  and OBJCODE = FRX_OBJCOD_GROUPHEADER ;
				into cursor tmp
			select tmp
			THIS.group.Clear() && MJ 2022-04-12
			scan
				THIS.group.AddItem(EXPR)
			endscan
			use in tmp
			select (THIS.Tag)
		
		
			if THIS.event.eventType = FRX_BLDR_EVENT_OBJECTCREATE  
				*-------------------------
				* SET DEFAULTS APPROPRIATELY:
				*-------------------------
				THIS.setInitialValues("ALL")		
			else
				*-------------------------
				* READ FROM THE FRX:
				*-------------------------
		
				* Print Repeated Values is stored in two logical fields:
				* 	 SUPVALCHNG .T. if Yes, .T. if Yes
				*    SUPALWAYS: .T. if Yes, .F. if No
				
				if SUPVALCHNG or not SUPALWAYS
					THIS.PrintRepeated.Value = 2
				else
					THIS.PrintRepeated.Value = 1
				endif
		
				* Also Print in First Band of New Page:
				* SUPRPCOL = 0 : No
				* SUPRPCOL = 3 : Yes
		
				THIS.onFirstWholeBand.Value  = (SUPRPCOL = 3)
		
				* Also Print on group change:
				* SUPGROUP = 0 : No
				* SUPGROUP > 5 : Yes
		
				THIS.onGroupChange.Value = (SUPGROUP > 5)
		
				if SUPGROUP > 5
					THIS.group.Value = (SUPGROUP-5)
				else
					THIS.group.Value = 0
				endif
		
				* Also Print on overflow:
				* 	SUPOVFLOW
		
				THIS.onOverflow.Value = SUPOVFLOW
		
				* Remove line if blank:
				*   NOREPEAT
		
				THIS.removeBlank.Value = NOREPEAT
		
				THIS.Expression.Value = trim(SUPEXPR)
				
			endif
		
			THIS.setEnabledState()
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE savetofrx
		if used(this.Tag)
			select (this.Tag)
			
			* Print Repeated Values is stored in two logical fields:
			* 	 SUPVALCHNG .T. if Yes, .F. if No
			*    SUPALWAYS: .T. if No, .F. if Yes
		
			replace SUPVALCHNG	with (THIS.PrintRepeated.Value = 2), ;
					SUPALWAYS	with (THIS.PrintRepeated.Value = 1)
			
			* Also Print in First Band of New Page:
			* SUPRPCOL = 0 : No
			* SUPRPCOL = 3 : Yes
			
			replace SUPRPCOL 	with iif( THIS.onFirstWholeBand.Value, 3, 0 )
		
			* Also Print on group change:
			* SUPGROUP = 0 : No
			* SUPGROUP > 5 : Yes
			* Group Dropdown is populated from the EXPR field
			* of type FRX_OBJTYP_BAND, FRX_OBJCOD_GROUPHEADER records, in recno order.
			* 6 = first group
			* 7 = second group
			* etc...
		
			if THIS.onGroupChange.Value
				replace SUPGROUP 	with (THIS.group.Value+5)
			else
				replace SUPGROUP	with 0
			endif
		
			* Also Print on overflow: SUPOVFLOW
			* Remove line if blank:   NOREPEAT
			* Print when expression:  SUPEXPR
		
			replace SUPOVFLOW 	with THIS.onOverflow.Value, ;
					NOREPEAT	with THIS.removeBlank.Value, ;
					SUPEXPR   	with trim(THIS.Expression.Value)
		
		endif
	ENDPROC

	PROCEDURE setenabledstate
		lparameter oControl
		local cControl
		if parameters() < 1
			cControl = "all"
		else
			cControl = lower(m.oControl.Name)
		endif
		
		local lNewState, lCurrentState
		
		do case
		*--------------------------------------
		case m.cControl = "all"
		
			THIS.setEnabledState(THIS.PrintRepeated)
			THIS.setEnabledState(THIS.onFirstWholeBand)
			THIS.setEnabledState(THIS.onGroupChange)
			THIS.setEnabledState(THIS.Group)
			THIS.setEnabledState(THIS.onOverFlow)
			THIS.setEnabledState(THIS.RemoveBlank)
		
		*--------------------------------------
		case not empty( THIS.Expression.Value ) and ;
			 inlist( m.cControl, "printrepeated", "onfirstwholeband", "ongroupchange", "group", "onoverflow" )
		
			m.oControl.Enabled = .F.
		
		*--------------------------------------
		case m.cControl = "printrepeated"
			
			lCurrentState = m.oControl.Enabled
			
			do case		
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_TITLE, ;
					  								FRX_OBJCOD_SUMMARY )
				lNewState = .F.
		
			otherwise
				* FRX_OBJCOD_PAGEHEADER
				* FRX_OBJCOD_COLHEADER
				* FRX_OBJCOD_GROUPHEADER
				* FRX_OBJCOD_DETAILHEADER
				* FRX_OBJCOD_DETAIL
				* FRX_OBJCOD_DETAILFOOTER
				* FRX_OBJCOD_GROUPFOOTER
				* FRX_OBJCOD_COLFOOTER
				* FRX_OBJCOD_PAGEFOOTER
		
				lNewState = .T.
		
			endcase
		
			if m.lNewState <> m.lCurrentState
				m.oControl.Enabled = m.lNewState
				THIS.setInitialValues("PrintRepeated")		
			endif
		
			
		*--------------------------------------
		case m.cControl = "onfirstwholeband"
		
			lCurrentState = m.oControl.Enabled
			
			do case
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_TITLE, ;
													FRX_OBJCOD_PAGEHEADER, ;
													FRX_OBJCOD_COLHEADER )
				lNewState = .F.
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_GROUPHEADER, ;
													FRX_OBJCOD_DETAILHEADER, ;
													FRX_OBJCOD_DETAIL, ;
													FRX_OBJCOD_DETAILFOOTER, ;
													FRX_OBJCOD_GROUPFOOTER )
				if THIS.PrintRepeated.Value = 1
					lNewState = .F.
				else
					lNewState = .T.
				endif
			
			otherwise
				* FRX_OBJCOD_COLFOOTER
				* FRX_OBJCOD_PAGEFOOTER
				* FRX_OBJCOD_SUMMARY
				*
				lNewState = .F.
		
			endcase
		
			if m.lNewState <> m.lCurrentState
				m.oControl.Enabled = m.lNewState
				THIS.setInitialValues("onFirstWholeBand")
			endif
		
		*--------------------------------------
		case m.cControl = "ongroupchange"
		
			lCurrentState = m.oControl.Enabled
			
			do case
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_TITLE, ;
					  								FRX_OBJCOD_SUMMARY )
		
				lNewState = .F.
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_PAGEHEADER,;
													FRX_OBJCOD_COLHEADER, ;
													FRX_OBJCOD_GROUPHEADER, ;
													FRX_OBJCOD_DETAILHEADER, ;
													FRX_OBJCOD_DETAIL, ;
													FRX_OBJCOD_DETAILFOOTER, ;
													FRX_OBJCOD_GROUPFOOTER, ;
													FRX_OBJCOD_COLFOOTER, ;
													FRX_OBJCOD_PAGEFOOTER )
		
				if THIS.PrintRepeated.Value = 1
					lNewState = .F.
				else
					* enabled only if the report has a group:
					lNewState = THIS.frxCursor.hasBand(FRX_OBJCOD_GROUPHEADER)
				endif
		
			otherwise		
				lNewState  = .F.
			endcase
		
			if m.lNewState <> m.lCurrentState
				m.oControl.Enabled = m.lNewState
				THIS.setInitialValues("onGroupChange")	
			endif
			
		*--------------------------------------
		case m.cControl = "group"
			
			lCurrentState = m.oControl.Enabled
		
			do case
			case THIS.onGroupChange.Enabled and ;
			     THIS.onGroupChange.Value = .T.
			   
				lNewState = .T.
				
			otherwise
				lNewState = .F.
		
			endcase
			
			if m.lNewState <> m.lCurrentState
				m.oControl.Enabled = m.lNewState
				THIS.SetInitialValues("group")
			endif
		
		*--------------------------------------
		case m.cControl = "onoverflow"
		
			lCurrentState = m.oControl.Enabled
			
			do case
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_TITLE, ;
					  								FRX_OBJCOD_SUMMARY )
		
				lNewState =.F.
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_PAGEHEADER,;
													FRX_OBJCOD_COLHEADER, ;
													FRX_OBJCOD_COLFOOTER, ;
													FRX_OBJCOD_PAGEFOOTER )
			
				if THIS.PrintRepeated.Value = 1
					lNewState = .F.
				else
					lNewState = .T.
				endif
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_GROUPHEADER,;
													FRX_OBJCOD_DETAILHEADER, ;
													FRX_OBJCOD_DETAIL, ;
													FRX_OBJCOD_DETAILFOOTER, ;
													FRX_OBJCOD_GROUPFOOTER )
				lNewState = .T.	
		
			otherwise
				lNewState = .F.	
			endcase
		
			if m.lNewState <> m.lCurrentState
				m.oControl.Enabled = m.lNewState
				THIS.setInitialValues("onOverFlow")
			endif
			
		*--------------------------------------
		case m.cControl = "removeblank"
		
			lCurrentState = m.oControl.Enabled
		
			do case
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_COLFOOTER ) 
			
				lNewState = .F.
		
			otherwise
				* FRX_OBJCOD_TITLE
				* FRX_OBJCOD_PAGEHEADER
				* FRX_OBJCOD_COLHEADER
				* FRX_OBJCOD_GROUPHEADER
				* FRX_OBJCOD_DETAILHEADER
				* FRX_OBJCOD_DETAIL
				* FRX_OBJCOD_DETAILFOOTER
				* FRX_OBJCOD_GROUPFOOTER
				* FRX_OBJCOD_PAGEFOOTER
				* FRX_OBJCOD_SUMMARY
		
				lNewState = .T.
		
			endcase
			if m.lNewState <> m.lCurrentState
				m.oControl.Enabled = m.lNewState
				THIS.SetInitialValues("RemoveBlank")
			endif
			
		endcase
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		lparameter cControl
		if parameters() < 1
			cControl = "unknown"
		else
			cControl = lower(m.cControl)
		endif
		
		do case
		*--------------------------------------
		case m.cControl = "all"
		
			THIS.setInitialValues("printrepeated")
			THIS.setInitialValues("onFirstWholeBand")
			THIS.setInitialValues("onGroupChange")
			THIS.setInitialValues("group")
			THIS.setInitialValues("onOverFlow")
			THIS.setInitialValues("RemoveBlank")
		
		*--------------------------------------
		case m.cControl = "printrepeated"
		
			THIS.PrintRepeated.Value = 1
			
		*--------------------------------------
		case m.cControl = "onfirstwholeband"
		
			do case
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_TITLE, ;
													FRX_OBJCOD_PAGEHEADER, ;
													FRX_OBJCOD_COLHEADER, ;
													FRX_OBJCOD_COLFOOTER, ;
													FRX_OBJCOD_PAGEFOOTER, ;
													FRX_OBJCOD_SUMMARY )
		
				THIS.onFirstWholeBand.Value = .F.
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_GROUPHEADER, ;
													FRX_OBJCOD_DETAILHEADER, ;
													FRX_OBJCOD_DETAIL, ;
													FRX_OBJCOD_DETAILFOOTER, ;
													FRX_OBJCOD_GROUPFOOTER )
				if THIS.PrintRepeated.Value = 1
					THIS.onFirstWholeBand.Value = .T.
				else
					THIS.onFirstWholeBand.Value = .F.
				endif
			
			otherwise
				THIS.onFirstWholeBand.Value = .F.
			
			endcase
		
		*--------------------------------------
		case m.cControl = "ongroupchange"
		
			do case
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_TITLE, ;
					  								FRX_OBJCOD_SUMMARY )
		
				THIS.onGroupChange.Value = .F.
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_PAGEHEADER,;
													FRX_OBJCOD_COLHEADER, ;
													FRX_OBJCOD_GROUPHEADER, ;
													FRX_OBJCOD_DETAILHEADER, ;
													FRX_OBJCOD_DETAIL, ;
													FRX_OBJCOD_DETAILFOOTER, ;
													FRX_OBJCOD_GROUPFOOTER, ;
													FRX_OBJCOD_COLFOOTER, ;
													FRX_OBJCOD_PAGEFOOTER )
		
				if THIS.PrintRepeated.Value = 1
					* [X] only if the report has a group:
					THIS.onGroupChange.Value = THIS.frxCursor.hasBand(FRX_OBJCOD_GROUPHEADER)
				else
					THIS.onGroupChange.Value = .F.
				endif
		
			otherwise		
				THIS.onGroupChange.Value = .F.
			endcase
			
		
		*--------------------------------------
		case m.cControl = "group"
		
			if THIS.frxCursor.hasBand(FRX_OBJCOD_GROUPHEADER)
				THIS.Group.Value = 1
			else
				THIS.Group.Value = 0
			endif		
		
		*--------------------------------------
		case m.cControl = "onoverflow"
		
			do case
			case (THIS.oBandStart.UNIQUEID <> THIS.oBandEnd.UNIQUEID) ;
			  or inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_TITLE, ;
					  								FRX_OBJCOD_SUMMARY )
		
				THIS.onOverflow.Value = .F.
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_PAGEHEADER,;
													FRX_OBJCOD_COLHEADER, ;
													FRX_OBJCOD_COLFOOTER, ;
													FRX_OBJCOD_PAGEFOOTER )
			
				if THIS.PrintRepeated.Value = 1
					THIS.onOverflow.Value = .T.
				else
					THIS.onOverflow.Value = .F.
				endif
		
			case inlist( THIS.oBandStart.OBJCODE, 	FRX_OBJCOD_GROUPHEADER,;
													FRX_OBJCOD_DETAILHEADER, ;
													FRX_OBJCOD_DETAIL, ;
													FRX_OBJCOD_DETAILFOOTER, ;
													FRX_OBJCOD_GROUPFOOTER )
				THIS.onOverFlow.Value = .F.	
		
			otherwise
				THIS.onOverFlow.Value = .F.	
			endcase
		
		
		*--------------------------------------
		case m.cControl = "removeblank"
		
			THIS.RemoveBlank.Value = .F.
		
		endcase
		return
		
	ENDPROC

	PROCEDURE cmdGetExpr.Click
		local cExpression, cDefaultExpr
		cExpression  = ""
		cDefaultExpr = THIS.Parent.Expression.Value
		
		cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "L", "PrintWhenExpression" )
		
		THIS.Parent.Expression.Value = m.cExpression
	ENDPROC

	PROCEDURE Expression.InteractiveChange
		if not empty(THIS.Value)
		
			store .F. to ;
				THIS.Parent.PrintRepeated.Enabled, ;
				THIS.Parent.onFirstWholeBand.Enabled, ;
				THIS.Parent.onGroupChange.Enabled, ;
				THIS.Parent.Group.Enabled, ;
				THIS.Parent.onOverFlow.Enabled	
		
		else
		
			store .T. to ;
				THIS.Parent.PrintRepeated.Enabled, ;
				THIS.Parent.onFirstWholeBand.Enabled, ;
				THIS.Parent.onGroupChange.Enabled, ;
				THIS.Parent.Group.Enabled, ;
				THIS.Parent.onOverFlow.Enabled	
			
			THIS.Parent.setEnabledState()
		
		endif
		
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_LBL_ALSO_PRINT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LBL3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_LBL_PRINT_EXPR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE onFirstWholeBand.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE onFirstWholeBand.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_CHK_FIRST_WHOLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE onGroupChange.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE onGroupChange.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_CHK_EXPR_CHANGE_LOC
		#ENDIF
		
		
	ENDPROC

	PROCEDURE onGroupChange.InteractiveChange
		THIS.Parent.setEnabledState(THIS.Parent.Group)
	ENDPROC

	PROCEDURE onOverflow.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE onOverflow.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_CHK_OVERFLOW_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE PrintRepeated.InteractiveChange
		THIS.Parent.setEnabledState(THIS.Parent.onFirstWholeBand)
		THIS.Parent.setEnabledState(THIS.Parent.onGroupChange)
		THIS.Parent.setEnabledState(THIS.Parent.Group)
		THIS.Parent.setEnabledState(THIS.Parent.onOverFlow)
		
		
	ENDPROC

	PROCEDURE PrintRepeated.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_OPT_YES_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE PrintRepeated.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_OPT_NO_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE removeBlank.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_PRINTWHEN_CHK_REMOVE_BLANK_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelreportprotection AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="SHP1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDataEnv" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkPageLayout" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOptionalBands" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDataGrouping" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkReportPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkVariables" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 232
	Name = "panelreportprotection"
	Width = 376

	ADD OBJECT 'chkDataEnv' AS chk WITH ;
		Alignment = 0, ;
		Caption = "The \<Data Environment may not be modified", ;
		Left = 28, ;
		Name = "chkDataEnv", ;
		TabIndex = 3, ;
		Top = 110, ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkDataGrouping' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Data \<Grouping can not be modified", ;
		Left = 28, ;
		Name = "chkDataGrouping", ;
		TabIndex = 7, ;
		Top = 176, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOptionalBands' AS chk WITH ;
		Alignment = 0, ;
		Caption = "\<Optional Bands can not be changed", ;
		Left = 28, ;
		Name = "chkOptionalBands", ;
		TabIndex = 6, ;
		Top = 154, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPageLayout' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Page \<Layout is not available", ;
		Left = 28, ;
		Name = "chkPageLayout", ;
		TabIndex = 5, ;
		Top = 132, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkPreview' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Report can not be previe\<wed", ;
		Left = 28, ;
		Name = "chkPreview", ;
		TabIndex = 2, ;
		Top = 88, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkReportPrint' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Report can not be run or \<printed", ;
		Left = 28, ;
		Name = "chkReportPrint", ;
		TabIndex = 1, ;
		Top = 66, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkVariables' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Report \<Variables can not be edited", ;
		Left = 28, ;
		Name = "chkVariables", ;
		TabIndex = 8, ;
		Top = 198, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'LBL1' AS lbl WITH ;
		Caption = " In PROTECTED mode ", ;
		Left = 8, ;
		Name = "LBL1", ;
		Style = 3, ;
		TabIndex = 9, ;
		Top = 1, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LBL4' AS lbl WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Select the features that will be unavailable when this layout is modified in protected mode:", ;
		Height = 44, ;
		Left = 12, ;
		Name = "LBL4", ;
		TabIndex = 10, ;
		Top = 21, ;
		Width = 341, ;
		WordWrap = .T., ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'SHP1' AS shp WITH ;
		BackStyle = 0, ;
		Height = 220, ;
		Left = 1, ;
		Name = "SHP1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 367, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />
	
	PROCEDURE loadfromfrx
		*--------------------------------------------------
		* This control panel is not visible when PROTECTED
		*--------------------------------------------------
		if THIS.Event.protected
			THIS.Visible = .F.
			return
		endif
		
		*--------------------------------------------------
		* Read values out of the FRX:
		*--------------------------------------------------
		if used(this.Tag)
		
			select (this.Tag)
			go top
			locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
		
			local iProtFlags
			iProtFlags = this.frxcursor.BinstringToInt( ORDER ) 
		
			THIS.chkReportPrint.Value    = bittest( m.iProtFlags, FRX_PROTECT_REPORT_NO_PRINT)
			THIS.chkPreview.Value        = bittest( m.iProtFlags, FRX_PROTECT_REPORT_NO_PREVIEW)
			THIS.chkDataEnv.Value        = bittest( m.iProtFlags, FRX_PROTECT_REPORT_NO_DATAENV) 
			THIS.chkPageLayout.Value     = bittest( m.iProtFlags, FRX_PROTECT_REPORT_NO_PAGESETUP )
			THIS.chkOptionalBands.Value  = bittest( m.iProtFlags, FRX_PROTECT_REPORT_NO_OPTBAND)
			THIS.chkDataGrouping.Value   = bittest( m.iProtFlags, FRX_PROTECT_REPORT_NO_GROUP)
			THIS.chkVariables.Value      = bittest( m.iProtFlags, FRX_PROTECT_REPORT_NO_VARIABLES)
		
			*---------------------------------
			* Normally, you'd call this here. But this is a special case. 
			* If Protection is on, then this won't be visible. If if it 
			* isn't on, then there is no need to look at what flags are
			* set.
			*---------------------------------
			*THIS.SetProtection()
		endif	
	ENDPROC

	PROCEDURE savetofrx
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		if used(this.Tag)
			select (this.Tag)
			
			go top
			locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER and PLATFORM = FRX_PLATFORM_WINDOWS
			
			local iProtection
			iProtection = 0
		
			if THIS.chkReportPrint.Value
				iProtection = bitset( m.iProtection , FRX_PROTECT_REPORT_NO_PRINT)
			endif
			if THIS.chkPreview.Value
				iProtection = bitset( m.iProtection , FRX_PROTECT_REPORT_NO_PREVIEW)
			endif
			if THIS.chkDataEnv.Value
				iProtection = bitset( m.iProtection , FRX_PROTECT_REPORT_NO_DATAENV)
			endif
			if THIS.chkPageLayout.Value
				iProtection = bitset( m.iProtection , FRX_PROTECT_REPORT_NO_PAGESETUP )
			endif
			if THIS.chkOptionalBands.Value
				iProtection = bitset( m.iProtection , FRX_PROTECT_REPORT_NO_OPTBAND)
			endif
			if THIS.chkDataGrouping.Value
				iProtection = bitset( m.iProtection , FRX_PROTECT_REPORT_NO_GROUP)
			endif
			if THIS.chkVariables.Value
				iProtection = bitset( m.iProtection , FRX_PROTECT_REPORT_NO_VARIABLES)
			endif
		
			replace ORDER with THIS.frxCursor.IntToBinstring( m.iProtection )
			
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
			
		endif	
		return .T.
	ENDPROC

	PROCEDURE chkDataEnv.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_CHK_NO_DATAENV_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkDataEnv.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE chkDataGrouping.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_CHK_NO_GROUPING_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkDataGrouping.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE chkOptionalBands.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_CHK_NO_OPTBANDS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkOptionalBands.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE chkPageLayout.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_CHK_NO_PAGELAYOUT_LOC 
		#ENDIF
		
	ENDPROC

	PROCEDURE chkPageLayout.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE chkPreview.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_CHK_NO_PREVIEW_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkPreview.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE chkReportPrint.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_CHK_NO_PRINT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkReportPrint.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE chkVariables.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_CHK_NO_REPVARS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkVariables.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE LBL1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LBL4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPPROTECT_LBL_TEXT_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelreportruler AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shp2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="SHP1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboRuler" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkShowPosition" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkVisibleGrid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSnapTo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnHorizontalSpacing" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnVerticalSpacing" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 170
	Name = "panelreportruler"
	Width = 533

	ADD OBJECT 'cboRuler' AS cbo WITH ;
		Left = 21, ;
		Name = "cboRuler", ;
		TabIndex = 3, ;
		Top = 37, ;
		Width = 144, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkShowPosition' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Show position in status bar", ;
		Height = 15, ;
		Left = 21, ;
		Name = "chkShowPosition", ;
		TabIndex = 4, ;
		Top = 67, ;
		Width = 147, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkSnapTo' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Snap to grid", ;
		Height = 15, ;
		Left = 286, ;
		Name = "chkSnapTo", ;
		TabIndex = 7, ;
		Top = 45, ;
		Width = 76, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkVisibleGrid' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Show grid lines", ;
		Height = 15, ;
		Left = 286, ;
		Name = "chkVisibleGrid", ;
		TabIndex = 6, ;
		Top = 23, ;
		Width = 89, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'LBL1' AS lbl WITH ;
		Caption = " Ruler ", ;
		Left = 9, ;
		Name = "LBL1", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		Caption = " Grid ", ;
		Left = 276, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 5, ;
		Top = 2, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'LBL4' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Horizontal spacing:", ;
		Height = 15, ;
		Left = 286, ;
		Name = "LBL4", ;
		TabIndex = 8, ;
		Top = 69, ;
		Width = 93, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl5' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Vertical spacing:", ;
		Height = 15, ;
		Left = 286, ;
		Name = "Lbl5", ;
		TabIndex = 10, ;
		Top = 115, ;
		Width = 80, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl6' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Units:", ;
		Height = 15, ;
		Left = 21, ;
		Name = "Lbl6", ;
		TabIndex = 2, ;
		Top = 20, ;
		Width = 30, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'SHP1' AS shp WITH ;
		BackStyle = 0, ;
		Height = 85, ;
		Left = 1, ;
		Name = "SHP1", ;
		Style = 3, ;
		Top = 8, ;
		Width = 257, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'Shp2' AS shp WITH ;
		BackStyle = 0, ;
		Height = 155, ;
		Left = 267, ;
		Name = "Shp2", ;
		Style = 3, ;
		Top = 9, ;
		Width = 256, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="shape" />

	ADD OBJECT 'spnHorizontalSpacing' AS spn WITH ;
		Left = 286, ;
		Name = "spnHorizontalSpacing", ;
		SpinnerHighValue = 99.00, ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 9, ;
		Top = 86, ;
		Width = 84
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnVerticalSpacing' AS spn WITH ;
		Left = 285, ;
		Name = "spnVerticalSpacing", ;
		SpinnerHighValue = 99.00, ;
		SpinnerLowValue = 1.00, ;
		TabIndex = 11, ;
		Top = 132, ;
		Width = 84
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />
	
	PROCEDURE loadfromfrx
		if used(this.Tag)
		
			select (this.Tag)
			go top
			locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER
		
			THIS.chkVisibleGrid.Value = ( RULERLINES=1)
			
			THIS.chkSnapTo.Value = GRID
			
			THIS.spnHorizontalSpacing.Value = GRIDH
			THIS.spnVerticalSpacing.Value   = GRIDV
			
			THIS.cboRuler.Value = RULER+1
		
			THIS.chkShowPosition.Value = CURPOS
			
		endif	
	ENDPROC

	PROCEDURE savetofrx
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		if used(this.Tag)
			select (this.Tag)
			
			go top
			locate for OBJTYPE = FRX_OBJTYP_REPORTHEADER and PLATFORM = FRX_PLATFORM_WINDOWS
		
			replace ;
				RULERLINES 	with iif( THIS.chkVisibleGrid.Value, 1, 0 ), ;
				GRID 		with THIS.chkSnapTo.Value, ;
				GRIDH		with THIS.spnHorizontalSpacing.Value, ;
				GRIDV		with THIS.spnVerticalSpacing.Value , ;
				RULER 		with (THIS.cboRuler.Value - 1), ;
				CURPOS		with THIS.chkShowPosition.Value
		
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
		
			
		endif	
		return .T.
	ENDPROC

	PROCEDURE cboRuler.Init
		THIS.Style = 2 && dropdown list
		THIS.AddItem( UNITS_NORULER_LOC,    FRX_RULER_OFF + 1 )
		THIS.AddItem( UNITS_INCHES_LOC,     FRX_RULER_INCHES + 1 )
		THIS.AddItem( UNITS_METRIC_LOC,     FRX_RULER_METRIC + 1 )
		THIS.AddItem( UNITS_PIXELS_LOC,     FRX_RULER_PIXELS + 1 )
		*THIS.AddItem( UNITS_CHARACTERS_LOC, FRX_RULER_CHARACTERS + 1 )
		THIS.Value = 2
		
		
	ENDPROC

	PROCEDURE cboRuler.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		
	ENDPROC

	PROCEDURE chkShowPosition.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_CHK_SHOW_POSITION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkShowPosition.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		
	ENDPROC

	PROCEDURE chkSnapTo.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_CHK_SNAP_TO_GRID_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkSnapTo.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		
	ENDPROC

	PROCEDURE chkVisibleGrid.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_CHK_SHOW_GRID_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkVisibleGrid.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		
	ENDPROC

	PROCEDURE LBL1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_LBL_RULER_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_LBL_GRID_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE LBL4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_LBL_HORIZONTAL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl5.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_LBL_VERTICAL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl6.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_RULERGRID_LBL_UNITS_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE spnHorizontalSpacing.Init
		dodefault()
		THIS.InputMask = "999 pixels"
	ENDPROC

	PROCEDURE spnHorizontalSpacing.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		if THIS.Value < THIS.SpinnerLowValue
			THIS.Value = THIS.SpinnerLowValue
		endif
		if THIS.Value > THIS.SpinnerHighValue
			THIS.Value = THIS.SpinnerHighValue
		endif
	ENDPROC

	PROCEDURE spnVerticalSpacing.Init
		dodefault()
		THIS.InputMask = "999 pixels"
	ENDPROC

	PROCEDURE spnVerticalSpacing.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
		
		if THIS.Value < THIS.SpinnerLowValue
			THIS.Value = THIS.SpinnerLowValue
		endif
		if THIS.Value > THIS.SpinnerHighValue
			THIS.Value = THIS.SpinnerHighValue
		endif
	ENDPROC

ENDDEFINE

DEFINE CLASS panelreportvars AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="varList" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtStoreValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCalculate" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtInitialValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetExpr" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetExpr2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkRelease" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboReset" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: addvar
		*m: editvar
		*m: isnamevalid
		*m: populatelist
		*m: removevar
		*p: varcount
	*</DefinedPropArrayMethod>

	Height = 213
	Name = "panelreportvars"
	varcount = 0
	Width = 451

	ADD OBJECT 'cboCalculate' AS cbocalculate WITH ;
		Anchor = 9, ;
		Left = 231, ;
		Name = "cboCalculate", ;
		TabIndex = 14, ;
		Top = 152, ;
		Width = 190, ;
		ZOrderSet = 17
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboReset' AS cbocalcreset WITH ;
		Anchor = 9, ;
		Left = 231, ;
		Name = "cboReset", ;
		TabIndex = 12, ;
		Top = 106, ;
		Width = 191, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkRelease' AS chk WITH ;
		Alignment = 0, ;
		Anchor = 9, ;
		Caption = "Release after report", ;
		Left = 231, ;
		Name = "chkRelease", ;
		TabIndex = 15, ;
		Top = 183, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdAdd' AS cmd WITH ;
		Anchor = 6, ;
		Caption = "Add", ;
		Left = 2, ;
		Name = "cmdAdd", ;
		TabIndex = 3, ;
		Top = 184, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetExpr' AS cmd WITH ;
		Anchor = 9, ;
		Caption = "...", ;
		Height = 22, ;
		Left = 423, ;
		Name = "cmdGetExpr", ;
		TabIndex = 7, ;
		Top = 19, ;
		Width = 22, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetExpr2' AS cmd WITH ;
		Anchor = 9, ;
		Caption = "...", ;
		Height = 22, ;
		Left = 423, ;
		Name = "cmdGetExpr2", ;
		TabIndex = 10, ;
		Top = 63, ;
		Width = 22, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS cmd WITH ;
		Anchor = 6, ;
		Caption = "Remove", ;
		Left = 83, ;
		Name = "cmdRemove", ;
		TabIndex = 4, ;
		Top = 184, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'edtInitialValue' AS edt WITH ;
		Anchor = 9, ;
		Height = 22, ;
		Left = 231, ;
		Name = "edtInitialValue", ;
		ScrollBars = 0, ;
		SelectOnEntry = .T., ;
		TabIndex = 9, ;
		Top = 63, ;
		Width = 191, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'edtStoreValue' AS edt WITH ;
		Anchor = 9, ;
		Height = 22, ;
		Left = 231, ;
		Name = "edtStoreValue", ;
		ScrollBars = 0, ;
		SelectOnEntry = .T., ;
		TabIndex = 6, ;
		Top = 19, ;
		Width = 191, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />

	ADD OBJECT 'Lbl1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Variables:", ;
		Left = 2, ;
		Name = "Lbl1", ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Value to store:", ;
		Left = 232, ;
		Name = "Lbl3", ;
		TabIndex = 5, ;
		Top = 2, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl4' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Initial value:", ;
		Left = 232, ;
		Name = "Lbl4", ;
		TabIndex = 8, ;
		Top = 46, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl5' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Reset value based on:", ;
		Left = 233, ;
		Name = "Lbl5", ;
		TabIndex = 11, ;
		Top = 89, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl6' AS lbl WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Caption = "Calculation type:", ;
		Left = 232, ;
		Name = "Lbl6", ;
		TabIndex = 13, ;
		Top = 135, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'varList' AS lst WITH ;
		Anchor = 15, ;
		ColumnCount = 2, ;
		ColumnLines = .F., ;
		ColumnWidths = "200,0", ;
		Height = 158, ;
		Left = 2, ;
		MoverBars = .T., ;
		Name = "varList", ;
		TabIndex = 2, ;
		ToolTipText = "Double-click to edit variable name", ;
		Top = 18, ;
		Width = 206, ;
		ZOrderSet = 1
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="listbox" />
	
	PROCEDURE addvar
		*===============================================================
		* AddVar()
		*===============================================================
		
		*---------------------------------------------------------------
		* Prompt for a new variable name
		*---------------------------------------------------------------
		local cVarName
		cVarName = inputbox(EDIT_REPORT_VAR_PROMPT_LOC, EDIT_REPORT_VAR_CAPTION_LOC, "" ) 
		
		if not empty( m.cVarName )
		
			*---------------------------------------
			* Check name is a valid variable name:
			*---------------------------------------
		
			if not THIS.IsNameValid( m.cVarName )
				=messagebox(REPORT_VAR_INVALID_NAME_LOC, 64, DEFAULT_MBOX_TITLE_LOC)
				return 
			endif
		
			*---------------------------------------
			* Check name is not used already:
			*---------------------------------------
			local iRec
			iRec = recno('vars')
			select vars
			locate for VARNAME == m.cVarname 
			if found()
				go m.iRec in vars
				=messagebox(REPORT_VAR_DUPLICATE_NAME_LOC, 64, DEFAULT_MBOX_TITLE_LOC)
				return 
			endif
		
			THIS.varCount = THIS.varCount + 1
		
			local cUniqueId
			cUniqueId = sys(2015)
		
			THIS.varList.AddListItem( m.cVarName,  THIS.varCount, 1)
			THIS.varList.AddListItem( m.cUniqueId, THIS.varCount, 2)
		
			insert into vars ;
				( UNIQUEID, VARNAME, VALUE_TO_STORE, ;
				  INITIAL_VALUE, RELEASE_VAR, CALC_TYPE, RESET_ON ) ;
			values ;
				( m.cUniqueId, m.cVarName, "0", "0", .F., 1, 1 )
		
			THIS.varList.ListIndex = THIS.varList.listCount
			THIS.varList.InteractiveChange()
			THIS.edtStoreValue.SetFocus()
			THIS.bufferIsDirty = .T.
			THIS.RefreshEnabledState()
		endif
		
	ENDPROC

	PROCEDURE editvar
		*===============================================================
		* EditVar()
		*===============================================================
		
		*---------------------------------------------------------------
		* Prompt to edit the variable name
		*---------------------------------------------------------------
		local cVarName
		cVarName = vars.VARNAME
		cVarName = inputbox(EDIT_REPORT_VAR_PROMPT_LOC, EDIT_REPORT_VAR_CAPTION_LOC, m.cVarName ) 
		
		if not empty( m.cVarName )
		
			select vars
			replace VARNAME with m.cVarName
		
			THIS.PopulateList()
		
			THIS.RefreshEnabledState()
			THIS.bufferIsDirty = .T.
		
		endif
		
	ENDPROC

	PROCEDURE isnamevalid
		lparameter lcVarName
		
		local lIsValid
		lIsValid = .T.
		
		try 
			local &lcVarName
		catch to oErr
			lIsValid = .F.
		endtry	
		
		return m.lIsValid
	ENDPROC

	PROCEDURE loadfromfrx
		*===============================================================
		* LoadFromFrx()
		*===============================================================
		
		*------------------------------------------------------
		* Read the panel control values from the FRX record(s)
		*------------------------------------------------------
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			if THIS.event.Protected and ;
				THIS.frxCursor.hasProtectionFlag( ORDER, FRX_PROTECT_REPORT_NO_VARIABLES )
				THIS.Visible = .F.
				return
			endif
		
			local cCurrObject, i
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*----------------------------------------------------------------
			* Generate the "Calc reset on" cursor,
			* Tell the combo to configure itself based on FRX, bands
			*----------------------------------------------------------------
			THIS.frxCursor.createCalcResetOnCursor()
			THIS.cboReset.LoadFromFrx()	
		
			*------------------------------------------------------------
			* Variables: number of (18,0) records in FRX
			*------------------------------------------------------------
			this.frxCursor.createVariableCursor()
		
			this.populateList()
			
			THIS.refreshEnabledstate()
			 
			select (THIS.Tag)
			locate for UNIQUEID = m.cCurrObject
		
		*	THIS.txtVarName.ControlSource      = "vars.VARNAME"
			THIS.edtStoreValue.ControlSource   = "vars.VALUE_TO_STORE"
			THIS.edtInitialValue.ControlSource = "vars.INITIAL_VALUE"
			THIS.chkRelease.ControlSource      = "vars.RELEASE_VAR"
			THIS.cboCalculate.ControlSource    = "vars.CALC_TYPE"
			THIS.cboReset.ControlSource        = "vars.RESET_ON"
		
		endif
	ENDPROC

	PROCEDURE populatelist
		local i, curVal
		
		curVal = this.varList.Value
		i      = 0
		this.varList.Clear()
		
		select vars
		scan 
			i = m.i + 1
			THIS.varList.AddListItem( trim(VARNAME), m.i, 1)
			THIS.varList.AddListItem( UNIQUEID,   m.i, 2)
		endscan	
		
		THIS.varCount = m.i
		THIS.varList.Value = m.curVal
	ENDPROC

	PROCEDURE refreshenabledstate
		THIS.cmdRemove.Enabled = (THIS.varList.ListCount > 0) and (THIS.varList.ListItemId > 0)
		*THIS.cmdAdd.Enabled    = (THIS.varList.ListCount < 20 )
	ENDPROC

	PROCEDURE removevar
		*===============================================================
		* RemoveVar()
		* 
		* Delete the currently selected variable item from the list:
		*===============================================================
		local currentIndex, cVarId
		local curSel
		curSel = select(0)
		
		with THIS.varList
			*------------------------------------------------------------
			* Get the uniqueID of the variable from the selected item:
			*------------------------------------------------------------
			currentIndex = .ItemIdToIndex( .listItemId )
			
		*	cVarName = .List( m.currentIndex, 1 )
			cVarId  = .List( m.currentIndex, 2 )
			
			select vars
			locate for UNIQUEID = m.cVarId
		
			*------------------------------------------------------------
			* Remove the variable from the list:
			*------------------------------------------------------------
			.RemoveListItem( .ListItemId )		
			THIS.varCount = THIS.varCount - 1
			
		endwith
		
		*------------------------------------------------------------
		* Put the list on no row
		*------------------------------------------------------------
		THIS.varList.ListIndex = 0
		
		*------------------------------------------------------------
		* Put the vars cursor on eof:
		*------------------------------------------------------------
		go bottom in vars
		skip in vars
		
		select (m.curSel)
		
		THIS.RefreshEnabledState()
		THIS.bufferIsDirty = .T.
		THIS.Refresh()
		
	ENDPROC

	PROCEDURE savetofrx
		*===============================================================
		* SaveToFrx()
		*
		* Write the control values back into the FRX record(s)
		*
		*===============================================================
		
		if not THIS.bufferIsDirty
			*---------------------------------------
			* No changes were made in this panel.
			* No need to re-write the FRX
			*---------------------------------------
			return .T.
		endif
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
			set filter to PLATFORM = FRX_PLATFORM_WINDOWS and not deleted()
		
			*-------------------------------------------------------------
			* Fix for SP1: Bug# 515640
			* 0. Ensure values are valid. prevent closing dialog if so.
			*-------------------------------------------------------------
			select vars
			scan 
				if empty(trim(vars.VALUE_TO_STORE )) 
					=messagebox(strtran(REPORT_VAR_INVALID_STORE_VALUE_LOC,"{0}",trim(vars.VARNAME)), 64, DEFAULT_MBOX_TITLE_LOC)
					return .F.			
				endif
				if empty(trim(vars.INITIAL_VALUE))
					=messagebox(strtran(REPORT_VAR_INVALID_INITIAL_VALUE_LOC,"{0}",trim(vars.VARNAME)), 64, DEFAULT_MBOX_TITLE_LOC)
					return .F.			
				endif
			endscan
			go top in vars	
			*------------------
		
			local cCurrObject	
			cCurrObject = UNIQUEID	&& might need to get back here.
		
			*-------------------------------------------------------------
			* 1. Construct the beginning of a shadow frx:
			*    (NB: SQL select does not respect filter )
			*-------------------------------------------------------------
			select * ;
				from (THIS.Tag) ;
				where not deleted() and PLATFORM = FRX_PLATFORM_WINDOWS and ;
					  (OBJTYPE <> FRX_OBJTYP_VARIABLE) ;
				into cursor newfrx readwrite
		
			*-------------------------------------------------------------
			* Make sure we're at the bottom of the new frx:
			*-------------------------------------------------------------
			go bottom in newfrx
			
			local i, cVarId
		
			*-------------------------------------------------------------
			* 2. Add in the variable records:
			*-------------------------------------------------------------
			for i = 1 to THIS.varList.listCount
		
			    *cVarName = THIS.varList.List(i,1)
				cVarId    = THIS.varList.List(i,2)
		
				*-------------------------------------------------------------
				* synch up the vars cursor record pointer:
				*-------------------------------------------------------------
				select vars
				locate for UNIQUEID = m.cVarId
		
				*-------------------------------------------------------------
				* Add a the variable into the frx:
				*-------------------------------------------------------------
				select newfrx
				insert into newfrx ( ;
					PLATFORM, ;
					UNIQUEID, ;
					OBJTYPE, ;
					NAME, ;
					EXPR, ;
					TAG, ;
					UNIQUE, ;
					RESETTOTAL, ;
					TOTALTYPE ;
				) ;
				values ( ;
					FRX_PLATFORM_WINDOWS, ;
					vars.UNIQUEID, ;
					FRX_OBJTYP_VARIABLE, ;
					vars.VARNAME, ;
					trim(vars.VALUE_TO_STORE ),;
					trim(vars.INITIAL_VALUE),;
					vars.RELEASE_VAR, ;
					THIS.cboReset.IndexToItemId( vars.RESET_ON ), ;
					vars.CALC_TYPE-1 )
				
			endfor
		
			*-------------------------------------------------------------
			* 7. Replace the FRX cursor:
			*-------------------------------------------------------------
			select (THIS.Tag)
			set filter to
			
			* Pull out the other platform records:
			select * ;
				from (THIS.Tag) ;
				where PLATFORM <> FRX_PLATFORM_WINDOWS ;
				into cursor other_platforms readwrite
			select (THIS.Tag)
			zap
			* must put the WINDOWS records first:
			append from dbf('newfrx')
			if reccount('other_platforms') > 0
				append From dbf('other_platforms')
			endif
			use in newfrx
			use in other_platforms
			
			*-------------------------------------------------------------
			* Done.	
			*-------------------------------------------------------------
			select (THIS.Tag)
			locate for UNIQUEID = cCurrObject
		
			*-----------------------------------------------------------------
			* We've saved the changes:
			*-----------------------------------------------------------------
			THIS.bufferIsDirty = .F.
		
		endif
	ENDPROC

	PROCEDURE cboCalculate.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE cboReset.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE chkRelease.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPVARS_CHK_RELEASE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkRelease.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE cmdAdd.Click
		THIS.Parent.AddVar()
		
	ENDPROC

	PROCEDURE cmdAdd.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_ADD_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE cmdGetExpr.Click
		if not eof("vars")
			local cDefaultExpr, cExpression
			cDefaultExpr = this.Parent.edtStoreValue.Value
			cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "", "VariableValueToStore" )
			THIS.Parent.edtStoreValue.Value = m.cExpression
			THIS.Parent.bufferIsDirty = .T.
			THIS.Parent.edtStoreValue.SetFocus()
		endif
	ENDPROC

	PROCEDURE cmdGetExpr2.Click
		if not eof("vars")
			local cDefaultExpr, cExpression
			cDefaultExpr = this.Parent.edtInitialValue.Value
			cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "", "VariableInitialValue")
			THIS.Parent.edtInitialValue.Value = m.cExpression
			THIS.Parent.bufferIsDirty = .T.
			THIS.Parent.edtInitialValue.SetFocus()
		endif
	ENDPROC

	PROCEDURE cmdRemove.Click
		THIS.Parent.RemoveVar()
	ENDPROC

	PROCEDURE cmdRemove.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_CMD_REMOVE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE edtInitialValue.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE edtStoreValue.InteractiveChange
		THIS.Parent.bufferIsDirty = .T.
	ENDPROC

	PROCEDURE Lbl1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPVARS_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPVARS_LBL_STORE_VALUE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl4.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPVARS_LBL_INITIAL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl5.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPVARS_LBL_RESET_ON_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl6.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_REPVARS_LBL_CALC_TYPE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE varList.Click
		THIS.Parent.RefreshEnabledState()
	ENDPROC

	PROCEDURE varList.DblClick
		THIS.Parent.EditVar()
	ENDPROC

	PROCEDURE varList.InteractiveChange
		THIS.ProgrammaticChange()
		THIS.Parent.bufferIsDirty = .T.
		
	ENDPROC

	PROCEDURE varList.ProgrammaticChange
		*-------------------------------------------------------------------
		* Locate the vars cursor on the right record
		*-------------------------------------------------------------------
		local currentIndex, cVarId 
		currentIndex = THIS.ItemIdToIndex( THIS.listItemId )
		cVarId       = THIS.List( m.currentIndex, 2 )
		select vars
		locate for UNIQUEID = m.cVarId
		THIS.Parent.Refresh()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelshape AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="objPosition" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="objStretch" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: setenabledstate
	*</DefinedPropArrayMethod>

	Height = 197
	Name = "panelshape"
	Width = 337

	ADD OBJECT 'objPosition' AS frxobjectpositioncontrol WITH ;
		Height = 89, ;
		Left = 0, ;
		Name = "objPosition", ;
		TabIndex = 3, ;
		Top = 3, ;
		Width = 344, ;
		OptionGroup.Left = 0, ;
		OptionGroup.Name = "OptionGroup", ;
		OptionGroup.opt1.Left = 66, ;
		OptionGroup.opt1.Name = "opt1", ;
		OptionGroup.opt1.Top = 15, ;
		OptionGroup.opt2.Left = 66, ;
		OptionGroup.opt2.Name = "opt2", ;
		OptionGroup.opt2.Top = 36, ;
		OptionGroup.opt3.Left = 66, ;
		OptionGroup.opt3.Name = "opt3", ;
		OptionGroup.opt3.Top = 57, ;
		OptionGroup.Top = 7, ;
		OptionGroup.Width = 332, ;
		Label.Name = "Label", ;
		gifFloat.Height = 34, ;
		gifFloat.Name = "gifFloat", ;
		gifFloat.Width = 31, ;
		gifTop.Height = 34, ;
		gifTop.Name = "gifTop", ;
		gifTop.Width = 31, ;
		gifBottom.Height = 34, ;
		gifBottom.Name = "gifBottom", ;
		gifBottom.Width = 31
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'objStretch' AS frxstretchdowncontrol WITH ;
		Height = 97, ;
		Left = 0, ;
		Name = "objStretch", ;
		TabIndex = 4, ;
		Top = 97, ;
		Width = 344, ;
		OptionGroup.Left = 0, ;
		OptionGroup.Name = "OptionGroup", ;
		OptionGroup.opt1.Left = 66, ;
		OptionGroup.opt1.Name = "opt1", ;
		OptionGroup.opt1.Top = 14, ;
		OptionGroup.opt2.Left = 66, ;
		OptionGroup.opt2.Name = "opt2", ;
		OptionGroup.opt2.Top = 35, ;
		OptionGroup.opt3.Left = 66, ;
		OptionGroup.opt3.Name = "opt3", ;
		OptionGroup.opt3.Top = 56, ;
		OptionGroup.Top = 7, ;
		OptionGroup.Width = 332, ;
		Label.Name = "Label", ;
		gifNoStretch.Height = 34, ;
		gifNoStretch.Name = "gifNoStretch", ;
		gifNoStretch.Width = 31, ;
		gifToTallest.Height = 34, ;
		gifToTallest.Name = "gifToTallest", ;
		gifToTallest.Width = 31, ;
		gifToHeight.Height = 34, ;
		gifToHeight.Name = "gifToHeight", ;
		gifToHeight.Width = 31
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			* Object Position:
			THIS.objPosition.LoadFromFrx()
		
			* Object Stretch:
			*
			THIS.objStretch.LoadFromFrx()
		
			THIS.SetEnabledState()
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE savetofrx
		* THIS DEFAULT CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
		endif
		
		* Object Position:
		*
		THIS.objPosition.SaveToFrx()
		
		* Object Stretch:
		*
		THIS.objStretch.SaveToFrx()
		
		return .T.
	ENDPROC

	PROCEDURE setenabledstate
		* Vertical lines have both objPos and stretchDown
		* Horizontal lines have stretchDown disabled
		  
		local oStart, oEnd
		oStart = THIS.frxCursor.getBandFor( UNIQUEID, GET_START_BAND )
		oEnd   = THIS.frxCursor.getBandFor( UNIQUEID, GET_END_BAND )
		
		do case 
		case oStart.UNIQUEID <> oEnd.UNIQUEID
			* objects that span bands have neither
			THIS.objPosition.Enabled = .F.
			THIS.objStretch.Enabled = .F.
		
		case THIS.event.ObjType = FRX_OBJTYP_LINE
			do case
			case WIDTH > HEIGHT
				* Horizontal lines have stretchDown disabled
				THIS.objStretch.Enabled = .F.
		
			otherwise
				* Vertical lines (that don't span) have both objPos and stretchDown
				THIS.objPosition.Enabled = .T.
				THIS.objStretch.Enabled = .T.
		
			endcase
		
		endcase
		
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.objPosition.Value  = OBJECT_POSITION_FIX_TOP
		THIS.objStretch.Value   = OBJECT_STRETCH_NO_STRETCH
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelshapeformat AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnCurvature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkForeDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCurvature" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkBackDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="LBL1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdForeColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBackcolor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboStyle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboWeight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oFormatter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="linPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntForeColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntBackColor" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: fillpattofillstyle		&& Converts FILLPAT values to object.FillStyle
		*m: penpattostyle
		*m: refreshcontrolvalues
		*m: setenabledstate
		*m: styletopenpat
		*m: updatepreview
		*p: currentobjtype
	*</DefinedPropArrayMethod>

	currentobjtype = 0
	Height = 283
	Name = "panelshapeformat"
	Width = 328

	ADD OBJECT 'cboStyle' AS cbo WITH ;
		Height = 22, ;
		Left = 0, ;
		Name = "cboStyle", ;
		Style = 2, ;
		TabIndex = 2, ;
		Top = 19, ;
		Width = 248, ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboWeight' AS cbo WITH ;
		Left = 0, ;
		Name = "cboWeight", ;
		TabIndex = 3, ;
		Top = 62, ;
		Width = 160, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkBackDefault' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use default background (fill) color", ;
		Left = 11, ;
		Name = "chkBackDefault", ;
		TabIndex = 7, ;
		Top = 135, ;
		Value = .T., ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkForeDefault' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use default foreground (pen) color", ;
		Left = 11, ;
		Name = "chkForeDefault", ;
		TabIndex = 5, ;
		Top = 111, ;
		Value = .T., ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdBackcolor' AS cmd WITH ;
		Caption = "...", ;
		Enabled = .F., ;
		Height = 21, ;
		Left = 257, ;
		Name = "cmdBackcolor", ;
		TabIndex = 8, ;
		Top = 132, ;
		Width = 21, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdForeColor' AS cmd WITH ;
		Caption = "...", ;
		Enabled = .F., ;
		Height = 21, ;
		Left = 257, ;
		Name = "cmdForeColor", ;
		TabIndex = 6, ;
		Top = 106, ;
		Width = 21, ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntBackColor' AS cnt WITH ;
		BackColor = 209,249,136, ;
		BackStyle = 1, ;
		Height = 14, ;
		Left = 241, ;
		Name = "cntBackColor", ;
		SpecialEffect = 1, ;
		TabIndex = 16, ;
		Top = 136, ;
		Width = 14, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'cntForeColor' AS cnt WITH ;
		BackColor = 209,249,136, ;
		BackStyle = 1, ;
		Height = 14, ;
		Left = 241, ;
		Name = "cntForeColor", ;
		SpecialEffect = 1, ;
		TabIndex = 17, ;
		Top = 110, ;
		Width = 14, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'LBL1' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Style:", ;
		Left = 1, ;
		Name = "LBL1", ;
		TabIndex = 13, ;
		Top = 2, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl2' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Sample ", ;
		Left = 10, ;
		Name = "Lbl2", ;
		Style = 3, ;
		TabIndex = 14, ;
		Top = 217, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Color ", ;
		Left = 10, ;
		Name = "Lbl3", ;
		Style = 3, ;
		TabIndex = 15, ;
		Top = 89, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblCurvature' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Curvature:", ;
		Enabled = .T., ;
		Left = 168, ;
		Name = "lblCurvature", ;
		TabIndex = 11, ;
		Top = 45, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblMode' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Backstyle ", ;
		Left = 11, ;
		Name = "lblMode", ;
		Style = 3, ;
		TabIndex = 10, ;
		Top = 167, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblWeight' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Weight:", ;
		Left = 0, ;
		Name = "lblWeight", ;
		TabIndex = 12, ;
		Top = 45, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'linPreview' AS line WITH ;
		Height = 0, ;
		Left = 38, ;
		Name = "linPreview", ;
		Top = 251, ;
		Width = 222
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'oFormatter' AS frxformatutil WITH ;
		Height = 16, ;
		Left = 236, ;
		Name = "oFormatter", ;
		Top = 0, ;
		Width = 21
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="custom" />

	ADD OBJECT 'opgMode' AS opg WITH ;
		ButtonCount = 2, ;
		Height = 36, ;
		Left = 1, ;
		Name = "opgMode", ;
		TabIndex = 9, ;
		Top = 174, ;
		Value = 1, ;
		Width = 287, ;
		ZOrderSet = 2, ;
		Opt1.Caption = "Opaque", ;
		Opt1.Left = 21, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 10, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "Transparent", ;
		Opt2.Left = 137, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 54, ;
		Left = 1, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 223, ;
		Width = 287, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		Height = 67, ;
		Left = 1, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 96, ;
		Width = 287, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpPreview' AS shape WITH ;
		Height = 27, ;
		Left = 60, ;
		Name = "shpPreview", ;
		Top = 238, ;
		Width = 175, ;
		ZOrderSet = 17
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'spnCurvature' AS spn WITH ;
		Height = 22, ;
		InputMask = "99", ;
		KeyboardHighValue = 99, ;
		KeyboardLowValue = 0, ;
		Left = 168, ;
		Name = "spnCurvature", ;
		SpinnerHighValue = 99.00, ;
		SpinnerLowValue = 0.00, ;
		TabIndex = 4, ;
		Top = 62, ;
		Width = 80, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />
	
	PROCEDURE fillpattofillstyle		&& Converts FILLPAT values to object.FillStyle
		lparameter iFillPat
		do case
		case m.iFillPat = FRX_FILLPAT_NONE
			return 1
		
		case m.iFillPat = FRX_FILLPAT_SOLID
			return 0
		
		case m.iFillPat = FRX_FILLPAT_LEFTDIAGONAL
			return 5
			
		case m.iFillPat = FRX_FILLPAT_RIGHTDIAGONAL
			return 4
		
		otherwise
			return m.iFillPat
		
		endcase	
		
	ENDPROC

	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			if this.event.objType = FRX_OBJTYPE_MULTISELECT
				THIS.currentObjType = frx.OBJTYPE
			else
				THIS.currentObjType = THIS.event.ObjType
			endif
		
			*--------------------------------------------------------
			* Style is stored in PENPAT
			*--------------------------------------------------------
			THIS.cboStyle.Value = THIS.PENPATtoStyle(PENPAT)
		
			*--------------------------------------------------------
			* Weight is stored in PENSIZE
			*--------------------------------------------------------
			do case
			case inlist(PENSIZE, FRX_PENSIZE_HAIRLINE, FRX_PENSIZE_1POINTS, FRX_PENSIZE_2POINTS)
				THIS.cboWeight.Value = PENSIZE+1
		
			case inlist(PENSIZE, FRX_PENSIZE_4POINTS)
				THIS.cboWeight.Value = PENSIZE
		
			otherwise
				THIS.cboWeight.Value = PENSIZE-1	
		
			endcase
		
			*-----------------------------------------------------------------
			* Background transparency is stored in bit 0 of MODE: 
			*-----------------------------------------------------------------
			* bit 0 : Transparency (0 = Opaque, 1 = transparent)
		 	* bit 1 : Direction    (0 = Left-To-Right, 2 = Right-To-Left)
		 	* bit 2 : Context      (4 = Context? what is this?)
			*-----------------------------------------------------------------
			if bittest( MODE, 0 ) 
				THIS.oFormatter.Transparency = 2
			else
				THIS.oFormatter.Transparency = 1
			endif
			
			*--------------------------------------------------------
			* Style is stored in OFFSET as percentage curvature:
			*--------------------------------------------------------
			THIS.spnCurvature.Value = int(OFFSET)
		
			*--------------------------------------------------------
			* Color:
			* .PENRED, .PENGREEN, .PENBLUE, .FILLRED, .FILLGREEN, .FILLBLUE
			*--------------------------------------------------------
			THIS.oFormatter.setForeColor( PENRED, PENGREEN, PENBLUE )
			THIS.oFormatter.setBackColor( FILLRED, FILLGREEN, FILLBLUE )
		
			*-----------------------------------------------------------------
			* Initialise the controls from the oFormatter:
			*-----------------------------------------------------------------
			THIS.chkBackDefault.Value     = THIS.oFormatter.DefaultBackColor
			THIS.chkForeDefault.Value     = THIS.oFormatter.DefaultForeColor
			THIS.opgMode.Value            = THIS.oFormatter.Transparency
		
			if THIS.currentObjType = FRX_OBJTYP_LINE
				THIS.chkBackDefault.Value = .T.
			endif
			
			THIS.SetEnabledState()
			
			do case
			case THIS.currentObjType = FRX_OBJTYP_LINE
				THIS.shpPreview.Top = THIS.shpPreview.Top + int(THIS.shpPreview.Height/2)
		
			otherwise
			endcase
		
			THIS.updatePreview()
			
			*--------------------------------------------------------
			* Go to protected mode, if necessary:
			*--------------------------------------------------------
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE penpattostyle
		lparameter iPENPAT
		
		do case 
		case inlist( m.iPENPAT, ;
					FRX_PENPAT_DOTTED, ;
					FRX_PENPAT_DASHED, ;
					FRX_PENPAT_DASHDOT, ;
					FRX_PENPAT_DASHDOTDOT )
			return m.iPENPAT+1
		
		case m.iPENPAT = FRX_PENPAT_NONE
			return 6
			
		case m.iPENPAT = FRX_PENPAT_SOLID
			return 1
		endcase
		return 1
	ENDPROC

	PROCEDURE refreshcontrolvalues
		lparameters tcSourceControl
		if empty(m.tcSourceControl)
			tcSourceControl = "All"
		endif
		
		if inlist( m.tcSourceControl, "All", "Color")
			THIS.cmdBackColor.Enabled = not THIS.chkBackDefault.Value
			THIS.cmdForeColor.Enabled = not THIS.chkForeDefault.Value	
		endif
		
		THIS.UpdatePreview()
		
	ENDPROC

	PROCEDURE refreshenabledstate
		* You can change the line thickness only
		* if the Style is normal:
		*
		if THIS.cboStyle.Value <> 1	&& Normal Style
			THIS.cboWeight.Value = 2 && 1 point
			THIS.cboWeight.Enabled = .F.
			THIS.lblWeight.Enabled = .F.	
		else
			THIS.cboWeight.Enabled = .T.
			THIS.lblWeight.Enabled = .T.
		endif
		
		THIS.cmdBackColor.Enabled = not THIS.chkBackDefault.Value
		THIS.cmdForeColor.Enabled = not THIS.chkForeDefault.Value	
		
	ENDPROC

	PROCEDURE savetofrx
		* THIS DEFAULT CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		
		if not empty(THIS.Tag)
			select (THIS.Tag)
		endif
		
		*---------------------------------------------------				
		* Style is stored in PENPAT
		* Weight is stored in PENSIZE
		*---------------------------------------------------				
		replace PENPAT 	with THIS.StyleToPENPAT(THIS.cboStyle.Value)
		
		do case 
		case inlist( THIS.cboWeight.Value, 1,2,3)
			replace PENSIZE with THIS.cboWeight.Value-1
		
		case THIS.cboWeight.Value=4
			replace PENSIZE with THIS.cboWeight.Value
		
		otherwise	
			replace PENSIZE with THIS.cboWeight.Value+1
		
		endcase
		
		do case
		case THIS.currentObjType = FRX_OBJTYP_LINE
			*---------------------------------------------------				
			* Size of Line Objects:
			* Line objects need their size adjusted, as well as the 
			* thickness of the line. Otherwise the change doesn't 
			* show up in the Report Designer layout:
			*---------------------------------------------------				
			if HEIGHT > WIDTH
				if PENSIZE > 0
					replace WIDTH with PIXEL_WIDTH_IN_FRUS * PENSIZE
				else
					replace WIDTH with PIXEL_WIDTH_IN_FRUS
				endif
			else
				if PENSIZE > 0
					replace HEIGHT with PIXEL_WIDTH_IN_FRUS * PENSIZE
				else
					replace HEIGHT with PIXEL_WIDTH_IN_FRUS
				endif
			endif
		
			*--------------------------------------------------------
			* Color of Line objects:
			*
			* .PENRED,  .PENGREEN,  .PENBLUE
			* .FILLRED, .FILLGREEN, .FILLBLUE
			*---------------------------------------------------				
			replace PENRED 		with THIS.oFormatter.GetForeColor('R'), ;
					PENGREEN	with THIS.oFormatter.GetForeColor('G'), ;
					PENBLUE		with THIS.oFormatter.GetForeColor('B'), ;
					FILLRED 	with THIS.oFormatter.GetBackColor('R'), ;
					FILLGREEN	with THIS.oFormatter.GetBackColor('G'), ;
					FILLBLUE	with THIS.oFormatter.GetBackColor('B')
		
		case THIS.currentObjType = FRX_OBJTYP_RECTANGLE
			*---------------------------------------------------				
			* Color fields:
			*
			* .PENRED,  .PENGREEN,  .PENBLUE
			* .FILLRED, .FILLGREEN, .FILLBLUE
			*---------------------------------------------------				
			replace PENRED 		with THIS.oFormatter.GetForeColor('R'), ;
					PENGREEN	with THIS.oFormatter.GetForeColor('G'), ;
					PENBLUE		with THIS.oFormatter.GetForeColor('B'), ;
					FILLRED 	with THIS.oFormatter.GetBackColor('R'), ;
					FILLGREEN	with THIS.oFormatter.GetBackColor('G'), ;
					FILLBLUE	with THIS.oFormatter.GetBackColor('B')
		
			if THIS.oFormatter.DefaultBackColor 
				*---------------------------------------------------				
				* Leave the FILLPAT value unchanged:
				*---------------------------------------------------				
				* replace FILLPAT with 0
		
			else
				*---------------------------------------------------				
				* The native behaviour will set the FILLPAT to "solid"
				* if it was previously empty and the back color has 
				* been selected. Any other FILLPAT value is left unchanged.
				*---------------------------------------------------				
				if FILLPAT = 0
					replace FILLPAT with 1				
				endif
		
			endif
		
			*---------------------------------------------------				
			* Mode: Opaque = 0
			*       Transp = 1
			*---------------------------------------------------				
			replace MODE with min(THIS.oFormatter.Transparency-1,1)
		
			*---------------------------------------------------				
			* Style is stored in OFFSET as percentage curvature:
			*---------------------------------------------------				
			replace OFFSET with THIS.spnCurvature.Value
		
		otherwise
			*---------------------------------------------------				
			* Not a line or a shape. Hmm. What are we doing here?
			*---------------------------------------------------				
			
		endcase
		
		return .T.
	ENDPROC

	PROCEDURE setenabledstate
		*---------------------------------------------------------------
		* Event-specific actions:
		*   - Set title of dialog:
		*---------------------------------------------------------------
		
		do case
		case THIS.currentObjType = FRX_OBJTYP_LINE
			* 
			THIS.spnCurvature.Value = 0
			THIS.spnCurvature.Enabled = .F.
			THIS.lblCurvature.Enabled = .F.
		
			*--------------------------------------------------------
			* Lines do not have independent backcolor
			*--------------------------------------------------------
			THIS.chkForeDefault.Enabled = .T.
			THIS.cmdForeColor.Enabled = not THIS.chkForeDefault.Value 
		
			THIS.chkBackDefault.Enabled = .F.
			THIS.cmdBackcolor.Enabled   = .F.
			
			*--------------------------------------------------------
			* Lines do not have backstyle mode:
			*--------------------------------------------------------
			THIS.opgMode.Enabled = .F.
			THIS.lblMode.Enabled = .F.
		
		case THIS.currentObjType = FRX_OBJTYP_RECTANGLE
			* 
			THIS.spnCurvature.Enabled = .T.
			THIS.lblCurvature.Enabled = .T.
		
			*--------------------------------------------------------
			* Shapes have both line and back color:
			*--------------------------------------------------------
			THIS.chkForeDefault.Enabled = .T.
			THIS.cmdForeColor.Enabled = not THIS.chkForeDefault.Value 
		
			THIS.chkBackDefault.Enabled = .T.
			THIS.cmdBackColor.Enabled = not THIS.chkBackDefault.Value 
			
			*--------------------------------------------------------
			* Backstyle mode:
			*--------------------------------------------------------
			THIS.opgMode.Enabled = .T.
			THIS.lblMode.Enabled = .T.
		
		otherwise
			*--------------------------------------------------------
			* Should never happen. How many times has this comment been written?
			*--------------------------------------------------------
		
		endcase
		THIS.RefreshEnabledState()
		
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.cboStyle.Value =  6
		THIS.cboWeight.Value = 2
		
	ENDPROC

	PROCEDURE styletopenpat
		lparameter iStyle
		
		do case 
		case m.iStyle = 1	
			return FRX_PENPAT_SOLID
		
		case m.iStyle = 2	
			return FRX_PENPAT_DOTTED
		
		case m.iStyle = 3	
			return FRX_PENPAT_DASHED
		
		case m.iStyle = 4	
			return FRX_PENPAT_DASHDOT
		
		case m.iStyle = 5	
			return FRX_PENPAT_DASHDOTDOT
		
		case m.iStyle = 6	
			return FRX_PENPAT_NONE
			
		endcase
		return FRX_PENPAT_SOLID
	ENDPROC

	PROCEDURE updatepreview
		local oShape
		
		do case
		case THIS.currentObjType = FRX_OBJTYP_RECTANGLE
			THIS.shpPreview.Visible = .T.
			THIS.linPreview.Visible = .F.
			oShape = THIS.shpPreview 	
		
		case THIS.currentObjType = FRX_OBJTYP_LINE
			THIS.shpPreview.Visible = .F.
			THIS.linPreview.Visible = .T.
			oShape = THIS.linPreview 	
			
		endcase
		
		with THIS.shpPreview
		
			.Curvature = THIS.spnCurvature.Value
		
			if THIS.chkBackDefault.Value = .T.
		
				.FillColor = DEFAULT_BACK_COLOR
		
				if THIS.currentObjType = FRX_OBJTYP_RECTANGLE
					*--------------------------------------------------
					* The default backcolor is being used. 
					* Display the same preview file style as specified
					* by the current value of FILLPAT.
					* (Remember - we are not currently allowing FILLPAT 
					* to be edited in this dialog.)
					*--------------------------------------------------
					.FillStyle = THIS.FillPatToFillStyle( FILLPAT )
				endif
		
			else
				.FillColor = THIS.oFormatter.BackColor
		
				if THIS.currentObjType = FRX_OBJTYP_RECTANGLE
					if FILLPAT = 0
						*----------------------------------------------
						* In VFP8, if you take a shape with FILLPAT = 0 (None)
						* and you assign it a Background Color using 
						* Format->Background color..., the FILLPAT is 
						* changed to 1 (Solid) by the Designer.
						*
						* We must duplicate this behaviour. FILLPAT is 
						* set to 1 in the SaveToFrx() method, but here
						* the shpPreview form object is altered to show 
						* the same effective behaviour: 
						* (0=solid for form objects)
						*----------------------------------------------
						.FillStyle = 0
					else
						*--------------------------------------------------
						* Update the shape's fill style to show the same
						* fill pattern as the shape in the report layout:
						*--------------------------------------------------
						.FillStyle = THIS.FillPatToFillStyle( FILLPAT )
					endif
				endif
		
			endif
		
			.BackStyle = iif(THIS.opgMode.Value=2, 0, 1)
		
			if THIS.currentObjType = FRX_OBJTYP_LINE
				*--------------------------------------------------
				* Compress the shape so that is looks like a line
				*--------------------------------------------------
				.Height = .BorderWidth
		
			endif
		
		endwith
		
		with m.oShape
		
			if THIS.chkForeDefault.Value = .T.
				.BorderColor = DEFAULT_FORE_COLOR
			else
				.BorderColor = THIS.oFormatter.ForeColor
			endif
			
			do case
			case THIS.cboStyle.Value = 1  && normal/solid
				.BorderStyle = 1  && solid (VFP object)
		
			case THIS.cboStyle.Value = 2  && dots of different kinds
				.BorderStyle = 3  && dots (VFP object)
		
			case THIS.cboStyle.Value = 3  && dashes
				.BorderStyle = 2  && dash (VFP object)
		
			case THIS.cboStyle.Value = 4  && dash-dot
				.BorderStyle = 4  && dash-dot (VFP object)
		
			case THIS.cboStyle.Value = 5  && dash-dot-dot
				.BorderStyle = 5  && dash-dot-dot (VFP object)
		
			case THIS.cboStyle.Value = 6  && None
				.BorderStyle = 0  && transparent (VFP object)
		
			endcase
		
			*--------------------------------------------------
			* cboWeight: 1 - Hairline      4 - 4 point
			*            2 - 1 point       5 - 6 point
			*            3 - 2 point
			*--------------------------------------------------
			do case
			case THIS.cboWeight.Value = 1
				.BorderWidth = 1
			case THIS.cboWeight.Value = 2
				.BorderWidth = 1
			case THIS.cboWeight.Value = 3
				.BorderWidth = 2
			case THIS.cboWeight.Value = 4
				.BorderWidth = 4
			case THIS.cboWeight.Value = 5
				.BorderWidth = 6
			endcase
		
		endwith
			
	ENDPROC

	PROCEDURE cboStyle.Init
		dodefault()
		
		with THIS
			.Style = 2
			.AddItem( LINE_STYLE_8_LOC, 1 )	&& "Normal"
			.AddItem( LINE_STYLE_1_LOC, 2 )	&& "Dotted"
			.AddItem( LINE_STYLE_2_LOC, 3 )	&& "Dashes"
			.AddItem( LINE_STYLE_3_LOC, 4 )	&& "Dash-dot"
			.AddItem( LINE_STYLE_4_LOC, 5 )	&& "Dash-dot-dot"
			.AddItem( LINE_STYLE_0_LOC, 6 )	&& "None"
		
		endwith
		
	ENDPROC

	PROCEDURE cboStyle.InteractiveChange
		THIS.Parent.RefreshEnabledState()
		THIS.Parent.updatePreview()
	ENDPROC

	PROCEDURE cboWeight.Init
		dodefault()
		
		with THIS
			.Style = 2
			.AddItem(LINE_WIDTH_HAIRLINE_LOC,1) 
			.AddItem(LINE_WIDTH_1POINT_LOC,  2) 
			.AddItem(LINE_WIDTH_2POINT_LOC,  3) 
			.AddItem(LINE_WIDTH_4POINT_LOC,  4) 
			.AddItem(LINE_WIDTH_6POINT_LOC,  5) 
		endwith
	ENDPROC

	PROCEDURE cboWeight.InteractiveChange
		THIS.Parent.updatePreview()
	ENDPROC

	PROCEDURE chkBackDefault.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_BACKCOLOR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkBackDefault.InteractiveChange
		THIS.Parent.oFormatter.DefaultBackColor = THIS.Value
		THIS.Parent.RefreshEnabledState()
		THIS.Parent.updatePreview()
	ENDPROC

	PROCEDURE chkForeDefault.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_FORECOLOR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkForeDefault.InteractiveChange
		THIS.Parent.oFormatter.DefaultForeColor = THIS.Value
		THIS.Parent.RefreshEnabledState()
		THIS.Parent.updatePreview()
	ENDPROC

	PROCEDURE cmdBackcolor.Click
		local iColor
		
		iColor = getColor( THIS.Parent.oFormatter.BackColor )
		if m.iColor > -1
			THIS.Parent.oFormatter.SetBackColor( m.iColor )
			THIS.Parent.RefreshControlValues("Color")
		endif 
		
	ENDPROC

	PROCEDURE cmdBackcolor.enabled_assign
		lparameters lEnabled
		THIS.Enabled = m.lEnabled
		
		THIS.Parent.cntBackColor.BackColor = THIS.Parent.oFormatter.BackColor
		THIS.Parent.cntBackColor.Visible   = THIS.Enabled
	ENDPROC

	PROCEDURE cmdForeColor.Click
		local iColor
		iColor = getColor( THIS.Parent.oFormatter.ForeColor )
		if m.iColor > -1
			THIS.Parent.oFormatter.SetForeColor( m.iColor )
			THIS.Parent.RefreshControlValues("Color")
		endif 
		
	ENDPROC

	PROCEDURE cmdForeColor.enabled_assign
		lparameters lEnabled
		THIS.Enabled = m.lEnabled
		
		THIS.Parent.cntForeColor.BackColor = THIS.Parent.oFormatter.ForeColor
		THIS.Parent.cntForeColor.Visible   = THIS.Enabled
	ENDPROC

	PROCEDURE LBL1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_SHAPE_LBL_STYLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_SAMPLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_SHAPE_LBL_COLOR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblCurvature.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_SHAPE_LBL_CURVATURE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblMode.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_BACKSTYLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblWeight.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_SHAPE_LBL_WEIGHT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgMode.InteractiveChange
		THIS.Parent.oFormatter.Transparency = THIS.Value
		THIS.Parent.UpdatePreview()
	ENDPROC

	PROCEDURE opgMode.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_OPAQUE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgMode.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_TRANSPARENT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE spnCurvature.action
		THIS.Value = min(99,max(0,THIS.Value))
		THIS.Parent.updatePreview()
	ENDPROC

ENDDEFINE

DEFINE CLASS paneltextformat AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="opgMode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpFontBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpColorBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpAlphaBorder" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOverrideCharset" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkForeDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdForeColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkBackDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBackcolor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oFormatter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBackstyle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkStrikethru" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkUnderline" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntPreview" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblAlpha" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnAlphaPen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntBackColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntForeColor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnAlphaFill" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblFill" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*m: choosefont
		*m: refreshcontrolvalues
	*</DefinedPropArrayMethod>

	Height = 327
	Name = "paneltextformat"
	priority = 1
	Width = 297

	ADD OBJECT 'chkBackDefault' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use default background (fill) color", ;
		Left = 12, ;
		Name = "chkBackDefault", ;
		TabIndex = 10, ;
		Top = 139, ;
		Value = .T., ;
		ZOrderSet = 11
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkForeDefault' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use default foreground (pen) color", ;
		Left = 12, ;
		Name = "chkForeDefault", ;
		TabIndex = 8, ;
		Top = 115, ;
		Value = .T., ;
		ZOrderSet = 9
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkOverrideCharset' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Use font script", ;
		Left = 15, ;
		Name = "chkOverrideCharset", ;
		TabIndex = 4, ;
		Top = 46, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkStrikethru' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Strikethrough", ;
		Left = 15, ;
		Name = "chkStrikethru", ;
		TabIndex = 5, ;
		Top = 66, ;
		ZOrderSet = 15
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkUnderline' AS chk WITH ;
		Alignment = 0, ;
		Caption = "Underline", ;
		Left = 147, ;
		Name = "chkUnderline", ;
		TabIndex = 6, ;
		Top = 66, ;
		ZOrderSet = 16
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdBackcolor' AS cmd WITH ;
		Caption = "...", ;
		Enabled = .F., ;
		Height = 21, ;
		Left = 257, ;
		Name = "cmdBackcolor", ;
		TabIndex = 11, ;
		Top = 138, ;
		Width = 21, ;
		ZOrderSet = 12
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFont' AS cmd WITH ;
		Caption = "...", ;
		Height = 22, ;
		Left = 257, ;
		Name = "cmdFont", ;
		TabIndex = 2, ;
		Top = 20, ;
		Width = 21, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdForeColor' AS cmd WITH ;
		Caption = "...", ;
		Enabled = .F., ;
		Height = 21, ;
		Left = 257, ;
		Name = "cmdForeColor", ;
		TabIndex = 9, ;
		Top = 111, ;
		Width = 21, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cntBackColor' AS cnt WITH ;
		BackColor = 209,249,136, ;
		BackStyle = 1, ;
		Height = 14, ;
		Left = 241, ;
		Name = "cntBackColor", ;
		SpecialEffect = 1, ;
		Top = 142, ;
		Width = 14, ;
		ZOrderSet = 20
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'cntForeColor' AS cnt WITH ;
		BackColor = 209,249,136, ;
		BackStyle = 1, ;
		Height = 14, ;
		Left = 241, ;
		Name = "cntForeColor", ;
		SpecialEffect = 1, ;
		Top = 115, ;
		Width = 14, ;
		ZOrderSet = 21
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'cntPreview' AS cnttextpreview WITH ;
		Height = 80, ;
		Left = 0, ;
		Name = "cntPreview", ;
		Top = 243, ;
		Width = 292, ;
		ZOrderSet = 17, ;
		shpBorder.Left = 0, ;
		shpBorder.Name = "shpBorder", ;
		shpBorder.Top = 6, ;
		shpBorder.Width = 288, ;
		canvas.hozLine.Name = "hozLine", ;
		canvas.Name = "canvas", ;
		canvas.Text.Name = "Text", ;
		canvas.vertLine.Name = "vertLine", ;
		lblSample.Name = "lblSample"
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="container" />

	ADD OBJECT 'lblAlpha' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Alpha ", ;
		Left = 164, ;
		Name = "lblAlpha", ;
		Style = 3, ;
		TabIndex = 12, ;
		Top = 173, ;
		Visible = .F., ;
		ZOrderSet = 18
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblBackstyle' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Backstyle ", ;
		Left = 9, ;
		Name = "lblBackstyle", ;
		Style = 3, ;
		TabIndex = 12, ;
		Top = 173, ;
		ZOrderSet = 14
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblColor' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Color ", ;
		Left = 9, ;
		Name = "lblColor", ;
		Style = 3, ;
		TabIndex = 7, ;
		Top = 93, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblFill' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Fill:", ;
		Enabled = .F., ;
		Left = 165, ;
		Name = "lblFill", ;
		Top = 215, ;
		Visible = .F., ;
		ZOrderSet = 24
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblFont' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = " Font ", ;
		Left = 9, ;
		Name = "lblFont", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 3, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblPen' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Pen:", ;
		Enabled = .F., ;
		Left = 165, ;
		Name = "lblPen", ;
		Top = 190, ;
		Visible = .F., ;
		ZOrderSet = 23
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'oFormatter' AS frxformatutil WITH ;
		Height = 16, ;
		Left = 256, ;
		Name = "oFormatter", ;
		Top = 48, ;
		Width = 21
		*< END OBJECT: ClassLib="frxbuilder.vcx" BaseClass="custom" />

	ADD OBJECT 'opgMode' AS opg WITH ;
		ButtonCount = 2, ;
		Height = 58, ;
		Left = 0, ;
		Name = "opgMode", ;
		TabIndex = 13, ;
		Top = 180, ;
		Value = 1, ;
		Width = 288, ;
		ZOrderSet = 0, ;
		Opt1.Caption = "Opaque", ;
		Opt1.Left = 15, ;
		Opt1.Name = "Opt1", ;
		Opt1.Top = 12, ;
		Opt1.Value = 1, ;
		Opt2.Caption = "Transparent", ;
		Opt2.Left = 15, ;
		Opt2.Name = "Opt2", ;
		Opt2.Top = 33
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="optiongroup" />

	ADD OBJECT 'shpAlphaBorder' AS shape WITH ;
		Height = 58, ;
		Left = 156, ;
		Name = "shpAlphaBorder", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 180, ;
		Visible = .F., ;
		Width = 132, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpColorBorder' AS shape WITH ;
		Height = 67, ;
		Left = 1, ;
		Name = "shpColorBorder", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 100, ;
		Width = 287, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpFontBorder' AS shape WITH ;
		Height = 80, ;
		Left = 1, ;
		Name = "shpFontBorder", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 9, ;
		Width = 287, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'spnAlphaFill' AS spn WITH ;
		Enabled = .F., ;
		InputMask = "999", ;
		KeyboardHighValue = 255, ;
		Left = 210, ;
		Name = "spnAlphaFill", ;
		ReadOnly = .F., ;
		SpinnerHighValue = 255.00, ;
		Top = 212, ;
		Visible = .F., ;
		Width = 68, ;
		ZOrderSet = 22
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'spnAlphaPen' AS spn WITH ;
		Enabled = .F., ;
		InputMask = "999", ;
		KeyboardHighValue = 255, ;
		Left = 210, ;
		Name = "spnAlphaPen", ;
		ReadOnly = .F., ;
		SpinnerHighValue = 255.00, ;
		Top = 185, ;
		Visible = .F., ;
		Width = 68, ;
		ZOrderSet = 19
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="spinner" />

	ADD OBJECT 'txtFont' AS txt WITH ;
		BackStyle = 0, ;
		Left = 15, ;
		Name = "txtFont", ;
		ReadOnly = .T., ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 20, ;
		Width = 237, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="textbox" />
	
	PROCEDURE choosefont
		*---------------------------------------------------------------
		* Display the font picker dialog (with the P flag)
		*---------------------------------------------------------------
		THIS.oFormatter.chooseFont()
		THIS.RefreshControlValues("FontStyle")
		
	ENDPROC

	PROCEDURE loadfromfrx
		if used( THIS.Tag )
			select (THIS.Tag)
		
			*-----------------------------------------------------------------
			* Ensure the formatter has reference to our utility object:
			*-----------------------------------------------------------------
			THIS.oFormatter.frxCursor = THIS.frxCursor
		
			*-----------------------------------------------------------------
			*
			* Load the formatter from the FRX cursor:
			*
			*-----------------------------------------------------------------
			THIS.oFormatter.SetFont( FONTFACE, FONTSIZE, FONTSTYLE, DOUBLE, RESOID )
			THIS.oFormatter.setForeColor( PENRED, PENGREEN, PENBLUE )
			THIS.oFormatter.setBackColor( FILLRED, FILLGREEN, FILLBLUE )
		
			*-----------------------------------------------------------------
			* Background transparency is stored in bit 0 of MODE: 
			*-----------------------------------------------------------------
			* bit 0 : Transparency (0 = Opaque, 1 = transparent)
		 	* bit 1 : Direction    (0 = Left-To-Right, 2 = Right-To-Left)
		 	* bit 2 : Context      (4 = Context? what is this?)
			*-----------------------------------------------------------------
			if bittest( MODE, 0 ) 
				THIS.oFormatter.Transparency = 2
			else
				THIS.oFormatter.Transparency = 1
			endif
		
			*-----------------------------------------------------------------
			* Initialise the controls from the oFormatter:
			*
			* NB: Automatic databinding does not work, because the InteractiveChange()
			*     is called *before* the binding takes place. This screws up everything.
			*     So: Manual databinding. Darn it.
			*-----------------------------------------------------------------
			THIS.chkOverrideCharset.Value = THIS.oFormatter.UseExplicitFontCharset
			THIS.chkBackDefault.Value     = THIS.oFormatter.DefaultBackColor
			THIS.chkForeDefault.Value     = THIS.oFormatter.DefaultForeColor
			THIS.chkStrikethru.Value      = THIS.oFormatter.FontStrikeThru
			THIS.chkUnderLine.Value       = THIS.oFormatter.FontUnderline
			THIS.opgMode.Value            = THIS.oFormatter.Transparency
		
			THIS.txtFont.Value       = THIS.oFormatter.getFontString()
			
			*-----------------------------------------------------------------
			* Update the preview text caption:
			*-----------------------------------------------------------------
			local cPreviewText, cExpr
			cPreviewText = ""
			cExpr        = EXPR
		
			do case
			case THIS.Event.ObjType = FRX_OBJTYP_LABEL
				try
					cPreviewText = left(transform( eval( m.cExpr ) ),254)
				catch
					cPreviewText = left( m.cExpr,254)
				endtry			
			
			case THIS.Event.ObjType = FRX_OBJTYP_FIELD
				set datasession to (THIS.event.defaultSessionId)
				if type( m.cExpr ) = "U"
					cPreviewText = TEXTFORMAT_PREVIEW_DEFAULT_TEXT_LOC
				else
					try
						cPreviewText = left(transform( eval( m.cExpr ) ),254)
					catch
						cPreviewText = left( m.cExpr,254)
					endtry			
				endif
				set datasession to (THIS.event.frxSessionId)
		
			endcase
			THIS.cntPreview.Caption = evl(m.cPreviewText,TEXTFORMAT_PREVIEW_DEFAULT_TEXT_LOC)
			THIS.RefreshControlValues("All")
		
			*-----------------------------------------------------------------
			* Go to protected mode, if necessary:
			*-----------------------------------------------------------------
			store .F. to ;
				THIS.lblFill.Enabled, ;
				THIS.lblPen.Enabled 	
			
			*-----------------------------------------------------------------
			* Go to protected mode, if necessary:
			*-----------------------------------------------------------------
			THIS.setProtection()
			
		endif
			
	ENDPROC

	PROCEDURE refreshcontrolvalues
		lparameter tcSourceControl
		if empty(m.tcSourceControl)
			tcSourceControl = "All"
		endif
		
		if inlist( m.tcSourceControl, "All", "BackStyle")
			THIS.spnAlphaFill.Value = THIS.oFormatter.AlphaFill
			THIS.spnAlphaPen.Value  = THIS.oFormatter.AlphaPen
		endif
		
		if inlist( m.tcSourceControl, "BackAlpha")
			THIS.oFormatter.AlphaFill = THIS.spnAlphaFill.Value
		endif
		
		if inlist( m.tcSourceControl, "All", "FontStyle")
			*---------------------------------------------
			* Change for SP2:
			* do not change the setting of the Use Font Script checkbox.
			*---------------------------------------------
			if THIS.chkOverrideCharset.Value = .F.
				THIS.oFormatter.useExplicitFontCharset = .F.
			endif
			THIS.txtFont.Value = THIS.oFormatter.GetFontString()
			*---------------------------------------------
			* Original code:
			*---------------------------------------------
			*THIS.txtFont.Value            = THIS.oFormatter.GetFontString()
			*THIS.chkOverrideCharset.Value = THIS.oFormatter.UseExplicitFontCharset  
		endif
		
		if inlist( m.tcSourceControl, "All", "Color")
			THIS.cmdBackColor.Enabled = not THIS.chkBackDefault.Value
			THIS.cmdForeColor.Enabled = not THIS.chkForeDefault.Value	
		endif
		
		THIS.cntPreview.Refresh( THIS.oFormatter )
		
		return
	ENDPROC

	PROCEDURE savetofrx
		if used( THIS.Tag )
			select (THIS.Tag)
			
			*-----------------------------------------------------------------
			* Font:
			*
			* .FONTFACE
			* .FONTSTYLE
			* .FONTSIZE
			* Mode: Opaque = 0, Transp = 1. Transparency: 1=Opaque, 2=Transp
			* 
			*-----------------------------------------------------------------
			replace FONTFACE	with THIS.oFormatter.FontFace, ;
					FONTSIZE	with THIS.oFormatter.FontSize, ;
					FONTSTYLE	with THIS.oFormatter.FontStyle, ;
					MODE        with min(THIS.oFormatter.Transparency-1,1)
					
			*-----------------------------------------------------------------
			* FontCharSet:
			*   frx.DOUBLE indicates if an explicit FontCharSet is specified
			*   frx.RESOID contains the value of FontCharSet
			*
			* In FontCharSet parlance:
			*		0 = Western
			*	    1 = System Default
			*-----------------------------------------------------------------
			if THIS.oFormatter.UseExplicitFontCharset
				replace RESOID      with THIS.oFormatter.FontCharSet, ;
						DOUBLE		with .T.
			else
				*-----------------------------------------------------------
				* Always specify a charset, even if it is system default
				*-----------------------------------------------------------
				replace RESOID      with 1, ;
						DOUBLE		with .T.
			endif
		
			*-----------------------------------------------------------------
			* Color:
			*
			* .PENRED
			* .PENGREEN
			* .PENBLUE
			* .FILLRED
			* .FILLGREEN
			* .FILLBLUE
			* What about labels no backcolor? 
			* What about default colors?
			*-----------------------------------------------------------------
			replace PENRED		with THIS.oFormatter.GetForeColor('R'), ;
					PENGREEN	with THIS.oFormatter.GetForeColor('G'), ;
					PENBLUE		with THIS.oFormatter.GetForeColor('B'), ;
					FILLRED		with THIS.oFormatter.GetBackColor('R'), ;
					FILLGREEN	with THIS.oFormatter.GetBackColor('G'), ;
					FILLBLUE	with THIS.oFormatter.GetBackColor('B')
			
			*-----------------------------------------------------------------
			* Ensure the formatter clears its reference to our utility object:
			*-----------------------------------------------------------------
			THIS.oFormatter.frxCursor = null
				
		endif
		return .T.
	ENDPROC

	PROCEDURE chkBackDefault.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_BACKCOLOR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkBackDefault.InteractiveChange
		THIS.Parent.oFormatter.DefaultBackColor = THIS.Value
		THIS.Parent.RefreshControlValues("Color")
	ENDPROC

	PROCEDURE chkForeDefault.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_CHK_FORECOLOR_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkForeDefault.InteractiveChange
		THIS.Parent.oFormatter.DefaultForeColor = THIS.Value
		THIS.Parent.RefreshControlValues("Color")
	ENDPROC

	PROCEDURE chkOverrideCharset.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TEXTFORMAT_CHK_FONTSCRIPT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkOverrideCharset.InteractiveChange
		THIS.Parent.oFormatter.UseExplicitFontCharset = THIS.Value
		THIS.Parent.RefreshControlValues("FontStyle")
	ENDPROC

	PROCEDURE chkStrikethru.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TEXTFORMAT_CHK_STRIKETHRU_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE chkStrikethru.InteractiveChange
		THIS.Parent.oFormatter.FontStrikeThru = THIS.Value
		THIS.Parent.RefreshControlValues("FontStyle")
	ENDPROC

	PROCEDURE chkUnderline.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TEXTFORMAT_CHK_UNDERLINE_LOC
		#ENDIF
		
		
	ENDPROC

	PROCEDURE chkUnderline.InteractiveChange
		THIS.Parent.oFormatter.FontUnderline = THIS.Value
		THIS.Parent.RefreshControlValues("FontStyle")
	ENDPROC

	PROCEDURE cmdBackcolor.Click
		local iColor
		iColor = getColor( THIS.Parent.oFormatter.BackColor )
		if m.iColor > -1
			THIS.Parent.oFormatter.SetBackColor( m.iColor )
			THIS.Parent.RefreshControlValues("Color")
		endif 
		
	ENDPROC

	PROCEDURE cmdBackcolor.enabled_assign
		lparameters lEnabled
		THIS.Enabled = m.lEnabled
		
		THIS.Parent.cntBackColor.BackColor = THIS.Parent.oFormatter.BackColor
		THIS.Parent.cntBackColor.Visible   = THIS.Enabled
	ENDPROC

	PROCEDURE cmdFont.Click
		THIS.Parent.chooseFont()
	ENDPROC

	PROCEDURE cmdForeColor.Click
		local iColor
		iColor = getColor( THIS.Parent.oFormatter.ForeColor )
		if m.iColor > -1
			THIS.Parent.oFormatter.SetForeColor( m.iColor )
			THIS.Parent.RefreshControlValues("Color")
		endif 
		
	ENDPROC

	PROCEDURE cmdForeColor.enabled_assign
		lparameters lEnabled
		THIS.Enabled = m.lEnabled
		
		THIS.Parent.cntForeColor.BackColor = THIS.Parent.oFormatter.ForeColor
		THIS.Parent.cntForeColor.Visible   = THIS.Enabled
	ENDPROC

	PROCEDURE lblAlpha.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_ALPHA_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblBackstyle.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_LBL_BACKSTYLE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblFill.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_ALPHA_FILL_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblFont.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TEXTFORMAT_LBL_FONT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblPen.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_ALPHA_PEN_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgMode.InteractiveChange
		THIS.Parent.oFormatter.Transparency = THIS.Value
		THIS.Parent.RefreshControlValues("BackStyle")
	ENDPROC

	PROCEDURE opgMode.Opt1.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_OPAQUE_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE opgMode.Opt2.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_FORMAT_OPT_TRANSPARENT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE spnAlphaFill.action
		THIS.Value = min(255,max(0,THIS.Value))
		THIS.Parent.oFormatter.AlphaFill = THIS.Value
	ENDPROC

	PROCEDURE spnAlphaFill.InteractiveChange
		THIS.Parent.RefreshControlValues("BackAlpha")
		
	ENDPROC

	PROCEDURE spnAlphaPen.action
		THIS.Value = min(255,max(0,THIS.Value))
		THIS.Parent.oFormatter.AlphaPen = THIS.Value
	ENDPROC

ENDDEFINE

DEFINE CLASS paneltextlabel AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ObjPosition" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Lbl3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cmd1" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	Height = 140
	Name = "paneltextlabel"
	Tag = "frx"
	Width = 295

	ADD OBJECT 'Cmd1' AS cmd WITH ;
		Caption = "...", ;
		Height = 22, ;
		Left = 268, ;
		Name = "Cmd1", ;
		TabIndex = 2, ;
		Top = 17, ;
		Width = 22
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Lbl3' AS lbl WITH ;
		BackStyle = 0, ;
		Caption = "Caption:", ;
		Left = 1, ;
		Name = "Lbl3", ;
		Style = 0, ;
		TabIndex = 4, ;
		Top = 0, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'ObjPosition' AS frxobjectpositioncontrol WITH ;
		BackStyle = 0, ;
		Height = 90, ;
		Left = 0, ;
		Name = "ObjPosition", ;
		TabIndex = 3, ;
		Top = 44, ;
		Width = 292, ;
		ZOrderSet = 1, ;
		OptionGroup.Left = 0, ;
		OptionGroup.Name = "OptionGroup", ;
		OptionGroup.Opt1.Left = 64, ;
		OptionGroup.Opt1.Name = "Opt1", ;
		OptionGroup.Opt1.Top = 15, ;
		OptionGroup.Opt2.Left = 64, ;
		OptionGroup.Opt2.Name = "Opt2", ;
		OptionGroup.Opt2.Top = 36, ;
		OptionGroup.Opt3.Left = 64, ;
		OptionGroup.Opt3.Name = "Opt3", ;
		OptionGroup.Opt3.Top = 57, ;
		OptionGroup.Top = 7, ;
		OptionGroup.Width = 288, ;
		Label.Name = "Label", ;
		GIFFLOAT.Height = 34, ;
		GIFFLOAT.Name = "GIFFLOAT", ;
		GIFFLOAT.Width = 31, ;
		GIFTOP.Height = 34, ;
		GIFTOP.Name = "GIFTOP", ;
		GIFTOP.Width = 31, ;
		GIFBOTTOM.Height = 34, ;
		GIFBOTTOM.Name = "GIFBOTTOM", ;
		GIFBOTTOM.Width = 31
		*< END OBJECT: ClassLib="frxpanels.vcx" BaseClass="container" />

	ADD OBJECT 'txtCaption' AS edt WITH ;
		Height = 22, ;
		Left = 0, ;
		MaxLength = 254, ;
		Name = "txtCaption", ;
		ScrollBars = 0, ;
		TabIndex = 1, ;
		Top = 17, ;
		Width = 264
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="editbox" />
	
	PROCEDURE loadfromfrx
		* NB: THIS CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* For 
		
		* select the alias stored in the TAG property:
		*
		if not empty( THIS.Tag)
			select (THIS.Tag)
		
			* Caption:
			*
			local cExpr
			cExpr = trim(EXPR)
			THIS.txtCaption.Value = substr(m.cExpr,2,len(m.cExpr)-2)
		
			* Object Position:
			*
			THIS.objPosition.LoadFromFrx()
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
		
	ENDPROC

	PROCEDURE savetofrx
		*----------------------------------------------------------------
		* THIS DEFAULT CODE IS VALID FOR SINGLE-RECORD EDITING ONLY
		* WARNING: Assumes the record pointer in the selected alias
		* (FRX by default) has not changed.
		*----------------------------------------------------------------
		if not empty(this.Tag)
			select (this.Tag)
		endif
		
		*----------------------------------------------------------------
		* Caption:
		*----------------------------------------------------------------
		if empty(THIS.txtCaption.Value)
			=messagebox(TEXTLABEL_INVALID_CAPTION_MSG_LOC, 48, PROPEDIT_MBOX_TITLE_LOC)
			return .F.
		endif
		
		*----------------------------------------------------------------
		* Strip out the line-feeds and assign the caption text to EXPR:
		*----------------------------------------------------------------
		local cCaption
		cCaption = chrtran(trim(this.txtCaption.Value), chr(10),"")
		
		replace EXPR with ["] + m.cCaption + ["] ;
			in (this.Tag)
		
		*----------------------------------------------------------------
		* Grab the font characteristics
		* this works because the loFormatter object is created 
		* while the frx record is selected. See frxFormatUtil::Init()
		*----------------------------------------------------------------
		local loFormat
		loFormat   = newobject("frxFormatUtil",BUILDER_CLASSLIB)
		loFormat.setFont()
		
		*----------------------------------------------------------------
		* Obtain the height, width of the object:
		*----------------------------------------------------------------
		local nLineCount, nLineHeight, nLabelHeight, nLabelWidth
		
		nLineCount  = alines( raTemp, m.cCaption )
		nLineHeight = THIS.frxCursor.getFruTextHeight( trim(raTemp[1] ), ;
						loFormat.FontFace, ;
						loFormat.FontSize, ;
						loFormat.StyleFlagsToChar( loFormat.FontStyle ))
		
		*----------------------------------------------------------------
		* Respect line spacing:
		* multiplier formula:
		*		lineCount + (nSpacing-1)(lineCount-1)
		*----------------------------------------------------------------
		
		do case
		case SPACING = 0
			*----------------------------------------------------------------
			* Single line spacing: height x n
			*----------------------------------------------------------------
			nLabelHeight = m.nLineHeight * m.nLineCount	
		
		case SPACING = 1
			*----------------------------------------------------------------
			* 1.5 line spacing:    height x (1.5n - 0.5)
			*----------------------------------------------------------------
			nLabelHeight = m.nLineHeight * ( 1.5 * m.nLineCount - 0.5 )
		
		case SPACING = 2
			*----------------------------------------------------------------
			* double line spacing: height x (2n-1)
			*----------------------------------------------------------------
			nLabelHeight = m.nLineHeight * (2 * m.nLineCount - 1 )
		
		endcase
		
		if m.nLineCount > 1
			*----------------------------------------------------------------
			* It's a multi-line caption, so get the longest line to use for 
			* calculating the label width:
			*----------------------------------------------------------------
			local i,j 
			j = alines( laLine, m.cCaption, .T. )
			cCaption = ""
			for i = 1 to m.j
				if len( laLine[m.i] ) > len( m.cCaption )
					cCaption = laLine[m.i]
				endif	
			endfor	
		endif
		
		nLabelWidth = THIS.frxCursor.getFruTextWidth( m.cCaption , ;
						loFormat.FontFace, ;
						loFormat.FontSize, ;
						loFormat.StyleFlagsToChar( loFormat.FontStyle ) )
		
		*----------------------------------------------------------------
		* Update with height and width:
		*----------------------------------------------------------------
		replace ;
			WIDTH  with  m.nLabelWidth ;
			HEIGHT with  m.nLabelHeight ;
			in (this.Tag)
		
		*----------------------------------------------------------------
		* Object Position:
		*----------------------------------------------------------------
		THIS.objPosition.SaveToFrx()	
			
		return .T.
	ENDPROC

	PROCEDURE setinitialvalues
		THIS.txtCaption.Value = "new label"
		THIS.objPosition.Value = OBJECT_POSITION_FIX_TOP
		
	ENDPROC

	PROCEDURE Cmd1.Click
		*-------------------------------------------------------
		* Contract: This control will always be used on 
		* an instance of frxPanel. If it is not, then adjust this
		* code to suit.
		*-------------------------------------------------------
		local cExpression, cDefaultExpr
		cExpression  = ""
		cDefaultExpr = THIS.Parent.txtCaption.Value
		
		cExpression = THIS.Parent.event.GetExpression( m.cDefaultExpr, "C", "LabelCaption" )
		
		THIS.Parent.txtCaption.Value = left(m.cExpression,254)
		
		return
		
		
	ENDPROC

	PROCEDURE Lbl3.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TEXTLABEL_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS paneltooltip AS frxpanel OF "frxpanels.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpUser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTooltipText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="CmdTooltip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTooltipCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgTooltip" UniqueID="" Timestamp="" />

	#INCLUDE "frxbuilder.h"
	*<DefinedPropArrayMethod>
		*p: usertext
	*</DefinedPropArrayMethod>

	Height = 78
	Name = "paneltooltip"
	usertext = ("")
	Width = 313

	ADD OBJECT 'CmdTooltip' AS cmd WITH ;
		Caption = "Edit tooltip...", ;
		Left = 187, ;
		Name = "CmdTooltip", ;
		TabIndex = 3, ;
		Top = 50, ;
		Width = 120, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'imgTooltip' AS image WITH ;
		Height = 32, ;
		Left = 8, ;
		Name = "imgTooltip", ;
		Picture = images\tooltip.bmp, ;
		Top = 24, ;
		Width = 32, ;
		ZOrderSet = 14
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblTooltipCaption' AS lbl WITH ;
		BackStyle = 1, ;
		Caption = "Tooltip ", ;
		Left = 2, ;
		Name = "lblTooltipCaption", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 2, ;
		ZOrderSet = 13
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'lblTooltipText' AS lbl WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "see OTHER_EDIT_TOOLTIP_LOC", ;
		Height = 35, ;
		Left = 56, ;
		Name = "lblTooltipText", ;
		TabIndex = 2, ;
		Top = 17, ;
		Width = 248, ;
		WordWrap = .T., ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="frxcontrols.vcx" BaseClass="label" />

	ADD OBJECT 'shpUser' AS shape WITH ;
		Height = 2, ;
		Left = 5, ;
		Name = "shpUser", ;
		SpecialEffect = 0, ;
		Top = 9, ;
		Width = 300, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE loadfromfrx
		if not empty(THIS.Tag)
			select (THIS.Tag)
		
			* Tooltip:
			*
			this.userText = trim(TAG2)
			if not empty( THIS.userText  )
				this.lblTooltipText.Caption = left(THIS.userText,240)
			else
				this.lblTooltipText.Caption = OTHER_EDIT_TOOLTIP_LOC
			endif
		
			* Go to protected mode, if necessary:
			*
			THIS.setProtection()
		
		endif
	ENDPROC

	PROCEDURE savetofrx
		* Comment & User:
		*
		replace TAG2 with trim(this.userText) ;
			in (this.Tag)
		
		return .T.
	ENDPROC

	PROCEDURE setprotection
		if THIS.event.protected
			
			* Make the panel invisible in protected mode:
			THIS.Visible = .F.
		*!*		
		*!*		store .F. to ;
		*!*			THIS.shpUser.Visible, ;
		*!*			THIS.lblTooltipCaption.Visible, ;
		*!*			THIS.lblTooltipText.Visible, ;
		*!*			THIS.imgTooltip.Visible, ;
		*!*			THIS.cmdTooltip.Visible
				
		endif
	ENDPROC

	PROCEDURE CmdTooltip.Click
		*----------------------------------------------------------------
		* Launch a multi-line edit window
		*----------------------------------------------------------------
		local x
		x = newobject("frxMemoEditForm","frxBuilder")
		with x
			.Caption 		= THISFORM.Caption + " " + THIS.Parent.lblToolTipCaption.Caption
			.FixedWidthFont = .F.
			.Text 			= THIS.Parent.UserText
			.setHelperText(OTHER_EDIT_TOOLTIP_LOC)
			.Execute()
		endwith
		THIS.Parent.UserText = x.Text
		
		if not empty( THIS.Parent.UserText )
			THIS.Parent.lblTooltipText.Caption = left(x.Text,240)
		else
			THIS.Parent.lblToolTipText.Caption = OTHER_EDIT_TOOLTIP_LOC 
		endif
		return
		
		
	ENDPROC

	PROCEDURE CmdTooltip.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TOOLTIP_CMD_EDIT_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblTooltipCaption.Init
		#IF USE_LOC_STRINGS_IN_UI
		    THIS.Caption = UI_TOOLTIP_LBL_CAPTION_LOC
		#ENDIF
		
	ENDPROC

	PROCEDURE lblTooltipText.Init
		THIS.Caption = OTHER_EDIT_TOOLTIP_LOC
	ENDPROC

ENDDEFINE

DEFINE CLASS shppreviewcolumn AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "frxbuilder.h"
	BorderStyle = 0
	FillColor = 192,192,192
	FillStyle = 2
	Height = 94
	Name = "shppreviewcolumn"
	Width = 29
	
	PROCEDURE DblClick
		THIS.Parent.dblClick()
	ENDPROC

ENDDEFINE
